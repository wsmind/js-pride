var backgroundFragmentShader="precision highp float;uniform float time;uniform vec2 res;const float a=1e4;const vec3 b=vec3(.7,.9,1);const float c=.004;const vec3 d=vec3(.5,1,.9);float n(vec3 e){return length(max(abs(e)-vec3(10),0.));}float o(vec3 e){float f,g,h;f=sin(time*.1)*.004;g=cos(e.z*f);h=sin(e.z*f);mat2 i=mat2(g,-h,h,g);e.xy=i*e.xy;return n(mod(e-vec3(-5.,0,50.-time*1e2),50.)-vec3(25));}vec3 p(vec3 e){float f=.01;vec3 g;g.x=o(vec3(e.x+f,e.y,e.z))-o(vec3(e.x-f,e.y,e.z));g.y=o(vec3(e.x,e.y+f,e.z))-o(vec3(e.x,e.y-f,e.z));g.z=o(vec3(e.x,e.y,e.z+f))-o(vec3(e.x,e.y,e.z-f));return normalize(g);}float q(vec3 e,vec3 f,float g){float h=g;e+=f*g;for(int i=0;i<5;i++){e+=f;h=min(h,max(o(e),0.));}return h/g;}vec3 r(vec3 e,vec3 f){for(int g=0;g<40;g++){float h=o(e);e+=.9*h*f;}return e;}void main(){vec3 e,f,g,h,i,j;e=vec3(cos(time*.7)*5.,sin(time*.4)*10.+12.,0);f=normalize(vec3((gl_FragCoord.x-res.x*.5)/res.y,gl_FragCoord.y/res.y-.5,1));h=r(e,f);i=p(h);j=vec3(1);float k,l,m;k=1.-1./exp(h.z*c);l=q(h,i,5.);m=max(dot(i,vec3(.707,.707,0)),0.);g=mix(j*m*l,vec3(.8),k);gl_FragColor=vec4(g,1);}"
var backgroundVertexShader="precision highp float;uniform float time;uniform vec2 res;attribute vec2 vertexPos;void main(){gl_Position=vec4(vertexPos,0,1);}"
var cornerMeshBuffer={"positions":[1.0,0.0,-1.0,1.0,1.0,-1.0,1.000000238418579,0.0,-0.8974223136901855,1.000000238418579,1.0,-0.8974223136901855,1.000000238418579,0.0,-0.7686111927032471,1.000000238418579,1.0,-0.7686111927032471,1.000000238418579,0.0,-0.6115193367004395,1.000000238418579,1.0,-0.6115193367004395,1.000000238418579,0.0,-0.46331000328063965,1.000000238418579,1.0,-0.46331000328063965,0.5555499792098999,0.0,-0.0,0.5555499792098999,1.0,-0.0,0.4007596969604492,0.0,-0.0,0.39638999104499817,1.0,-0.0,0.11552442610263824,0.0,-0.0,0.1106799989938736,1.0,-0.0,9.313225746154785e-10,0.0,-0.0,9.313225746154785e-10,1.0,-0.0,0.4007596969604492,0.15542997419834137,-0.0,0.39639198780059814,0.2857142984867096,0.0003079921007156372,0.39639198780059814,0.855372428894043,-0.0,0.25353485345840454,0.2857142984867096,0.0003079921007156372,0.25353485345840454,0.8571428060531616,0.0003079324960708618,0.11552442610263824,0.15542997419834137,-0.0,0.11067765951156616,0.2857142984867096,0.0003079921007156372,0.11067765951156616,0.855372428894043,-0.0,0.39639198780059814,0.2857142984867096,-0.03730325400829315,0.39639198780059814,0.855372428894043,-0.03730331361293793,0.25353485345840454,0.2857142984867096,-0.03730325400829315,0.25353485345840454,0.855372428894043,-0.03730331361293793,0.11067765951156616,0.2857142984867096,-0.03730325400829315,0.11067765951156616,0.855372428894043,-0.03730331361293793,0.39639198780059814,0.23993588984012604,0.0003079921007156372,0.25353485345840454,0.23993588984012604,0.0003079921007156372,0.11404496431350708,0.23993588984012604,0.0003079921007156372,0.39639198780059814,0.2857142984867096,0.05712057650089264,0.25353485345840454,0.2857142984867096,0.05712057650089264,0.11067765951156616,0.2857142984867096,0.05712057650089264,0.39639198780059814,0.23993588984012604,0.057120636105537415,0.25353485345840454,0.23993588984012604,0.057120636105537415,0.11067765951156616,0.23993588984012604,0.057120636105537415,0.39639198780059814,0.2857142984867096,0.08133538067340851,0.25353485345840454,0.2857142984867096,0.08133538067340851,0.11067765951156616,0.2857142984867096,0.08133538067340851,0.39639198780059814,0.23993588984012604,0.08133538067340851,0.25353485345840454,0.23993588984012604,0.08133538067340851,0.11067765951156616,0.23993588984012604,0.08133538067340851,0.282306432723999,0.2857142984867096,0.05712057650089264,0.3150906562805176,0.2857142984867096,0.05712057650089264,0.3508049249649048,0.2857142984867096,0.05712057650089264,0.15971535444259644,0.2857142984867096,0.05712057650089264,0.1932571530342102,0.2857142984867096,0.05712057650089264,0.2241615653038025,0.2857142984867096,0.05712057650089264,0.282306432723999,0.2857142984867096,0.08133538067340851,0.3150906562805176,0.2857142984867096,0.08133538067340851,0.3508049249649048,0.2857142984867096,0.08133538067340851,0.15971535444259644,0.2857142984867096,0.08133538067340851,0.1932571530342102,0.2857142984867096,0.08133538067340851,0.2241615653038025,0.2857142984867096,0.08133538067340851,0.39639198780059814,0.2857142984867096,0.06317432224750519,0.39639198780059814,0.2857142984867096,0.07528169453144073,0.25353485345840454,0.2857142984867096,0.07528169453144073,0.23881667852401733,0.2857142984867096,0.07528169453144073,0.25353485345840454,0.2857142984867096,0.06317432224750519,0.11067765951156616,0.2857142984867096,0.06317432224750519,0.11067765951156616,0.2857142984867096,0.07528169453144073,0.3675244450569153,0.2857142984867096,0.05712057650089264,0.282306432723999,0.2857142984867096,0.06317432224750519,0.282306432723999,0.2857142984867096,0.07528169453144073,0.23881667852401733,0.2857142984867096,0.06317432224750519,0.3150906562805176,0.2857142984867096,0.06317432224750519,0.3150906562805176,0.2857142984867096,0.07528169453144073,0.20636147260665894,0.2857142984867096,0.07528169453144073,0.3508049249649048,0.2857142984867096,0.06317432224750519,0.3508049249649048,0.2857142984867096,0.07528169453144073,0.15971535444259644,0.2857142984867096,0.06317432224750519,0.15971535444259644,0.2857142984867096,0.07528169453144073,0.3675244450569153,0.2857142984867096,0.08133538067340851,0.1932571530342102,0.2857142984867096,0.06317432224750519,0.1932571530342102,0.2857142984867096,0.07528169453144073,0.3675244450569153,0.2857142984867096,0.06317432224750519,0.2241615653038025,0.2857142984867096,0.06317432224750519,0.2241615653038025,0.2857142984867096,0.07528169453144073,0.3675244450569153,0.2857142984867096,0.07528169453144073,0.20636147260665894,0.2857142984867096,0.06317432224750519,0.26747971773147583,0.2857142984867096,0.07528169453144073,0.26747971773147583,0.2857142984867096,0.06317432224750519,0.26747971773147583,0.2857142984867096,0.08133538067340851,0.1741146445274353,0.2857142984867096,0.08133538067340851,0.1741146445274353,0.2857142984867096,0.06317432224750519,0.29592204093933105,0.2857142984867096,0.05712057650089264,0.29592204093933105,0.2857142984867096,0.08133538067340851,0.29592204093933105,0.2857142984867096,0.06317432224750519,0.29592204093933105,0.2857142984867096,0.07528169453144073,0.1741146445274353,0.2857142984867096,0.07528169453144073,0.1741146445274353,0.2857142984867096,0.05712057650089264,0.26747971773147583,0.2857142984867096,0.05712057650089264,0.329154908657074,0.2857142984867096,0.07528169453144073,0.329154908657074,0.2857142984867096,0.06317432224750519,0.329154908657074,0.2857142984867096,0.08133538067340851,0.329154908657074,0.2857142984867096,0.05712057650089264,0.20636147260665894,0.2857142984867096,0.05712057650089264,0.20636147260665894,0.2857142984867096,0.08133538067340851,0.23881667852401733,0.2857142984867096,0.05712057650089264,0.23881667852401733,0.2857142984867096,0.08133538067340851,0.14444607496261597,0.2857142984867096,0.07528169453144073,0.14444607496261597,0.2857142984867096,0.06317432224750519,0.14444607496261597,0.2857142984867096,0.08133538067340851,0.14444607496261597,0.2857142984867096,0.05712057650089264,0.3829967975616455,0.2857142984867096,0.07528169453144073,0.3829967975616455,0.2857142984867096,0.06317432224750519,0.3829967975616455,0.2857142984867096,0.08133538067340851,0.3829967975616455,0.2857142984867096,0.05712057650089264,0.1345633864402771,0.2857142984867096,0.05712057650089264,0.1345633864402771,0.2857142984867096,0.08133538067340851,0.1345633864402771,0.2857142984867096,0.06317432224750519,0.1345633864402771,0.2857142984867096,0.07528169453144073,0.26747971773147583,0.4466831088066101,0.06317432224750519,0.1741146445274353,0.4466831088066101,0.06317432224750519,0.29592204093933105,0.4466831088066101,0.06317432224750519,0.29592204093933105,0.4466831088066101,0.07528169453144073,0.39639198780059814,0.4466831088066101,0.06317432224750519,0.39639198780059814,0.4466831088066101,0.07528169453144073,0.25353485345840454,0.4466831088066101,0.07528169453144073,0.23881667852401733,0.4466831088066101,0.07528169453144073,0.25353485345840454,0.4466831088066101,0.06317432224750519,0.11067765951156616,0.4466831088066101,0.06317432224750519,0.11067765951156616,0.4466831088066101,0.07528169453144073,0.282306432723999,0.4466831088066101,0.06317432224750519,0.1204039454460144,0.2857142984867096,0.07528169453144073,0.1204039454460144,0.2857142984867096,0.06317432224750519,0.1204039454460144,0.2857142984867096,0.08133538067340851,0.1204039454460144,0.2857142984867096,0.05712057650089264,0.39639198780059814,0.4466831088066101,0.03786386549472809,0.38254356384277344,0.4466831088066101,0.03850765526294708,0.39639198780059814,0.4466831088066101,0.01886315643787384,0.3820793032646179,0.4466831088066101,0.01944275200366974,0.1204039454460144,0.4466831088066101,0.07528169453144073,0.1204039454460144,0.4466831088066101,0.06317432224750519,0.39639198780059814,0.31848421692848206,0.06317432224750519,0.3816133141517639,0.2857142984867096,0.0003079921007156372,0.1741146445274353,0.4466831088066101,0.07528169453144073,0.329154908657074,0.4466831088066101,0.07528169453144073,0.329154908657074,0.4466831088066101,0.06317432224750519,0.14444607496261597,0.4466831088066101,0.07528169453144073,0.3508049249649048,0.4466831088066101,0.07528169453144073,0.15971535444259644,0.4466831088066101,0.06317432224750519,0.15971535444259644,0.4466831088066101,0.07528169453144073,0.1932571530342102,0.4466831088066101,0.06317432224750519,0.1932571530342102,0.4466831088066101,0.07528169453144073,0.3675244450569153,0.4466831088066101,0.06317432224750519,0.2241615653038025,0.4466831088066101,0.06317432224750519,0.14444607496261597,0.4466831088066101,0.06317432224750519,0.3829967975616455,0.4466831088066101,0.07528169453144073,0.3829967975616455,0.4466831088066101,0.06317432224750519,0.1345633864402771,0.4466831088066101,0.06317432224750519,0.1345633864402771,0.4466831088066101,0.07528169453144073,0.39639198780059814,0.2857142984867096,0.03786386549472809,0.38254356384277344,0.2857142984867096,0.03850765526294708,0.39639198780059814,0.2857142984867096,0.01886315643787384,0.3820793032646179,0.2857142984867096,0.01944275200366974,0.2241615653038025,0.4466831088066101,0.07528169453144073,0.3675244450569153,0.4466831088066101,0.07528169453144073,0.20636147260665894,0.4466831088066101,0.06317432224750519,0.26747971773147583,0.4466831088066101,0.07528169453144073,0.3508049249649048,0.4466831088066101,0.06317432224750519,0.20636147260665894,0.4466831088066101,0.07528169453144073,0.3150906562805176,0.4466831088066101,0.07528169453144073,0.3150906562805176,0.4466831088066101,0.06317432224750519,0.23881667852401733,0.4466831088066101,0.06317432224750519,0.282306432723999,0.4466831088066101,0.07528169453144073,0.12134033441543579,0.2857142984867096,0.0003079921007156372,0.11067765951156616,0.2857142984867096,0.023444250226020813,0.12097430229187012,0.2857142984867096,0.022516801953315735,0.12072592973709106,0.2857142984867096,0.03758300840854645,0.11067765951156616,0.2857142984867096,0.03937692940235138,0.11067765951156616,0.4466831088066101,0.023444250226020813,0.12097430229187012,0.4466831088066101,0.022516801953315735,0.12072592973709106,0.4466831088066101,0.03758300840854645,0.11067765951156616,0.4466831088066101,0.03937692940235138,0.4007596969604492,0.20396995544433594,-0.0,0.25353485345840454,0.20396995544433594,0.00030800700187683105,0.11498937010765076,0.20396995544433594,-0.0,0.9995124340057373,0.15542997419834137,-0.8963918685913086,0.9995124340057373,0.2857142984867096,-0.8963918685913086,0.9995124340057373,0.855372428894043,-0.8974223136901855,0.9995124340057373,0.15542997419834137,-0.7686111927032471,0.9995124340057373,0.2857142984867096,-0.753534734249115,0.9995124340057373,0.8571428060531616,-0.7686111927032471,1.000000238418579,0.15542997419834137,-0.6115193367004395,0.9995124340057373,0.2857142984867096,-0.6106775403022766,0.9995124340057373,0.855372428894043,-0.6115193367004395,0.9619011878967285,0.2857142984867096,-0.8963918685913086,0.9619011878967285,0.855372428894043,-0.8974223136901855,0.9619011878967285,0.2857142984867096,-0.753534734249115,0.9619011878967285,0.855372428894043,-0.7686111927032471,0.9619011878967285,0.2857142984867096,-0.6106775999069214,0.9619011878967285,0.855372428894043,-0.6115193367004395,0.9995124340057373,0.23993587493896484,-0.8974223136901855,0.9995124340057373,0.23993587493896484,-0.7686111927032471,0.9995124340057373,0.23993588984012604,-0.6140447854995728,1.056325078010559,0.2857142984867096,-0.8963918685913086,1.056325078010559,0.2857142984867096,-0.753534734249115,1.056325078010559,0.2857142984867096,-0.6106775403022766,1.056325078010559,0.23993588984012604,-0.8963918685913086,1.056325078010559,0.23993587493896484,-0.7686111927032471,1.056325078010559,0.23993587493896484,-0.6115193367004395,1.0805398225784302,0.2857142984867096,-0.8963918685913086,1.0805398225784302,0.2857142984867096,-0.753534734249115,1.0805398225784302,0.2857142984867096,-0.6106775403022766,1.0805398225784302,0.23993588984012604,-0.8963918685913086,1.0805398225784302,0.23993587493896484,-0.7686111927032471,1.0805398225784302,0.23993588984012604,-0.6106775403022766,1.056325078010559,0.2857142984867096,-0.7823063135147095,1.056325078010559,0.2857142984867096,-0.815090537071228,1.056325078010559,0.2857142984867096,-0.8508048057556152,1.056325078010559,0.2857142984867096,-0.6597152352333069,1.056325078010559,0.2857142984867096,-0.6932569742202759,1.056325078010559,0.2857142984867096,-0.7241613864898682,1.0805398225784302,0.2857142984867096,-0.7823063135147095,1.0805398225784302,0.2857142984867096,-0.815090537071228,1.0805398225784302,0.2857142984867096,-0.8508048057556152,1.0805398225784302,0.2857142984867096,-0.6597152352333069,1.0805398225784302,0.2857142984867096,-0.6932569742202759,1.0805398225784302,0.2857142984867096,-0.7241613864898682,1.0623787641525269,0.2857142984867096,-0.8963918685913086,1.0744861364364624,0.2857142984867096,-0.8963918685913086,1.0744861364364624,0.2857142984867096,-0.753534734249115,1.0744861364364624,0.2857142984867096,-0.7388165593147278,1.0623787641525269,0.2857142984867096,-0.753534734249115,1.0623787641525269,0.2857142984867096,-0.6106775403022766,1.0744861364364624,0.2857142984867096,-0.6106775403022766,1.056325078010559,0.2857142984867096,-0.867524266242981,1.0623787641525269,0.2857142984867096,-0.7823063135147095,1.0744861364364624,0.2857142984867096,-0.7823063135147095,1.0623787641525269,0.2857142984867096,-0.7388165593147278,1.0623787641525269,0.2857142984867096,-0.815090537071228,1.0744861364364624,0.2857142984867096,-0.815090537071228,1.0744861364364624,0.2857142984867096,-0.7063612937927246,1.0623787641525269,0.2857142984867096,-0.8508048057556152,1.0744861364364624,0.2857142984867096,-0.8508048057556152,1.0623787641525269,0.2857142984867096,-0.6597152352333069,1.0744861364364624,0.2857142984867096,-0.6597152352333069,1.0805398225784302,0.2857142984867096,-0.867524266242981,1.0623787641525269,0.2857142984867096,-0.6932569742202759,1.0744861364364624,0.2857142984867096,-0.6932569742202759,1.0623787641525269,0.2857142984867096,-0.867524266242981,1.0623787641525269,0.2857142984867096,-0.7241613864898682,1.0744861364364624,0.2857142984867096,-0.7241613864898682,1.0744861364364624,0.2857142984867096,-0.867524266242981,1.0623787641525269,0.2857142984867096,-0.7063612937927246,1.0744861364364624,0.2857142984867096,-0.7674795985221863,1.0623787641525269,0.2857142984867096,-0.7674795985221863,1.0805398225784302,0.2857142984867096,-0.7674795985221863,1.0805398225784302,0.2857142984867096,-0.6741145253181458,1.0623787641525269,0.2857142984867096,-0.6741145253181458,1.056325078010559,0.2857142984867096,-0.7959219217300415,1.0805398225784302,0.2857142984867096,-0.7959219217300415,1.0623787641525269,0.2857142984867096,-0.7959219217300415,1.0744861364364624,0.2857142984867096,-0.7959219217300415,1.0744861364364624,0.2857142984867096,-0.6741145253181458,1.056325078010559,0.2857142984867096,-0.6741145253181458,1.056325078010559,0.2857142984867096,-0.7674795985221863,1.0744861364364624,0.2857142984867096,-0.8291547894477844,1.0623787641525269,0.2857142984867096,-0.8291547894477844,1.0805398225784302,0.2857142984867096,-0.8291547894477844,1.056325078010559,0.2857142984867096,-0.8291547894477844,1.056325078010559,0.2857142984867096,-0.7063612937927246,1.0805398225784302,0.2857142984867096,-0.7063612937927246,1.056325078010559,0.2857142984867096,-0.7388165593147278,1.0805398225784302,0.2857142984867096,-0.7388165593147278,1.0744861364364624,0.2857142984867096,-0.6444458961486816,1.0623787641525269,0.2857142984867096,-0.6444458961486816,1.0805398225784302,0.2857142984867096,-0.6444458961486816,1.056325078010559,0.2857142984867096,-0.6444458961486816,1.0744861364364624,0.2857142984867096,-0.882996678352356,1.0623787641525269,0.2857142984867096,-0.882996678352356,1.0805398225784302,0.2857142984867096,-0.882996678352356,1.056325078010559,0.2857142984867096,-0.882996678352356,1.056325078010559,0.2857142984867096,-0.6345632672309875,1.0805398225784302,0.2857142984867096,-0.6345632672309875,1.0623787641525269,0.2857142984867096,-0.6345632672309875,1.0744861364364624,0.2857142984867096,-0.6345632672309875,1.0623787641525269,0.4466831088066101,-0.7674795985221863,1.0623787641525269,0.4466831088066101,-0.6741145253181458,1.0623787641525269,0.4466831088066101,-0.7959219217300415,1.0744861364364624,0.4466831088066101,-0.7959219217300415,1.0623787641525269,0.4466831088066101,-0.8963918685913086,1.0744861364364624,0.4466831088066101,-0.8963918685913086,1.0744861364364624,0.4466831088066101,-0.753534734249115,1.0744861364364624,0.4466831088066101,-0.7388165593147278,1.0623787641525269,0.4466831088066101,-0.753534734249115,1.0623787641525269,0.4466831088066101,-0.6106775403022766,1.0744861364364624,0.4466831088066101,-0.6106775403022766,1.0623787641525269,0.4466831088066101,-0.7823063135147095,1.0744861364364624,0.2857142984867096,-0.6204037666320801,1.0623787641525269,0.2857142984867096,-0.6204037666320801,1.0805398225784302,0.2857142984867096,-0.6204037666320801,1.056325078010559,0.2857142984867096,-0.6204037666320801,1.0370683670043945,0.4466831088066101,-0.8963918685913086,1.0377120971679688,0.4466831088066101,-0.8825434446334839,1.0180675983428955,0.4466831088066101,-0.8963918685913086,1.0186471939086914,0.4466831088066101,-0.8820791840553284,1.0744861364364624,0.4466831088066101,-0.6204037666320801,1.0623787641525269,0.4466831088066101,-0.6204037666320801,1.0623787641525269,0.31848421692848206,-0.8963918685913086,0.9995124340057373,0.2857142984867096,-0.8816131949424744,1.0744861364364624,0.4466831088066101,-0.6741145253181458,1.0744861364364624,0.4466831088066101,-0.8291547894477844,1.0623787641525269,0.4466831088066101,-0.8291547894477844,1.0744861364364624,0.4466831088066101,-0.6444458961486816,1.0744861364364624,0.4466831088066101,-0.8508048057556152,1.0623787641525269,0.4466831088066101,-0.6597152352333069,1.0744861364364624,0.4466831088066101,-0.6597152352333069,1.0623787641525269,0.4466831088066101,-0.6932569742202759,1.0744861364364624,0.4466831088066101,-0.6932569742202759,1.0623787641525269,0.4466831088066101,-0.867524266242981,1.0623787641525269,0.4466831088066101,-0.7241613864898682,1.0623787641525269,0.4466831088066101,-0.6444458961486816,1.0744861364364624,0.4466831088066101,-0.882996678352356,1.0623787641525269,0.4466831088066101,-0.882996678352356,1.0623787641525269,0.4466831088066101,-0.6345632672309875,1.0744861364364624,0.4466831088066101,-0.6345632672309875,1.0370683670043945,0.2857142984867096,-0.8963918685913086,1.0377120971679688,0.2857142984867096,-0.8825434446334839,1.0180675983428955,0.2857142984867096,-0.8963918685913086,1.0186471939086914,0.2857142984867096,-0.8820791840553284,1.0744861364364624,0.4466831088066101,-0.7241613864898682,1.0744861364364624,0.4466831088066101,-0.867524266242981,1.0623787641525269,0.4466831088066101,-0.7063612937927246,1.0744861364364624,0.4466831088066101,-0.7674795985221863,1.0623787641525269,0.4466831088066101,-0.8508048057556152,1.0744861364364624,0.4466831088066101,-0.7063612937927246,1.0744861364364624,0.4466831088066101,-0.815090537071228,1.0623787641525269,0.4466831088066101,-0.815090537071228,1.0623787641525269,0.4466831088066101,-0.7388165593147278,1.0744861364364624,0.4466831088066101,-0.7823063135147095,0.9995124340057373,0.2857142984867096,-0.6213402152061462,1.0226486921310425,0.2857142984867096,-0.6106775403022766,1.0217212438583374,0.2857142984867096,-0.6209741830825806,1.036787509918213,0.2857142984867096,-0.6207258105278015,1.038581371307373,0.2857142984867096,-0.6106775403022766,1.0226486921310425,0.4466831088066101,-0.6106775403022766,1.0217212438583374,0.4466831088066101,-0.6209741830825806,1.036787509918213,0.4466831088066101,-0.6207258105278015,1.038581371307373,0.4466831088066101,-0.6106775403022766,1.000000238418579,0.20396995544433594,-0.9010143280029297,0.9995124340057373,0.20396995544433594,-0.7686111927032471,0.9995124340057373,0.20396995544433594,-0.6115193367004395,1.0299999713897705,0.20396995544433594,-0.7686111927032471,1.0299999713897705,0.20396995544433594,-0.8974223136901855,1.0299999713897705,0.20396995544433594,-0.6115193367004395,1.0299999713897705,0.15542997419834137,-0.6115193367004395,1.0299999713897705,0.15542997419834137,-0.7686111927032471,1.0299999713897705,0.15542997419834137,-0.8974223136901855,1.0,0.8550340533256531,-1.0,0.5555701851844788,0.8550340533256531,1.4901161193847656e-08,9.313225746154785e-10,0.8550340533256531,-0.0,1.000000238418579,0.8550340533256531,-0.46430936455726624,1.000000238418579,0.24540600180625916,-0.46430936455726624,1.0,0.24540600180625916,-1.0,1.0,0.20396995544433594,-1.0,0.5555701851844788,0.23994000256061554,1.4901161193847656e-08,9.313225746154785e-10,0.24540600180625916,-0.0,1.000000238418579,0.20396995544433594,-0.46430936455726624,0.0,0.20396995544433594,-0.0,0.5555701851844788,0.20396995544433594,-0.0,1.0,0.15542997419834137,-1.0,9.313225746154785e-10,0.28024187684059143,-0.0,0.5555701851844788,0.28571000695228577,1.4901161193847656e-08,1.000000238418579,0.15542997419834137,-0.46430936455726624,0.0,0.15542997419834137,-0.0,0.5555701851844788,0.15542997419834137,-0.0,1.0,0.28024187684059143,-1.0,1.000000238418579,0.28024187684059143,-0.46430936455726624,0.25353485345840454,0.20396995544433594,-0.0,1.000000238418579,0.20396995544433594,-0.9010143280029297,1.0,0.20396995544433594,-1.0,0.0,0.20396995544433594,-0.0,1.0,0.15542997419834137,-1.0,0.0,0.15542997419834137,-0.0,0.4007596969604492,0.15542997419834137,0.029999999329447746,0.11552442610263824,0.15542997419834137,0.029999999329447746,0.4007596969604492,0.20396995544433594,0.029999999329447746,0.27487340569496155,0.20396995544433594,0.029999999329447746,0.11552442610263824,0.20396995544433594,0.029999999329447746,1.0299999713897705,0.20396995544433594,-1.0,1.0299999713897705,0.20396995544433594,-0.4432222545146942,0.0,0.20396995544433594,0.029999999329447746,0.5769087672233582,0.20396995544433594,0.029999999329447746,1.0299999713897705,0.15542997419834137,-1.0,1.0299999713897705,0.15542997419834137,-0.4432222545146942,0.0,0.15542997419834137,0.029999999329447746,0.5769087672233582,0.15542997419834137,0.029999999329447746,0.26903998851776123,1.0,-0.0,0.2667105793952942,0.855372428894043,-0.0,0.7034900188446045,0.855372428894043,-0.15421999990940094,0.7034900188446045,1.0,-0.15421999990940094,0.8871600031852722,1.0,-0.34536001086235046,0.8871605396270752,0.855372428894043,-0.34535548090934753,0.8871605396270752,0.2857142984867096,-0.34535548090934753,0.7898620963096619,0.2857142984867096,-0.24214676022529602,0.7940099835395813,0.8571428060531616,-0.2485799938440323,0.6888468265533447,0.2857142984867096,-0.14113149046897888,0.8642821311950684,0.2857142984867096,-0.36975717544555664,0.8642821311950684,0.855372428894043,-0.36975717544555664,0.763266921043396,0.2857142984867096,-0.2687419056892395,0.763266921043396,0.855372428894043,-0.2687419354915619,0.6622516512870789,0.2857142984867096,-0.16772663593292236,0.6622516512870789,0.855372428894043,-0.16772666573524475,0.8871605396270752,0.24540600180625916,-0.34535548090934753,0.7898620963096619,0.23993588984012604,-0.24214676022529602,0.6886500120162964,0.23993588984012604,-0.1390399932861328,0.9310498833656311,0.2857142984867096,-0.3029894232749939,0.8300346732139587,0.2857142984867096,-0.20197418332099915,0.7290194034576416,0.2857142984867096,-0.10095890611410141,0.9310498833656311,0.23993588984012604,-0.3029894232749939,0.8300346732139587,0.23993588984012604,-0.20197418332099915,0.7290194034576416,0.23993588984012604,-0.10095889866352081,0.9481723308563232,0.2857142984867096,-0.28586700558662415,0.8471571207046509,0.2857142984867096,-0.1848517507314682,0.7461418509483337,0.2857142984867096,-0.08383648097515106,0.9481723308563232,0.23993588984012604,-0.28586700558662415,0.8471571207046509,0.23993588984012604,-0.1848517507314682,0.7461418509483337,0.23993588984012604,-0.08383648097515106,0.850379228591919,0.2857142984867096,-0.22231876850128174,0.8735612034797668,0.2857142984867096,-0.24550071358680725,0.8988149762153625,0.2857142984867096,-0.27075451612472534,0.7636942863464355,0.2857142984867096,-0.13563379645347595,0.7874118685722351,0.2857142984867096,-0.1593513786792755,0.809264600276947,0.2857142984867096,-0.18120411038398743,0.8675016760826111,0.2857142984867096,-0.2051963359117508,0.8906835913658142,0.2857142984867096,-0.2283782809972763,0.9159374237060547,0.2857142984867096,-0.2536320686340332,0.7808167338371277,0.2857142984867096,-0.11851136386394501,0.8045343160629272,0.2857142984867096,-0.14222896099090576,0.8263870477676392,0.2857142984867096,-0.16408167779445648,0.9353305101394653,0.2857142984867096,-0.29870882630348206,0.943891704082489,0.2857142984867096,-0.290147602558136,0.8428764939308167,0.2857142984867096,-0.18913236260414124,0.8324691653251648,0.2857142984867096,-0.17872506380081177,0.834315299987793,0.2857142984867096,-0.1976935714483261,0.7333000302314758,0.2857142984867096,-0.09667830169200897,0.7418612241744995,0.2857142984867096,-0.0881170853972435,0.9106374382972717,0.2857142984867096,-0.2825769782066345,0.8546598553657532,0.2857142984867096,-0.2180381566286087,0.8632210493087769,0.2857142984867096,-0.20947693288326263,0.8239079713821411,0.2857142984867096,-0.18728627264499664,0.8778417706489563,0.2857142984867096,-0.2412201166152954,0.8864030241966248,0.2857142984867096,-0.23265889286994934,0.8095198273658752,0.2857142984867096,-0.15577572584152222,0.9030956029891968,0.2857142984867096,-0.2664738893508911,0.9116567969322205,0.2857142984867096,-0.25791269540786743,0.7679749131202698,0.2857142984867096,-0.13135318458080292,0.7765361070632935,0.2857142984867096,-0.12279197573661804,0.9277598857879639,0.2857142984867096,-0.2654545307159424,0.7916924953460693,0.2857142984867096,-0.15507078170776367,0.800253689289093,0.2857142984867096,-0.1465095579624176,0.914918065071106,0.2857142984867096,-0.2782963514328003,0.8135452270507812,0.2857142984867096,-0.1769234985113144,0.8221064209938049,0.2857142984867096,-0.16836228966712952,0.9234792590141296,0.2857142984867096,-0.2697351574897766,0.8009586334228516,0.2857142984867096,-0.1643369346857071,0.8527370095252991,0.2857142984867096,-0.19899289309978485,0.8441758155822754,0.2857142984867096,-0.20755410194396973,0.8570176362991333,0.2857142984867096,-0.19471228122711182,0.7909985780715942,0.2857142984867096,-0.12869319319725037,0.7781567573547363,0.2857142984867096,-0.14153501391410828,0.8600069284439087,0.2857142984867096,-0.2319464534521103,0.8771293759346008,0.2857142984867096,-0.21482402086257935,0.8642875552177429,0.2857142984867096,-0.22766584157943726,0.8728487491607666,0.2857142984867096,-0.21910463273525238,0.78671795129776,0.2857142984867096,-0.1329738199710846,0.7738761305809021,0.2857142984867096,-0.1458156406879425,0.8398951888084412,0.2857142984867096,-0.21183471381664276,0.8963479399681091,0.2857142984867096,-0.2426038384437561,0.8877867460250854,0.2857142984867096,-0.2511650323867798,0.9006285667419434,0.2857142984867096,-0.23832321166992188,0.8835061192512512,0.2857142984867096,-0.255445659160614,0.7966780066490173,0.2857142984867096,-0.16861754655838013,0.8138004541397095,0.2857142984867096,-0.15149511396884918,0.8196273446083069,0.2857142984867096,-0.19156688451766968,0.836749792098999,0.2857142984867096,-0.17444445192813873,0.7657390832901001,0.2857142984867096,-0.1119949221611023,0.7571778297424316,0.2857142984867096,-0.12055613100528717,0.7700196504592896,0.2857142984867096,-0.10771431028842926,0.7528972625732422,0.2857142984867096,-0.1248367428779602,0.9344198703765869,0.2857142984867096,-0.2806757688522339,0.9258586764335632,0.2857142984867096,-0.28923699259757996,0.9387004971504211,0.2857142984867096,-0.27639517188072205,0.921578049659729,0.2857142984867096,-0.2935175895690918,0.7459091544151306,0.2857142984867096,-0.11784864962100983,0.7630316019058228,0.2857142984867096,-0.10072621703147888,0.7501897215843201,0.2857142984867096,-0.11356803774833679,0.7587509751319885,0.2857142984867096,-0.10500682145357132,0.8441758155822754,0.4466831088066101,-0.20755410194396973,0.7781567573547363,0.4466831088066101,-0.14153501391410828,0.8642875552177429,0.4466831088066101,-0.22766584157943726,0.8728487491607666,0.4466831088066101,-0.21910463273525238,0.9353305101394653,0.4466831088066101,-0.29870882630348206,0.943891704082489,0.4466831088066101,-0.290147602558136,0.8428764939308167,0.4466831088066101,-0.18913236260414124,0.8324691653251648,0.4466831088066101,-0.17872506380081177,0.834315299987793,0.4466831088066101,-0.1976935714483261,0.7333000302314758,0.4466831088066101,-0.09667830169200897,0.7418612241744995,0.4466831088066101,-0.0881170853972435,0.8546598553657532,0.4466831088066101,-0.2180381566286087,0.748738706111908,0.2857142984867096,-0.09499456733465195,0.7401775121688843,0.2857142984867096,-0.10355578362941742,0.7530193328857422,0.2857142984867096,-0.09071395546197891,0.73589688539505,0.2857142984867096,-0.10783638805150986,0.9174333214759827,0.4466831088066101,-0.31660598516464233,0.9080962538719177,0.4466831088066101,-0.3063584864139557,0.9039977788925171,0.4466831088066101,-0.3300415277481079,0.8942870497703552,0.4466831088066101,-0.3195111155509949,0.748738706111908,0.4466831088066101,-0.09499456733465195,0.7401775121688843,0.4466831088066101,-0.10355578362941742,0.9353305101394653,0.31848421692848206,-0.29870882630348206,0.8804272413253784,0.2857142984867096,-0.33271193504333496,0.78671795129776,0.4466831088066101,-0.1329738199710846,0.8963479399681091,0.4466831088066101,-0.2426038384437561,0.8877867460250854,0.4466831088066101,-0.2511650323867798,0.7657390832901001,0.4466831088066101,-0.1119949221611023,0.9116567969322205,0.4466831088066101,-0.25791269540786743,0.7679749131202698,0.4466831088066101,-0.13135318458080292,0.7765361070632935,0.4466831088066101,-0.12279197573661804,0.7916924953460693,0.4466831088066101,-0.15507078170776367,0.800253689289093,0.4466831088066101,-0.1465095579624176,0.914918065071106,0.4466831088066101,-0.2782963514328003,0.8135452270507812,0.4466831088066101,-0.1769234985113144,0.7571778297424316,0.4466831088066101,-0.12055613100528717,0.9344198703765869,0.4466831088066101,-0.2806757688522339,0.9258586764335632,0.4466831088066101,-0.28923699259757996,0.7501897215843201,0.4466831088066101,-0.11356803774833679,0.7587509751319885,0.4466831088066101,-0.10500682145357132,0.9174333214759827,0.2857142984867096,-0.31660598516464233,0.9080962538719177,0.2857142984867096,-0.3063584864139557,0.9039977788925171,0.2857142984867096,-0.3300415277481079,0.8942870497703552,0.2857142984867096,-0.3195111155509949,0.8221064209938049,0.4466831088066101,-0.16836228966712952,0.9234792590141296,0.4466831088066101,-0.2697351574897766,0.8009586334228516,0.4466831088066101,-0.1643369346857071,0.8527370095252991,0.4466831088066101,-0.19899289309978485,0.9030956029891968,0.4466831088066101,-0.2664738893508911,0.8095198273658752,0.4466831088066101,-0.15577572584152222,0.8864030241966248,0.4466831088066101,-0.23265889286994934,0.8778417706489563,0.4466831088066101,-0.2412201166152954,0.8239079713821411,0.4466831088066101,-0.18728627264499664,0.8632210493087769,0.4466831088066101,-0.20947693288326263,0.696386456489563,0.2857142984867096,-0.14867113530635834,0.7052066326141357,0.2857142984867096,-0.12477169930934906,0.7118316292762756,0.2857142984867096,-0.13270828127861023,0.7223094701766968,0.2857142984867096,-0.12187926471233368,0.7164727449417114,0.2857142984867096,-0.11350558698177338,0.7052066326141357,0.4466831088066101,-0.12477169930934906,0.7118316292762756,0.4466831088066101,-0.13270828127861023,0.7223094701766968,0.4466831088066101,-0.12187926471233368,0.7164727449417114,0.4466831088066101,-0.11350558698177338,0.7940099835395813,1.0,-0.2485799938440323,0.8871605396270752,0.0,-0.34535548090934753,0.8871605396270752,0.15542995929718018,-0.34535548090934753,0.8871605396270752,0.20396995544433594,-0.34535548090934753,0.8143234252929688,0.20396995544433594,-0.2179630994796753,0.9160606265068054,0.15542997419834137,-0.3242205083370209,0.9160606265068054,0.20396995544433594,-0.3242205083370209,0.7125862240791321,0.20396995544433594,-0.11170569062232971,0.7125862240791321,0.15542997419834137,-0.11170569062232971,0.6886540651321411,0.20396995544433594,-0.13903674483299255,0.6886540651321411,0.15542997419834137,-0.13903674483299255,0.6886399388313293,0.0,-0.1387374848127365,0.7884464859962463,0.20396995544433594,-0.24329285323619843,0.7884368896484375,0.0,-0.24276921153068542,0.7884464859962463,0.15542997419834137,-0.24329285323619843,0.8143234252929688,0.15542997419834137,-0.2179630994796753,0.5555701851844788,0.8550340533256531,1.4901161193847656e-08,0.5555499792098999,1.0,-0.0,1.000000238418579,0.8550340533256531,-0.46430936455726624,1.000000238418579,1.0,-0.46331000328063965,0.39639198780059814,0.855372428894043,-0.0,0.39639198780059814,0.855372428894043,-0.0,0.39639198780059814,0.2857142984867096,0.0003079921007156372,0.39639198780059814,0.2857142984867096,0.0003079921007156372,0.39639198780059814,0.2857142984867096,0.0003079921007156372,0.11067765951156616,0.855372428894043,-0.03730331361293793,0.11067765951156616,0.855372428894043,-0.03730331361293793,0.11067765951156616,0.855372428894043,-0.0,0.11067765951156616,0.855372428894043,-0.0,0.11067765951156616,0.2857142984867096,0.0003079921007156372,0.11067765951156616,0.2857142984867096,0.0003079921007156372,0.11067765951156616,0.2857142984867096,0.0003079921007156372,0.39639198780059814,0.855372428894043,-0.03730331361293793,0.39639198780059814,0.855372428894043,-0.03730331361293793,0.39639198780059814,0.2857142984867096,-0.03730325400829315,0.39639198780059814,0.2857142984867096,-0.03730325400829315,0.11067765951156616,0.2857142984867096,-0.03730325400829315,0.11067765951156616,0.2857142984867096,-0.03730325400829315,0.25353485345840454,0.2857142984867096,-0.03730325400829315,0.25353485345840454,0.855372428894043,-0.03730331361293793,0.39639198780059814,0.23993588984012604,0.0003079921007156372,0.39639198780059814,0.23993588984012604,0.0003079921007156372,0.11067765951156616,0.23993588984012604,0.057120636105537415,0.11404496431350708,0.23993588984012604,0.0003079921007156372,0.11404496431350708,0.23993588984012604,0.0003079921007156372,0.11067765951156616,0.2857142984867096,0.03937692940235138,0.11067765951156616,0.2857142984867096,0.03937692940235138,0.11067765951156616,0.2857142984867096,0.05712057650089264,0.25353485345840454,0.23993588984012604,0.0003079921007156372,0.39639198780059814,0.23993588984012604,0.08133538067340851,0.39639198780059814,0.23993588984012604,0.08133538067340851,0.39639198780059814,0.23993588984012604,0.057120636105537415,0.39639198780059814,0.2857142984867096,0.03786386549472809,0.39639198780059814,0.2857142984867096,0.03786386549472809,0.39639198780059814,0.2857142984867096,0.05712057650089264,0.3829967975616455,0.2857142984867096,0.08133538067340851,0.39639198780059814,0.2857142984867096,0.08133538067340851,0.39639198780059814,0.2857142984867096,0.08133538067340851,0.23881667852401733,0.2857142984867096,0.08133538067340851,0.25353485345840454,0.2857142984867096,0.08133538067340851,0.11067765951156616,0.23993588984012604,0.08133538067340851,0.11067765951156616,0.23993588984012604,0.08133538067340851,0.11067765951156616,0.2857142984867096,0.08133538067340851,0.11067765951156616,0.2857142984867096,0.08133538067340851,0.25353485345840454,0.23993588984012604,0.08133538067340851,0.3829967975616455,0.2857142984867096,0.06317432224750519,0.3829967975616455,0.2857142984867096,0.06317432224750519,0.39639198780059814,0.2857142984867096,0.06317432224750519,0.39639198780059814,0.2857142984867096,0.06317432224750519,0.26747971773147583,0.2857142984867096,0.08133538067340851,0.29592204093933105,0.2857142984867096,0.08133538067340851,0.282306432723999,0.2857142984867096,0.08133538067340851,0.329154908657074,0.2857142984867096,0.08133538067340851,0.3150906562805176,0.2857142984867096,0.08133538067340851,0.1204039454460144,0.2857142984867096,0.08133538067340851,0.1741146445274353,0.2857142984867096,0.08133538067340851,0.15971535444259644,0.2857142984867096,0.08133538067340851,0.20636147260665894,0.2857142984867096,0.08133538067340851,0.1932571530342102,0.2857142984867096,0.08133538067340851,0.11067765951156616,0.2857142984867096,0.06317432224750519,0.11067765951156616,0.2857142984867096,0.06317432224750519,0.3675244450569153,0.2857142984867096,0.08133538067340851,0.3508049249649048,0.2857142984867096,0.08133538067340851,0.282306432723999,0.2857142984867096,0.07528169453144073,0.282306432723999,0.2857142984867096,0.07528169453144073,0.282306432723999,0.2857142984867096,0.06317432224750519,0.282306432723999,0.2857142984867096,0.06317432224750519,0.3150906562805176,0.2857142984867096,0.07528169453144073,0.3150906562805176,0.2857142984867096,0.07528169453144073,0.3150906562805176,0.2857142984867096,0.06317432224750519,0.3150906562805176,0.2857142984867096,0.06317432224750519,0.3508049249649048,0.2857142984867096,0.07528169453144073,0.3508049249649048,0.2857142984867096,0.07528169453144073,0.3508049249649048,0.2857142984867096,0.06317432224750519,0.3508049249649048,0.2857142984867096,0.06317432224750519,0.26747971773147583,0.2857142984867096,0.06317432224750519,0.26747971773147583,0.2857142984867096,0.06317432224750519,0.25353485345840454,0.2857142984867096,0.06317432224750519,0.25353485345840454,0.2857142984867096,0.06317432224750519,0.23881667852401733,0.2857142984867096,0.07528169453144073,0.23881667852401733,0.2857142984867096,0.07528169453144073,0.2241615653038025,0.2857142984867096,0.07528169453144073,0.2241615653038025,0.2857142984867096,0.07528169453144073,0.29592204093933105,0.2857142984867096,0.06317432224750519,0.29592204093933105,0.2857142984867096,0.06317432224750519,0.29592204093933105,0.2857142984867096,0.07528169453144073,0.29592204093933105,0.2857142984867096,0.07528169453144073,0.26747971773147583,0.2857142984867096,0.07528169453144073,0.26747971773147583,0.2857142984867096,0.07528169453144073,0.25353485345840454,0.2857142984867096,0.07528169453144073,0.25353485345840454,0.2857142984867096,0.07528169453144073,0.329154908657074,0.2857142984867096,0.06317432224750519,0.329154908657074,0.2857142984867096,0.06317432224750519,0.329154908657074,0.2857142984867096,0.07528169453144073,0.329154908657074,0.2857142984867096,0.07528169453144073,0.3675244450569153,0.2857142984867096,0.06317432224750519,0.3675244450569153,0.2857142984867096,0.06317432224750519,0.3675244450569153,0.2857142984867096,0.07528169453144073,0.3675244450569153,0.2857142984867096,0.07528169453144073,0.15971535444259644,0.2857142984867096,0.07528169453144073,0.15971535444259644,0.2857142984867096,0.07528169453144073,0.15971535444259644,0.2857142984867096,0.06317432224750519,0.15971535444259644,0.2857142984867096,0.06317432224750519,0.1932571530342102,0.2857142984867096,0.07528169453144073,0.1932571530342102,0.2857142984867096,0.07528169453144073,0.1932571530342102,0.2857142984867096,0.06317432224750519,0.1932571530342102,0.2857142984867096,0.06317432224750519,0.2241615653038025,0.2857142984867096,0.06317432224750519,0.2241615653038025,0.2857142984867096,0.06317432224750519,0.1204039454460144,0.2857142984867096,0.06317432224750519,0.1204039454460144,0.2857142984867096,0.06317432224750519,0.1204039454460144,0.2857142984867096,0.07528169453144073,0.1204039454460144,0.2857142984867096,0.07528169453144073,0.11067765951156616,0.2857142984867096,0.07528169453144073,0.11067765951156616,0.2857142984867096,0.07528169453144073,0.3829967975616455,0.2857142984867096,0.07528169453144073,0.3829967975616455,0.2857142984867096,0.07528169453144073,0.39639198780059814,0.2857142984867096,0.07528169453144073,0.39639198780059814,0.2857142984867096,0.07528169453144073,0.1741146445274353,0.2857142984867096,0.06317432224750519,0.1741146445274353,0.2857142984867096,0.06317432224750519,0.1741146445274353,0.2857142984867096,0.07528169453144073,0.1741146445274353,0.2857142984867096,0.07528169453144073,0.20636147260665894,0.2857142984867096,0.06317432224750519,0.20636147260665894,0.2857142984867096,0.06317432224750519,0.20636147260665894,0.2857142984867096,0.07528169453144073,0.20636147260665894,0.2857142984867096,0.07528169453144073,0.23881667852401733,0.2857142984867096,0.06317432224750519,0.23881667852401733,0.2857142984867096,0.06317432224750519,0.2241615653038025,0.2857142984867096,0.08133538067340851,0.14444607496261597,0.2857142984867096,0.06317432224750519,0.14444607496261597,0.2857142984867096,0.06317432224750519,0.14444607496261597,0.2857142984867096,0.07528169453144073,0.14444607496261597,0.2857142984867096,0.07528169453144073,0.14444607496261597,0.2857142984867096,0.08133538067340851,0.1345633864402771,0.2857142984867096,0.08133538067340851,0.1345633864402771,0.2857142984867096,0.06317432224750519,0.1345633864402771,0.2857142984867096,0.06317432224750519,0.1345633864402771,0.2857142984867096,0.07528169453144073,0.1345633864402771,0.2857142984867096,0.07528169453144073,0.329154908657074,0.4466831088066101,0.06317432224750519,0.329154908657074,0.4466831088066101,0.06317432224750519,0.329154908657074,0.4466831088066101,0.07528169453144073,0.329154908657074,0.4466831088066101,0.07528169453144073,0.3829967975616455,0.4466831088066101,0.06317432224750519,0.3829967975616455,0.4466831088066101,0.06317432224750519,0.39639198780059814,0.4466831088066101,0.06317432224750519,0.39639198780059814,0.4466831088066101,0.06317432224750519,0.39639198780059814,0.4466831088066101,0.07528169453144073,0.39639198780059814,0.4466831088066101,0.07528169453144073,0.11067765951156616,0.4466831088066101,0.07528169453144073,0.11067765951156616,0.4466831088066101,0.07528169453144073,0.11067765951156616,0.4466831088066101,0.06317432224750519,0.11067765951156616,0.4466831088066101,0.06317432224750519,0.282306432723999,0.4466831088066101,0.07528169453144073,0.282306432723999,0.4466831088066101,0.07528169453144073,0.282306432723999,0.4466831088066101,0.06317432224750519,0.282306432723999,0.4466831088066101,0.06317432224750519,0.3150906562805176,0.4466831088066101,0.07528169453144073,0.3150906562805176,0.4466831088066101,0.07528169453144073,0.3150906562805176,0.4466831088066101,0.06317432224750519,0.3150906562805176,0.4466831088066101,0.06317432224750519,0.3508049249649048,0.4466831088066101,0.07528169453144073,0.3508049249649048,0.4466831088066101,0.07528169453144073,0.3508049249649048,0.4466831088066101,0.06317432224750519,0.3508049249649048,0.4466831088066101,0.06317432224750519,0.23881667852401733,0.4466831088066101,0.07528169453144073,0.23881667852401733,0.4466831088066101,0.07528169453144073,0.2241615653038025,0.4466831088066101,0.07528169453144073,0.2241615653038025,0.4466831088066101,0.07528169453144073,0.26747971773147583,0.4466831088066101,0.06317432224750519,0.26747971773147583,0.4466831088066101,0.06317432224750519,0.25353485345840454,0.4466831088066101,0.06317432224750519,0.25353485345840454,0.4466831088066101,0.06317432224750519,0.29592204093933105,0.4466831088066101,0.06317432224750519,0.29592204093933105,0.4466831088066101,0.06317432224750519,0.3829967975616455,0.4466831088066101,0.07528169453144073,0.3829967975616455,0.4466831088066101,0.07528169453144073,0.1741146445274353,0.4466831088066101,0.06317432224750519,0.1741146445274353,0.4466831088066101,0.06317432224750519,0.15971535444259644,0.4466831088066101,0.06317432224750519,0.15971535444259644,0.4466831088066101,0.06317432224750519,0.1741146445274353,0.4466831088066101,0.07528169453144073,0.1741146445274353,0.4466831088066101,0.07528169453144073,0.15971535444259644,0.4466831088066101,0.07528169453144073,0.15971535444259644,0.4466831088066101,0.07528169453144073,0.20636147260665894,0.4466831088066101,0.06317432224750519,0.20636147260665894,0.4466831088066101,0.06317432224750519,0.1932571530342102,0.4466831088066101,0.06317432224750519,0.1932571530342102,0.4466831088066101,0.06317432224750519,0.23881667852401733,0.4466831088066101,0.06317432224750519,0.23881667852401733,0.4466831088066101,0.06317432224750519,0.20636147260665894,0.4466831088066101,0.07528169453144073,0.20636147260665894,0.4466831088066101,0.07528169453144073,0.1932571530342102,0.4466831088066101,0.07528169453144073,0.1932571530342102,0.4466831088066101,0.07528169453144073,0.2241615653038025,0.4466831088066101,0.06317432224750519,0.2241615653038025,0.4466831088066101,0.06317432224750519,0.25353485345840454,0.4466831088066101,0.07528169453144073,0.25353485345840454,0.4466831088066101,0.07528169453144073,0.1204039454460144,0.4466831088066101,0.07528169453144073,0.1204039454460144,0.4466831088066101,0.07528169453144073,0.14444607496261597,0.4466831088066101,0.06317432224750519,0.14444607496261597,0.4466831088066101,0.06317432224750519,0.14444607496261597,0.4466831088066101,0.07528169453144073,0.14444607496261597,0.4466831088066101,0.07528169453144073,0.1345633864402771,0.4466831088066101,0.06317432224750519,0.1345633864402771,0.4466831088066101,0.06317432224750519,0.1345633864402771,0.4466831088066101,0.07528169453144073,0.1345633864402771,0.4466831088066101,0.07528169453144073,0.1204039454460144,0.4466831088066101,0.06317432224750519,0.1204039454460144,0.4466831088066101,0.06317432224750519,0.29592204093933105,0.4466831088066101,0.07528169453144073,0.29592204093933105,0.4466831088066101,0.07528169453144073,0.26747971773147583,0.4466831088066101,0.07528169453144073,0.26747971773147583,0.4466831088066101,0.07528169453144073,0.3675244450569153,0.4466831088066101,0.06317432224750519,0.3675244450569153,0.4466831088066101,0.06317432224750519,0.3675244450569153,0.4466831088066101,0.07528169453144073,0.3675244450569153,0.4466831088066101,0.07528169453144073,0.39639198780059814,0.31848421692848206,0.06317432224750519,0.39639198780059814,0.2857142984867096,0.01886315643787384,0.39639198780059814,0.2857142984867096,0.01886315643787384,0.38254356384277344,0.2857142984867096,0.03850765526294708,0.38254356384277344,0.2857142984867096,0.03850765526294708,0.3820793032646179,0.2857142984867096,0.01944275200366974,0.3820793032646179,0.2857142984867096,0.01944275200366974,0.38254356384277344,0.4466831088066101,0.03850765526294708,0.38254356384277344,0.4466831088066101,0.03850765526294708,0.39639198780059814,0.4466831088066101,0.03786386549472809,0.39639198780059814,0.4466831088066101,0.03786386549472809,0.39639198780059814,0.4466831088066101,0.01886315643787384,0.39639198780059814,0.4466831088066101,0.01886315643787384,0.3820793032646179,0.4466831088066101,0.01944275200366974,0.3820793032646179,0.4466831088066101,0.01944275200366974,0.11067765951156616,0.2857142984867096,0.023444250226020813,0.11067765951156616,0.2857142984867096,0.023444250226020813,0.12097430229187012,0.2857142984867096,0.022516801953315735,0.12097430229187012,0.2857142984867096,0.022516801953315735,0.12072592973709106,0.2857142984867096,0.03758300840854645,0.12072592973709106,0.2857142984867096,0.03758300840854645,0.12097430229187012,0.4466831088066101,0.022516801953315735,0.12097430229187012,0.4466831088066101,0.022516801953315735,0.11067765951156616,0.4466831088066101,0.023444250226020813,0.11067765951156616,0.4466831088066101,0.023444250226020813,0.12072592973709106,0.4466831088066101,0.03758300840854645,0.12072592973709106,0.4466831088066101,0.03758300840854645,0.11067765951156616,0.4466831088066101,0.03937692940235138,0.11067765951156616,0.4466831088066101,0.03937692940235138,0.4007596969604492,0.20396995544433594,-0.0,0.4007596969604492,0.20396995544433594,-0.0,0.25353485345840454,0.20396995544433594,0.00030800700187683105,0.11498937010765076,0.20396995544433594,-0.0,0.11498937010765076,0.20396995544433594,-0.0,0.11498937010765076,0.20396995544433594,-0.0,0.9995124340057373,0.8571428060531616,-0.7686111927032471,0.9995124340057373,0.855372428894043,-0.8974223136901855,0.9995124340057373,0.855372428894043,-0.8974223136901855,0.9995124340057373,0.2857142984867096,-0.8963918685913086,0.9995124340057373,0.2857142984867096,-0.8963918685913086,0.9995124340057373,0.2857142984867096,-0.8963918685913086,0.9619011878967285,0.855372428894043,-0.6115193367004395,0.9619011878967285,0.855372428894043,-0.6115193367004395,0.9995124340057373,0.855372428894043,-0.6115193367004395,0.9995124340057373,0.855372428894043,-0.6115193367004395,0.9995124340057373,0.2857142984867096,-0.6106775403022766,0.9995124340057373,0.2857142984867096,-0.6106775403022766,0.9995124340057373,0.2857142984867096,-0.6106775403022766,0.9995124340057373,0.15542997419834137,-0.7686111927032471,0.9995124340057373,0.15542997419834137,-0.8963918685913086,0.9995124340057373,0.15542997419834137,-0.8963918685913086,0.9995124340057373,0.15542997419834137,-0.8963918685913086,0.9619011878967285,0.855372428894043,-0.8974223136901855,0.9619011878967285,0.855372428894043,-0.8974223136901855,1.000000238418579,0.15542997419834137,-0.6115193367004395,1.000000238418579,0.15542997419834137,-0.6115193367004395,1.000000238418579,0.15542997419834137,-0.6115193367004395,0.9619011878967285,0.2857142984867096,-0.8963918685913086,0.9619011878967285,0.2857142984867096,-0.8963918685913086,0.9619011878967285,0.2857142984867096,-0.6106775999069214,0.9619011878967285,0.2857142984867096,-0.6106775999069214,0.9619011878967285,0.2857142984867096,-0.753534734249115,0.9619011878967285,0.855372428894043,-0.7686111927032471,0.9995124340057373,0.23993587493896484,-0.8974223136901855,0.9995124340057373,0.23993587493896484,-0.8974223136901855,1.056325078010559,0.23993587493896484,-0.6115193367004395,0.9995124340057373,0.23993588984012604,-0.6140447854995728,0.9995124340057373,0.23993588984012604,-0.6140447854995728,1.038581371307373,0.2857142984867096,-0.6106775403022766,1.038581371307373,0.2857142984867096,-0.6106775403022766,1.056325078010559,0.2857142984867096,-0.6106775403022766,0.9995124340057373,0.23993587493896484,-0.7686111927032471,1.0805398225784302,0.23993588984012604,-0.8963918685913086,1.0805398225784302,0.23993588984012604,-0.8963918685913086,1.056325078010559,0.23993588984012604,-0.8963918685913086,1.0370683670043945,0.2857142984867096,-0.8963918685913086,1.0370683670043945,0.2857142984867096,-0.8963918685913086,1.056325078010559,0.2857142984867096,-0.8963918685913086,1.0805398225784302,0.2857142984867096,-0.882996678352356,1.0805398225784302,0.2857142984867096,-0.8963918685913086,1.0805398225784302,0.2857142984867096,-0.8963918685913086,1.0805398225784302,0.2857142984867096,-0.7388165593147278,1.0805398225784302,0.2857142984867096,-0.753534734249115,1.0805398225784302,0.23993588984012604,-0.6106775403022766,1.0805398225784302,0.23993588984012604,-0.6106775403022766,1.0805398225784302,0.2857142984867096,-0.6106775403022766,1.0805398225784302,0.2857142984867096,-0.6106775403022766,1.0805398225784302,0.23993587493896484,-0.7686111927032471,1.0623787641525269,0.2857142984867096,-0.882996678352356,1.0623787641525269,0.2857142984867096,-0.882996678352356,1.0623787641525269,0.2857142984867096,-0.8963918685913086,1.0623787641525269,0.2857142984867096,-0.8963918685913086,1.0805398225784302,0.2857142984867096,-0.7674795985221863,1.0805398225784302,0.2857142984867096,-0.7959219217300415,1.0805398225784302,0.2857142984867096,-0.7823063135147095,1.0805398225784302,0.2857142984867096,-0.8291547894477844,1.0805398225784302,0.2857142984867096,-0.815090537071228,1.0805398225784302,0.2857142984867096,-0.6204037666320801,1.0805398225784302,0.2857142984867096,-0.6741145253181458,1.0805398225784302,0.2857142984867096,-0.6597152352333069,1.0805398225784302,0.2857142984867096,-0.7063612937927246,1.0805398225784302,0.2857142984867096,-0.6932569742202759,1.0623787641525269,0.2857142984867096,-0.6106775403022766,1.0623787641525269,0.2857142984867096,-0.6106775403022766,1.0805398225784302,0.2857142984867096,-0.867524266242981,1.0805398225784302,0.2857142984867096,-0.8508048057556152,1.0744861364364624,0.2857142984867096,-0.7823063135147095,1.0744861364364624,0.2857142984867096,-0.7823063135147095,1.0623787641525269,0.2857142984867096,-0.7823063135147095,1.0623787641525269,0.2857142984867096,-0.7823063135147095,1.0744861364364624,0.2857142984867096,-0.815090537071228,1.0744861364364624,0.2857142984867096,-0.815090537071228,1.0623787641525269,0.2857142984867096,-0.815090537071228,1.0623787641525269,0.2857142984867096,-0.815090537071228,1.0744861364364624,0.2857142984867096,-0.8508048057556152,1.0744861364364624,0.2857142984867096,-0.8508048057556152,1.0623787641525269,0.2857142984867096,-0.8508048057556152,1.0623787641525269,0.2857142984867096,-0.8508048057556152,1.0623787641525269,0.2857142984867096,-0.7674795985221863,1.0623787641525269,0.2857142984867096,-0.7674795985221863,1.0623787641525269,0.2857142984867096,-0.753534734249115,1.0623787641525269,0.2857142984867096,-0.753534734249115,1.0744861364364624,0.2857142984867096,-0.7388165593147278,1.0744861364364624,0.2857142984867096,-0.7388165593147278,1.0744861364364624,0.2857142984867096,-0.7241613864898682,1.0744861364364624,0.2857142984867096,-0.7241613864898682,1.0623787641525269,0.2857142984867096,-0.7959219217300415,1.0623787641525269,0.2857142984867096,-0.7959219217300415,1.0744861364364624,0.2857142984867096,-0.7959219217300415,1.0744861364364624,0.2857142984867096,-0.7959219217300415,1.0744861364364624,0.2857142984867096,-0.7674795985221863,1.0744861364364624,0.2857142984867096,-0.7674795985221863,1.0744861364364624,0.2857142984867096,-0.753534734249115,1.0744861364364624,0.2857142984867096,-0.753534734249115,1.0623787641525269,0.2857142984867096,-0.8291547894477844,1.0623787641525269,0.2857142984867096,-0.8291547894477844,1.0744861364364624,0.2857142984867096,-0.8291547894477844,1.0744861364364624,0.2857142984867096,-0.8291547894477844,1.0623787641525269,0.2857142984867096,-0.867524266242981,1.0623787641525269,0.2857142984867096,-0.867524266242981,1.0744861364364624,0.2857142984867096,-0.867524266242981,1.0744861364364624,0.2857142984867096,-0.867524266242981,1.0744861364364624,0.2857142984867096,-0.6597152352333069,1.0744861364364624,0.2857142984867096,-0.6597152352333069,1.0623787641525269,0.2857142984867096,-0.6597152352333069,1.0623787641525269,0.2857142984867096,-0.6597152352333069,1.0744861364364624,0.2857142984867096,-0.6932569742202759,1.0744861364364624,0.2857142984867096,-0.6932569742202759,1.0623787641525269,0.2857142984867096,-0.6932569742202759,1.0623787641525269,0.2857142984867096,-0.6932569742202759,1.0623787641525269,0.2857142984867096,-0.7241613864898682,1.0623787641525269,0.2857142984867096,-0.7241613864898682,1.0623787641525269,0.2857142984867096,-0.6204037666320801,1.0623787641525269,0.2857142984867096,-0.6204037666320801,1.0744861364364624,0.2857142984867096,-0.6204037666320801,1.0744861364364624,0.2857142984867096,-0.6204037666320801,1.0744861364364624,0.2857142984867096,-0.6106775403022766,1.0744861364364624,0.2857142984867096,-0.6106775403022766,1.0744861364364624,0.2857142984867096,-0.882996678352356,1.0744861364364624,0.2857142984867096,-0.882996678352356,1.0744861364364624,0.2857142984867096,-0.8963918685913086,1.0744861364364624,0.2857142984867096,-0.8963918685913086,1.0623787641525269,0.2857142984867096,-0.6741145253181458,1.0623787641525269,0.2857142984867096,-0.6741145253181458,1.0744861364364624,0.2857142984867096,-0.6741145253181458,1.0744861364364624,0.2857142984867096,-0.6741145253181458,1.0623787641525269,0.2857142984867096,-0.7063612937927246,1.0623787641525269,0.2857142984867096,-0.7063612937927246,1.0744861364364624,0.2857142984867096,-0.7063612937927246,1.0744861364364624,0.2857142984867096,-0.7063612937927246,1.0623787641525269,0.2857142984867096,-0.7388165593147278,1.0623787641525269,0.2857142984867096,-0.7388165593147278,1.0805398225784302,0.2857142984867096,-0.7241613864898682,1.0623787641525269,0.2857142984867096,-0.6444458961486816,1.0623787641525269,0.2857142984867096,-0.6444458961486816,1.0744861364364624,0.2857142984867096,-0.6444458961486816,1.0744861364364624,0.2857142984867096,-0.6444458961486816,1.0805398225784302,0.2857142984867096,-0.6444458961486816,1.0805398225784302,0.2857142984867096,-0.6345632672309875,1.0623787641525269,0.2857142984867096,-0.6345632672309875,1.0623787641525269,0.2857142984867096,-0.6345632672309875,1.0744861364364624,0.2857142984867096,-0.6345632672309875,1.0744861364364624,0.2857142984867096,-0.6345632672309875,1.0623787641525269,0.4466831088066101,-0.8291547894477844,1.0623787641525269,0.4466831088066101,-0.8291547894477844,1.0744861364364624,0.4466831088066101,-0.8291547894477844,1.0744861364364624,0.4466831088066101,-0.8291547894477844,1.0623787641525269,0.4466831088066101,-0.882996678352356,1.0623787641525269,0.4466831088066101,-0.882996678352356,1.0623787641525269,0.4466831088066101,-0.8963918685913086,1.0623787641525269,0.4466831088066101,-0.8963918685913086,1.0744861364364624,0.4466831088066101,-0.8963918685913086,1.0744861364364624,0.4466831088066101,-0.8963918685913086,1.0744861364364624,0.4466831088066101,-0.6106775403022766,1.0744861364364624,0.4466831088066101,-0.6106775403022766,1.0623787641525269,0.4466831088066101,-0.6106775403022766,1.0623787641525269,0.4466831088066101,-0.6106775403022766,1.0744861364364624,0.4466831088066101,-0.7823063135147095,1.0744861364364624,0.4466831088066101,-0.7823063135147095,1.0623787641525269,0.4466831088066101,-0.7823063135147095,1.0623787641525269,0.4466831088066101,-0.7823063135147095,1.0744861364364624,0.4466831088066101,-0.815090537071228,1.0744861364364624,0.4466831088066101,-0.815090537071228,1.0623787641525269,0.4466831088066101,-0.815090537071228,1.0623787641525269,0.4466831088066101,-0.815090537071228,1.0744861364364624,0.4466831088066101,-0.8508048057556152,1.0744861364364624,0.4466831088066101,-0.8508048057556152,1.0623787641525269,0.4466831088066101,-0.8508048057556152,1.0623787641525269,0.4466831088066101,-0.8508048057556152,1.0744861364364624,0.4466831088066101,-0.7388165593147278,1.0744861364364624,0.4466831088066101,-0.7388165593147278,1.0744861364364624,0.4466831088066101,-0.7241613864898682,1.0744861364364624,0.4466831088066101,-0.7241613864898682,1.0623787641525269,0.4466831088066101,-0.7674795985221863,1.0623787641525269,0.4466831088066101,-0.7674795985221863,1.0623787641525269,0.4466831088066101,-0.753534734249115,1.0623787641525269,0.4466831088066101,-0.753534734249115,1.0623787641525269,0.4466831088066101,-0.7959219217300415,1.0623787641525269,0.4466831088066101,-0.7959219217300415,1.0744861364364624,0.4466831088066101,-0.882996678352356,1.0744861364364624,0.4466831088066101,-0.882996678352356,1.0623787641525269,0.4466831088066101,-0.6741145253181458,1.0623787641525269,0.4466831088066101,-0.6741145253181458,1.0623787641525269,0.4466831088066101,-0.6597152352333069,1.0623787641525269,0.4466831088066101,-0.6597152352333069,1.0744861364364624,0.4466831088066101,-0.6741145253181458,1.0744861364364624,0.4466831088066101,-0.6741145253181458,1.0744861364364624,0.4466831088066101,-0.6597152352333069,1.0744861364364624,0.4466831088066101,-0.6597152352333069,1.0623787641525269,0.4466831088066101,-0.7063612937927246,1.0623787641525269,0.4466831088066101,-0.7063612937927246,1.0623787641525269,0.4466831088066101,-0.6932569742202759,1.0623787641525269,0.4466831088066101,-0.6932569742202759,1.0623787641525269,0.4466831088066101,-0.7388165593147278,1.0623787641525269,0.4466831088066101,-0.7388165593147278,1.0744861364364624,0.4466831088066101,-0.7063612937927246,1.0744861364364624,0.4466831088066101,-0.7063612937927246,1.0744861364364624,0.4466831088066101,-0.6932569742202759,1.0744861364364624,0.4466831088066101,-0.6932569742202759,1.0623787641525269,0.4466831088066101,-0.7241613864898682,1.0623787641525269,0.4466831088066101,-0.7241613864898682,1.0744861364364624,0.4466831088066101,-0.753534734249115,1.0744861364364624,0.4466831088066101,-0.753534734249115,1.0744861364364624,0.4466831088066101,-0.6204037666320801,1.0744861364364624,0.4466831088066101,-0.6204037666320801,1.0623787641525269,0.4466831088066101,-0.6444458961486816,1.0623787641525269,0.4466831088066101,-0.6444458961486816,1.0744861364364624,0.4466831088066101,-0.6444458961486816,1.0744861364364624,0.4466831088066101,-0.6444458961486816,1.0623787641525269,0.4466831088066101,-0.6345632672309875,1.0623787641525269,0.4466831088066101,-0.6345632672309875,1.0744861364364624,0.4466831088066101,-0.6345632672309875,1.0744861364364624,0.4466831088066101,-0.6345632672309875,1.0623787641525269,0.4466831088066101,-0.6204037666320801,1.0623787641525269,0.4466831088066101,-0.6204037666320801,1.0744861364364624,0.4466831088066101,-0.7959219217300415,1.0744861364364624,0.4466831088066101,-0.7959219217300415,1.0744861364364624,0.4466831088066101,-0.7674795985221863,1.0744861364364624,0.4466831088066101,-0.7674795985221863,1.0623787641525269,0.4466831088066101,-0.867524266242981,1.0623787641525269,0.4466831088066101,-0.867524266242981,1.0744861364364624,0.4466831088066101,-0.867524266242981,1.0744861364364624,0.4466831088066101,-0.867524266242981,1.0623787641525269,0.31848421692848206,-0.8963918685913086,1.0180675983428955,0.2857142984867096,-0.8963918685913086,1.0180675983428955,0.2857142984867096,-0.8963918685913086,1.0377120971679688,0.2857142984867096,-0.8825434446334839,1.0377120971679688,0.2857142984867096,-0.8825434446334839,1.0186471939086914,0.2857142984867096,-0.8820791840553284,1.0186471939086914,0.2857142984867096,-0.8820791840553284,1.0377120971679688,0.4466831088066101,-0.8825434446334839,1.0377120971679688,0.4466831088066101,-0.8825434446334839,1.0370683670043945,0.4466831088066101,-0.8963918685913086,1.0370683670043945,0.4466831088066101,-0.8963918685913086,1.0180675983428955,0.4466831088066101,-0.8963918685913086,1.0180675983428955,0.4466831088066101,-0.8963918685913086,1.0186471939086914,0.4466831088066101,-0.8820791840553284,1.0186471939086914,0.4466831088066101,-0.8820791840553284,1.0226486921310425,0.2857142984867096,-0.6106775403022766,1.0226486921310425,0.2857142984867096,-0.6106775403022766,1.0217212438583374,0.2857142984867096,-0.6209741830825806,1.0217212438583374,0.2857142984867096,-0.6209741830825806,1.036787509918213,0.2857142984867096,-0.6207258105278015,1.036787509918213,0.2857142984867096,-0.6207258105278015,1.0217212438583374,0.4466831088066101,-0.6209741830825806,1.0217212438583374,0.4466831088066101,-0.6209741830825806,1.0226486921310425,0.4466831088066101,-0.6106775403022766,1.0226486921310425,0.4466831088066101,-0.6106775403022766,1.036787509918213,0.4466831088066101,-0.6207258105278015,1.036787509918213,0.4466831088066101,-0.6207258105278015,1.038581371307373,0.4466831088066101,-0.6106775403022766,1.038581371307373,0.4466831088066101,-0.6106775403022766,1.000000238418579,0.20396995544433594,-0.9010143280029297,1.000000238418579,0.20396995544433594,-0.9010143280029297,1.000000238418579,0.20396995544433594,-0.9010143280029297,0.9995124340057373,0.20396995544433594,-0.7686111927032471,0.9995124340057373,0.20396995544433594,-0.6115193367004395,1.0299999713897705,0.15542997419834137,-0.6115193367004395,1.0299999713897705,0.15542997419834137,-0.6115193367004395,1.0299999713897705,0.15542997419834137,-0.6115193367004395,1.0299999713897705,0.15542997419834137,-0.6115193367004395,1.0299999713897705,0.15542997419834137,-0.7686111927032471,1.0299999713897705,0.20396995544433594,-0.6115193367004395,1.0299999713897705,0.20396995544433594,-0.6115193367004395,1.0299999713897705,0.20396995544433594,-0.7686111927032471,1.0299999713897705,0.20396995544433594,-0.8974223136901855,1.0299999713897705,0.20396995544433594,-0.8974223136901855,0.5555701851844788,0.15542997419834137,-0.0,0.5555701851844788,0.15542997419834137,-0.0,0.5555499792098999,0.0,-0.0,0.4007596969604492,0.15542997419834137,-0.0,0.11552442610263824,0.15542997419834137,-0.0,0.11552442610263824,0.15542997419834137,-0.0,1.000000238418579,0.15542997419834137,-0.46430936455726624,1.000000238418579,0.15542997419834137,-0.46430936455726624,1.000000238418579,0.0,-0.46331000328063965,0.6886540651321411,0.15542997419834137,-0.13903674483299255,1.0,0.15542997419834137,-1.0,1.0,0.15542997419834137,-1.0,0.0,0.20396995544433594,-0.0,0.0,0.20396995544433594,-0.0,1.000000238418579,0.28024187684059143,-0.46430936455726624,1.000000238418579,0.24540600180625916,-0.46430936455726624,0.5555701851844788,0.28571000695228577,1.4901161193847656e-08,0.5555701851844788,0.23994000256061554,1.4901161193847656e-08,1.000000238418579,0.20396995544433594,-0.9010143280029297,1.000000238418579,0.20396995544433594,-0.9010143280029297,1.000000238418579,0.20396995544433594,-0.9010143280029297,1.0,0.15542997419834137,-1.0,1.0,0.15542997419834137,-1.0,1.0,0.15542997419834137,-1.0,0.5555701851844788,0.20396995544433594,-0.0,0.5555701851844788,0.20396995544433594,-0.0,1.000000238418579,0.20396995544433594,-0.46430936455726624,1.000000238418579,0.20396995544433594,-0.46430936455726624,0.6886540651321411,0.20396995544433594,-0.13903674483299255,1.0299999713897705,0.20396995544433594,-0.4432222545146942,1.0299999713897705,0.20396995544433594,-0.4432222545146942,0.8143234252929688,0.15542997419834137,-0.2179630994796753,0.7125862240791321,0.15542997419834137,-0.11170569062232971,0.0,0.15542997419834137,-0.0,0.0,0.15542997419834137,-0.0,1.0,0.20396995544433594,-1.0,1.0,0.20396995544433594,-1.0,1.0,0.20396995544433594,-1.0,0.0,0.20396995544433594,-0.0,0.0,0.20396995544433594,-0.0,0.0,0.20396995544433594,-0.0,0.0,0.15542997419834137,-0.0,0.0,0.15542997419834137,-0.0,0.0,0.15542997419834137,-0.0,0.25353485345840454,0.20396995544433594,-0.0,1.0299999713897705,0.15542997419834137,-1.0,1.0299999713897705,0.15542997419834137,-1.0,1.0,0.20396995544433594,-1.0,1.0,0.20396995544433594,-1.0,0.4007596969604492,0.20396995544433594,0.029999999329447746,0.27487340569496155,0.20396995544433594,0.029999999329447746,0.11552442610263824,0.20396995544433594,0.029999999329447746,0.4007596969604492,0.15542997419834137,0.029999999329447746,0.11552442610263824,0.15542997419834137,0.029999999329447746,0.5769087672233582,0.15542997419834137,0.029999999329447746,0.5769087672233582,0.15542997419834137,0.029999999329447746,0.0,0.20396995544433594,0.029999999329447746,0.0,0.20396995544433594,0.029999999329447746,1.0299999713897705,0.15542997419834137,-0.4432222545146942,1.0299999713897705,0.15542997419834137,-0.4432222545146942,0.5769087672233582,0.20396995544433594,0.029999999329447746,0.5769087672233582,0.20396995544433594,0.029999999329447746,1.0299999713897705,0.20396995544433594,-1.0,1.0299999713897705,0.20396995544433594,-1.0,0.7125862240791321,0.20396995544433594,-0.11170569062232971,0.0,0.15542997419834137,0.029999999329447746,0.0,0.15542997419834137,0.029999999329447746,0.8642821311950684,0.855372428894043,-0.36975717544555664,0.8642821311950684,0.855372428894043,-0.36975717544555664,0.8642821311950684,0.2857142984867096,-0.36975717544555664,0.8642821311950684,0.2857142984867096,-0.36975717544555664,0.6622516512870789,0.855372428894043,-0.16772666573524475,0.6622516512870789,0.855372428894043,-0.16772666573524475,0.6622516512870789,0.2857142984867096,-0.16772663593292236,0.6622516512870789,0.2857142984867096,-0.16772663593292236,0.763266921043396,0.2857142984867096,-0.2687419056892395,0.763266921043396,0.855372428894043,-0.2687419354915619,0.7940099835395813,0.8571428060531616,-0.2485799938440323,0.8871605396270752,0.855372428894043,-0.34535548090934753,0.8871605396270752,0.855372428894043,-0.34535548090934753,0.8871605396270752,0.2857142984867096,-0.34535548090934753,0.8871605396270752,0.2857142984867096,-0.34535548090934753,0.8871605396270752,0.2857142984867096,-0.34535548090934753,0.6888468265533447,0.2857142984867096,-0.14113149046897888,0.6888468265533447,0.2857142984867096,-0.14113149046897888,0.6888468265533447,0.2857142984867096,-0.14113149046897888,0.8871605396270752,0.24540600180625916,-0.34535548090934753,0.8871605396270752,0.24540600180625916,-0.34535548090934753,0.7290194034576416,0.23993588984012604,-0.10095889866352081,0.6886500120162964,0.23993588984012604,-0.1390399932861328,0.6886500120162964,0.23993588984012604,-0.1390399932861328,0.7164727449417114,0.2857142984867096,-0.11350558698177338,0.7164727449417114,0.2857142984867096,-0.11350558698177338,0.7290194034576416,0.2857142984867096,-0.10095890611410141,0.7898620963096619,0.23993588984012604,-0.24214676022529602,0.9481723308563232,0.23993588984012604,-0.28586700558662415,0.9481723308563232,0.23993588984012604,-0.28586700558662415,0.9310498833656311,0.23993588984012604,-0.3029894232749939,0.9174333214759827,0.2857142984867096,-0.31660598516464233,0.9174333214759827,0.2857142984867096,-0.31660598516464233,0.9310498833656311,0.2857142984867096,-0.3029894232749939,0.9387004971504211,0.2857142984867096,-0.27639517188072205,0.9481723308563232,0.2857142984867096,-0.28586700558662415,0.9481723308563232,0.2857142984867096,-0.28586700558662415,0.836749792098999,0.2857142984867096,-0.17444445192813873,0.8471571207046509,0.2857142984867096,-0.1848517507314682,0.7461418509483337,0.23993588984012604,-0.08383648097515106,0.7461418509483337,0.23993588984012604,-0.08383648097515106,0.7461418509483337,0.2857142984867096,-0.08383648097515106,0.7461418509483337,0.2857142984867096,-0.08383648097515106,0.8471571207046509,0.23993588984012604,-0.1848517507314682,0.9258586764335632,0.2857142984867096,-0.28923699259757996,0.9258586764335632,0.2857142984867096,-0.28923699259757996,0.9353305101394653,0.2857142984867096,-0.29870882630348206,0.9353305101394653,0.2857142984867096,-0.29870882630348206,0.8570176362991333,0.2857142984867096,-0.19471228122711182,0.8771293759346008,0.2857142984867096,-0.21482402086257935,0.8675016760826111,0.2857142984867096,-0.2051963359117508,0.9006285667419434,0.2857142984867096,-0.23832321166992188,0.8906835913658142,0.2857142984867096,-0.2283782809972763,0.7530193328857422,0.2857142984867096,-0.09071395546197891,0.7909985780715942,0.2857142984867096,-0.12869319319725037,0.7808167338371277,0.2857142984867096,-0.11851136386394501,0.8138004541397095,0.2857142984867096,-0.15149511396884918,0.8045343160629272,0.2857142984867096,-0.14222896099090576,0.7333000302314758,0.2857142984867096,-0.09667830169200897,0.7333000302314758,0.2857142984867096,-0.09667830169200897,0.9277598857879639,0.2857142984867096,-0.2654545307159424,0.9159374237060547,0.2857142984867096,-0.2536320686340332,0.8632210493087769,0.2857142984867096,-0.20947693288326263,0.8632210493087769,0.2857142984867096,-0.20947693288326263,0.8546598553657532,0.2857142984867096,-0.2180381566286087,0.8546598553657532,0.2857142984867096,-0.2180381566286087,0.8864030241966248,0.2857142984867096,-0.23265889286994934,0.8864030241966248,0.2857142984867096,-0.23265889286994934,0.8778417706489563,0.2857142984867096,-0.2412201166152954,0.8778417706489563,0.2857142984867096,-0.2412201166152954,0.9116567969322205,0.2857142984867096,-0.25791269540786743,0.9116567969322205,0.2857142984867096,-0.25791269540786743,0.9030956029891968,0.2857142984867096,-0.2664738893508911,0.9030956029891968,0.2857142984867096,-0.2664738893508911,0.8441758155822754,0.2857142984867096,-0.20755410194396973,0.8441758155822754,0.2857142984867096,-0.20755410194396973,0.834315299987793,0.2857142984867096,-0.1976935714483261,0.834315299987793,0.2857142984867096,-0.1976935714483261,0.8324691653251648,0.2857142984867096,-0.17872506380081177,0.8324691653251648,0.2857142984867096,-0.17872506380081177,0.8221064209938049,0.2857142984867096,-0.16836228966712952,0.8221064209938049,0.2857142984867096,-0.16836228966712952,0.8642875552177429,0.2857142984867096,-0.22766584157943726,0.8642875552177429,0.2857142984867096,-0.22766584157943726,0.8728487491607666,0.2857142984867096,-0.21910463273525238,0.8728487491607666,0.2857142984867096,-0.21910463273525238,0.8527370095252991,0.2857142984867096,-0.19899289309978485,0.8527370095252991,0.2857142984867096,-0.19899289309978485,0.8428764939308167,0.2857142984867096,-0.18913236260414124,0.8428764939308167,0.2857142984867096,-0.18913236260414124,0.8877867460250854,0.2857142984867096,-0.2511650323867798,0.8877867460250854,0.2857142984867096,-0.2511650323867798,0.8963479399681091,0.2857142984867096,-0.2426038384437561,0.8963479399681091,0.2857142984867096,-0.2426038384437561,0.914918065071106,0.2857142984867096,-0.2782963514328003,0.914918065071106,0.2857142984867096,-0.2782963514328003,0.9234792590141296,0.2857142984867096,-0.2697351574897766,0.9234792590141296,0.2857142984867096,-0.2697351574897766,0.7765361070632935,0.2857142984867096,-0.12279197573661804,0.7765361070632935,0.2857142984867096,-0.12279197573661804,0.7679749131202698,0.2857142984867096,-0.13135318458080292,0.7679749131202698,0.2857142984867096,-0.13135318458080292,0.800253689289093,0.2857142984867096,-0.1465095579624176,0.800253689289093,0.2857142984867096,-0.1465095579624176,0.7916924953460693,0.2857142984867096,-0.15507078170776367,0.7916924953460693,0.2857142984867096,-0.15507078170776367,0.8135452270507812,0.2857142984867096,-0.1769234985113144,0.8135452270507812,0.2857142984867096,-0.1769234985113144,0.7401775121688843,0.2857142984867096,-0.10355578362941742,0.7401775121688843,0.2857142984867096,-0.10355578362941742,0.748738706111908,0.2857142984867096,-0.09499456733465195,0.748738706111908,0.2857142984867096,-0.09499456733465195,0.7418612241744995,0.2857142984867096,-0.0881170853972435,0.7418612241744995,0.2857142984867096,-0.0881170853972435,0.9344198703765869,0.2857142984867096,-0.2806757688522339,0.9344198703765869,0.2857142984867096,-0.2806757688522339,0.943891704082489,0.2857142984867096,-0.290147602558136,0.943891704082489,0.2857142984867096,-0.290147602558136,0.7781567573547363,0.2857142984867096,-0.14153501391410828,0.7781567573547363,0.2857142984867096,-0.14153501391410828,0.78671795129776,0.2857142984867096,-0.1329738199710846,0.78671795129776,0.2857142984867096,-0.1329738199710846,0.8009586334228516,0.2857142984867096,-0.1643369346857071,0.8009586334228516,0.2857142984867096,-0.1643369346857071,0.8095198273658752,0.2857142984867096,-0.15577572584152222,0.8095198273658752,0.2857142984867096,-0.15577572584152222,0.8239079713821411,0.2857142984867096,-0.18728627264499664,0.8239079713821411,0.2857142984867096,-0.18728627264499664,0.8263870477676392,0.2857142984867096,-0.16408167779445648,0.7571778297424316,0.2857142984867096,-0.12055613100528717,0.7571778297424316,0.2857142984867096,-0.12055613100528717,0.7657390832901001,0.2857142984867096,-0.1119949221611023,0.7657390832901001,0.2857142984867096,-0.1119949221611023,0.7700196504592896,0.2857142984867096,-0.10771431028842926,0.7630316019058228,0.2857142984867096,-0.10072621703147888,0.7501897215843201,0.2857142984867096,-0.11356803774833679,0.7501897215843201,0.2857142984867096,-0.11356803774833679,0.7587509751319885,0.2857142984867096,-0.10500682145357132,0.7587509751319885,0.2857142984867096,-0.10500682145357132,0.8877867460250854,0.4466831088066101,-0.2511650323867798,0.8877867460250854,0.4466831088066101,-0.2511650323867798,0.8963479399681091,0.4466831088066101,-0.2426038384437561,0.8963479399681091,0.4466831088066101,-0.2426038384437561,0.9258586764335632,0.4466831088066101,-0.28923699259757996,0.9258586764335632,0.4466831088066101,-0.28923699259757996,0.9353305101394653,0.4466831088066101,-0.29870882630348206,0.9353305101394653,0.4466831088066101,-0.29870882630348206,0.943891704082489,0.4466831088066101,-0.290147602558136,0.943891704082489,0.4466831088066101,-0.290147602558136,0.7418612241744995,0.4466831088066101,-0.0881170853972435,0.7418612241744995,0.4466831088066101,-0.0881170853972435,0.7333000302314758,0.4466831088066101,-0.09667830169200897,0.7333000302314758,0.4466831088066101,-0.09667830169200897,0.8632210493087769,0.4466831088066101,-0.20947693288326263,0.8632210493087769,0.4466831088066101,-0.20947693288326263,0.8546598553657532,0.4466831088066101,-0.2180381566286087,0.8546598553657532,0.4466831088066101,-0.2180381566286087,0.8864030241966248,0.4466831088066101,-0.23265889286994934,0.8864030241966248,0.4466831088066101,-0.23265889286994934,0.8778417706489563,0.4466831088066101,-0.2412201166152954,0.8778417706489563,0.4466831088066101,-0.2412201166152954,0.9116567969322205,0.4466831088066101,-0.25791269540786743,0.9116567969322205,0.4466831088066101,-0.25791269540786743,0.9030956029891968,0.4466831088066101,-0.2664738893508911,0.9030956029891968,0.4466831088066101,-0.2664738893508911,0.8324691653251648,0.4466831088066101,-0.17872506380081177,0.8324691653251648,0.4466831088066101,-0.17872506380081177,0.8221064209938049,0.4466831088066101,-0.16836228966712952,0.8221064209938049,0.4466831088066101,-0.16836228966712952,0.8441758155822754,0.4466831088066101,-0.20755410194396973,0.8441758155822754,0.4466831088066101,-0.20755410194396973,0.834315299987793,0.4466831088066101,-0.1976935714483261,0.834315299987793,0.4466831088066101,-0.1976935714483261,0.8642875552177429,0.4466831088066101,-0.22766584157943726,0.8642875552177429,0.4466831088066101,-0.22766584157943726,0.9344198703765869,0.4466831088066101,-0.2806757688522339,0.9344198703765869,0.4466831088066101,-0.2806757688522339,0.7781567573547363,0.4466831088066101,-0.14153501391410828,0.7781567573547363,0.4466831088066101,-0.14153501391410828,0.7679749131202698,0.4466831088066101,-0.13135318458080292,0.7679749131202698,0.4466831088066101,-0.13135318458080292,0.78671795129776,0.4466831088066101,-0.1329738199710846,0.78671795129776,0.4466831088066101,-0.1329738199710846,0.7765361070632935,0.4466831088066101,-0.12279197573661804,0.7765361070632935,0.4466831088066101,-0.12279197573661804,0.8009586334228516,0.4466831088066101,-0.1643369346857071,0.8009586334228516,0.4466831088066101,-0.1643369346857071,0.7916924953460693,0.4466831088066101,-0.15507078170776367,0.7916924953460693,0.4466831088066101,-0.15507078170776367,0.8239079713821411,0.4466831088066101,-0.18728627264499664,0.8239079713821411,0.4466831088066101,-0.18728627264499664,0.8095198273658752,0.4466831088066101,-0.15577572584152222,0.8095198273658752,0.4466831088066101,-0.15577572584152222,0.800253689289093,0.4466831088066101,-0.1465095579624176,0.800253689289093,0.4466831088066101,-0.1465095579624176,0.8135452270507812,0.4466831088066101,-0.1769234985113144,0.8135452270507812,0.4466831088066101,-0.1769234985113144,0.8428764939308167,0.4466831088066101,-0.18913236260414124,0.8428764939308167,0.4466831088066101,-0.18913236260414124,0.748738706111908,0.4466831088066101,-0.09499456733465195,0.748738706111908,0.4466831088066101,-0.09499456733465195,0.7571778297424316,0.4466831088066101,-0.12055613100528717,0.7571778297424316,0.4466831088066101,-0.12055613100528717,0.7657390832901001,0.4466831088066101,-0.1119949221611023,0.7657390832901001,0.4466831088066101,-0.1119949221611023,0.7501897215843201,0.4466831088066101,-0.11356803774833679,0.7501897215843201,0.4466831088066101,-0.11356803774833679,0.7587509751319885,0.4466831088066101,-0.10500682145357132,0.7587509751319885,0.4466831088066101,-0.10500682145357132,0.7401775121688843,0.4466831088066101,-0.10355578362941742,0.7401775121688843,0.4466831088066101,-0.10355578362941742,0.8728487491607666,0.4466831088066101,-0.21910463273525238,0.8728487491607666,0.4466831088066101,-0.21910463273525238,0.8527370095252991,0.4466831088066101,-0.19899289309978485,0.8527370095252991,0.4466831088066101,-0.19899289309978485,0.914918065071106,0.4466831088066101,-0.2782963514328003,0.914918065071106,0.4466831088066101,-0.2782963514328003,0.9234792590141296,0.4466831088066101,-0.2697351574897766,0.9234792590141296,0.4466831088066101,-0.2697351574897766,0.9353305101394653,0.31848421692848206,-0.29870882630348206,0.9039977788925171,0.2857142984867096,-0.3300415277481079,0.9039977788925171,0.2857142984867096,-0.3300415277481079,0.9080962538719177,0.2857142984867096,-0.3063584864139557,0.9080962538719177,0.2857142984867096,-0.3063584864139557,0.8942870497703552,0.2857142984867096,-0.3195111155509949,0.8942870497703552,0.2857142984867096,-0.3195111155509949,0.9080962538719177,0.4466831088066101,-0.3063584864139557,0.9080962538719177,0.4466831088066101,-0.3063584864139557,0.9174333214759827,0.4466831088066101,-0.31660598516464233,0.9174333214759827,0.4466831088066101,-0.31660598516464233,0.9039977788925171,0.4466831088066101,-0.3300415277481079,0.9039977788925171,0.4466831088066101,-0.3300415277481079,0.8942870497703552,0.4466831088066101,-0.3195111155509949,0.8942870497703552,0.4466831088066101,-0.3195111155509949,0.7052066326141357,0.2857142984867096,-0.12477169930934906,0.7052066326141357,0.2857142984867096,-0.12477169930934906,0.7118316292762756,0.2857142984867096,-0.13270828127861023,0.7118316292762756,0.2857142984867096,-0.13270828127861023,0.7223094701766968,0.2857142984867096,-0.12187926471233368,0.7223094701766968,0.2857142984867096,-0.12187926471233368,0.7118316292762756,0.4466831088066101,-0.13270828127861023,0.7118316292762756,0.4466831088066101,-0.13270828127861023,0.7052066326141357,0.4466831088066101,-0.12477169930934906,0.7052066326141357,0.4466831088066101,-0.12477169930934906,0.7223094701766968,0.4466831088066101,-0.12187926471233368,0.7223094701766968,0.4466831088066101,-0.12187926471233368,0.7164727449417114,0.4466831088066101,-0.11350558698177338,0.7164727449417114,0.4466831088066101,-0.11350558698177338,0.7034900188446045,0.855372428894043,-0.15421999990940094,0.7034900188446045,0.855372428894043,-0.15421999990940094,0.8871605396270752,0.15542995929718018,-0.34535548090934753,0.8871605396270752,0.20396995544433594,-0.34535548090934753,0.7884464859962463,0.15542997419834137,-0.24329285323619843,0.9160606265068054,0.15542997419834137,-0.3242205083370209,0.9160606265068054,0.20396995544433594,-0.3242205083370209,0.8143234252929688,0.20396995544433594,-0.2179630994796753,0.7884464859962463,0.20396995544433594,-0.24329285323619843],"normals":[0.999969482421875,0.0015564439818263054,0.0023499252274632454,0.999969482421875,-0.0016785180196166039,0.0023499252274632454,0.999969482421875,0.0023194067180156708,0.0011597033590078354,0.999969482421875,-0.002533036284148693,0.00119022186845541,0.999969482421875,0.0023499252274632454,-0.0007629627361893654,0.999969482421875,-0.0033875545486807823,-0.0,0.999969482421875,0.0007629627361893654,-0.0007629627361893654,0.999969482421875,-0.002533036284148693,-0.0008239997550845146,1.0,0.0,-0.0,0.999969482421875,-0.0016785180196166039,-0.0016479995101690292,0.7220069169998169,0.0005798516795039177,0.6918545961380005,0.7216406464576721,3.0518509447574615e-05,0.6922208070755005,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-0.006164738908410072,-0.99969482421875,0.023621326312422752,0.004516739398241043,0.999969482421875,-0.004272591322660446,0.0,-0.99969482421875,0.023621326312422752,0.0,0.0,1.0,-0.0020447401329874992,6.103701889514923e-05,0.999969482421875,0.006164738908410072,-0.99969482421875,0.023621326312422752,-0.999969482421875,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.006164738908410072,-0.99969482421875,0.023621326312422752,0.9998779296875,-0.00033570360392332077,-0.015045625157654285,0.0,-0.0042420728132128716,0.999969482421875,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.0020447401329874992,0.999969482421875,-0.0012512588873505592,-0.999481201171875,-0.02224799245595932,-0.02221747487783432,0.999664306640625,-0.0028077028691768646,-0.024933621287345886,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.002136295661330223,0.999969482421875,-0.0017090365290641785,0.002136295661330223,0.999969482421875,-0.0017090365290641785,0.002136295661330223,0.999969482421875,-0.0017090365290641785,0.0019531846046447754,0.999969482421875,-0.00079348124563694,0.0019531846046447754,0.999969482421875,-0.00079348124563694,0.0019531846046447754,0.999969482421875,-0.00079348124563694,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,1.0,-0.0,0.0,1.0,-0.0,0.999542236328125,-0.004577776417136192,-0.029602954164147377,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-0.99993896484375,-0.0042420728132128716,-0.006805627606809139,-0.99993896484375,-0.0042420728132128716,-0.006805627606809139,0.002136295661330223,0.999969482421875,-0.0017090365290641785,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,1.0,-0.0,0.002136295661330223,0.999969482421875,-0.0017090365290641785,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0019531846046447754,0.999969482421875,-0.00079348124563694,0.002136295661330223,0.999969482421875,-0.0017090365290641785,0.0,1.0,-0.0,0.0,0.0,-1.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.002136295661330223,0.999969482421875,-0.0017090365290641785,0.0019531846046447754,0.999969482421875,-0.00079348124563694,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0019531846046447754,0.999969482421875,-0.00079348124563694,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0019531846046447754,0.999969482421875,-0.00079348124563694,0.0,1.0,-0.0,0.0,1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.001037629321217537,0.999969482421875,-0.0008239997550845146,0.0019531846046447754,0.999969482421875,-0.00079348124563694,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.999786376953125,-0.00317392498254776,-0.01919614151120186,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0009460737928748131,0.999969482421875,-0.00039674062281847,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.999786376953125,-0.00317392498254776,-0.01919614151120186,0.00357066560536623,0.999969482421875,-0.004547257907688618,0.0,1.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.99993896484375,-0.0002136295661330223,-0.010040589608252048,0.0028382213786244392,0.999969482421875,-0.002288888208568096,0.99993896484375,-0.0002136295661330223,-0.010040589608252048,0.002868739888072014,0.999969482421875,-0.0023194067180156708,0.0,1.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0034485915675759315,0.999969482421875,-0.0027466658502817154,-0.9993896484375,-0.02542191743850708,-0.022827845066785812,0.0025635547935962677,0.999969482421875,-0.001037629321217537,0.0027161473408341408,0.999969482421875,-0.0010986663401126862,-0.9993896484375,-0.02542191743850708,-0.022827845066785812,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0010071108117699623,-0.004211554303765297,0.999969482421875,0.0,-0.0042420728132128716,0.999969482421875,-0.0012512588873505592,-0.004119998775422573,0.999969482421875,-0.01913510635495186,-0.8915371894836426,0.4524979293346405,0.0,0.0018005920574069023,0.999969482421875,0.023499252274632454,-0.99969482421875,0.0068666646257042885,0.0,-1.0,-0.0,0.004516739398241043,0.999847412109375,-0.0157780684530735,0.023499252274632454,-0.99969482421875,0.0006103701889514923,0.0,-1.0,-0.0,0.0,-0.0014648884534835815,-0.999969482421875,0.023499252274632454,-0.99969482421875,-0.005615405738353729,0.0,0.0018005920574069023,0.999969482421875,0.0,0.0018005920574069023,0.999969482421875,1.0,0.0,-0.0,1.0,0.0,-0.0,0.999969482421875,0.0,-0.0,0.023499252274632454,-0.99969482421875,-0.005615405738353729,0.019257180392742157,0.04361094906926155,-0.9988402724266052,0.999969482421875,0.003326517529785633,0.0009155552834272385,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.0018921475857496262,0.999969482421875,-0.006775109097361565,-0.004333628341555595,0.012543107382953167,0.999908447265625,0.02136295661330223,0.05847346410155296,-0.9980468153953552,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.999725341796875,0.014404736459255219,-0.016968291252851486,0.999786376953125,0.01235999632626772,-0.0159611813724041,0.99981689453125,0.010986663401126862,-0.015289773233234882,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.99981689453125,0.010986663401126862,-0.015289773233234882,0.0019226660951972008,0.999969482421875,-0.006927701644599438,0.0019226660951972008,0.999969482421875,-0.006927701644599438,0.0019226660951972008,0.999969482421875,-0.006927701644599438,0.0018616290763020515,0.999969482421875,-0.0066225165501236916,0.0018616290763020515,0.999969482421875,-0.0066225165501236916,0.0018616290763020515,0.999969482421875,-0.0066225165501236916,0.999725341796875,0.014404736459255219,-0.016968291252851486,0.999725341796875,0.014404736459255219,-0.016968291252851486,0.0,1.0,-0.0,0.99981689453125,0.010986663401126862,-0.015289773233234882,0.99981689453125,0.010986663401126862,-0.015289773233234882,0.0,1.0,-0.0,0.0,1.0,-0.0,0.02053895592689514,0.0634174644947052,-0.9977721571922302,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0031434064731001854,0.03305154666304588,0.999420166015625,0.0031434064731001854,0.03305154666304588,0.999420166015625,0.0019226660951972008,0.999969482421875,-0.006927701644599438,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.999725341796875,0.014404736459255219,-0.016968291252851486,0.99981689453125,0.010986663401126862,-0.015289773233234882,0.0,1.0,-0.0,0.0019226660951972008,0.999969482421875,-0.006927701644599438,0.999725341796875,0.014404736459255219,-0.016968291252851486,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0018616290763020515,0.999969482421875,-0.0066225165501236916,0.0019226660951972008,0.999969482421875,-0.006927701644599438,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.999725341796875,0.014404736459255219,-0.016968291252851486,0.0019226660951972008,0.999969482421875,-0.006927701644599438,0.0018616290763020515,0.999969482421875,-0.0066225165501236916,0.99981689453125,0.010986663401126862,-0.015289773233234882,0.0018616290763020515,0.999969482421875,-0.0066225165501236916,0.99981689453125,0.010986663401126862,-0.015289773233234882,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0018616290763020515,0.999969482421875,-0.0066225165501236916,0.0,1.0,-0.0,0.0,1.0,-0.0,0.999725341796875,0.014404736459255219,-0.016968291252851486,0.0009460737928748131,0.999969482421875,-0.003418073058128357,0.0018616290763020515,0.999969482421875,-0.0066225165501236916,0.99981689453125,0.010986663401126862,-0.015289773233234882,0.0,1.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.01467940304428339,0.04358043149113655,-0.9989318251609802,0.0,1.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.99981689453125,0.010986663401126862,-0.015289773233234882,0.0009155552834272385,0.999969482421875,-0.003265480510890484,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.01467940304428339,0.04358043149113655,-0.9989318251609802,0.00357066560536623,0.999908447265625,-0.012482070364058018,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.012848292477428913,0.029084138572216034,-0.999481201171875,0.0025635547935962677,0.99993896484375,-0.009216589853167534,0.012848292477428913,0.029084138572216034,-0.999481201171875,0.0025635547935962677,0.99993896484375,-0.009277626872062683,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.00357066560536623,0.999908447265625,-0.012329477816820145,-0.008972441777586937,-0.016296884045004845,0.99981689453125,0.0024414807558059692,0.99993896484375,-0.00866725668311119,0.0025940733030438423,0.99993896484375,-0.009216589853167534,-0.008972441777586937,-0.016296884045004845,0.99981689453125,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.999969482421875,0.006408886983990669,0.002227851189672947,0.999969482421875,0.003326517529785633,0.0009155552834272385,0.999969482421875,-3.0518509447574615e-05,-0.0017090365290641785,1.0,0.0,-0.0,0.8907132148742676,0.021698661148548126,0.4540238678455353,1.0,0.0,-0.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.6660054326057434,-0.6641743183135986,0.3394879102706909,0.999969482421875,-0.0008239997550845146,0.0035401470959186554,0.00045777764171361923,0.00012207403779029846,0.999969482421875,-0.0006714072078466415,0.00012207403779029846,0.999969482421875,0.7247535586357117,-0.0011597033590078354,0.6889553666114807,0.999969482421875,0.0,-0.003265480510890484,0.999969482421875,0.002929776906967163,0.0036927396431565285,0.6998504400253296,0.1427350640296936,-0.6998504400253296,0.001434369944036007,-0.0021057771518826485,0.999969482421875,-0.0021057771518826485,-0.00198370311409235,0.999969482421875,0.999969482421875,-9.155552834272385e-05,-0.003265480510890484,-0.001434369944036007,-0.0039674062281847,0.999969482421875,0.0009765923023223877,-0.004211554303765297,0.999969482421875,0.999969482421875,0.0015564439818263054,0.0023499252274632454,-0.002075258642435074,6.103701889514923e-05,0.999969482421875,0.001434369944036007,0.00012207403779029846,0.999969482421875,1.0,0.0,-0.0,0.0,0.0,1.0,0.7220069169998169,0.0005798516795039177,0.6918545961380005,0.999969482421875,0.0,0.004699850454926491,0.999969482421875,6.103701889514923e-05,-0.0032959990203380585,0.0,1.0,-0.0,-0.04223761707544327,0.0477004311978817,0.9979552626609802,0.6998504400253296,0.1427350640296936,-0.6998504400253296,0.0,1.0,-0.0,0.7028717994689941,0.10922574251890182,-0.7028717994689941,0.0,1.0,-0.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0009155552834272385,-0.00015259254723787308,0.999969482421875,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.7224951982498169,-0.0004272591322660446,0.6913357973098755,0.7216406464576721,0.0,0.6922513246536255,0.7222510576248169,-0.0011597033590078354,0.6916104555130005,0.7233496904373169,-0.0007629627361893654,0.6904507875442505,0.7254859805107117,0.0,0.6881923675537109,0.004547257907688618,0.9998779296875,-0.01275673694908619,0.7210302948951721,0.0,0.6928617358207703,0.7244789004325867,0.006195257417857647,0.6892605423927307,-0.7294839024543762,0.0,0.6839503049850464,-0.7294839024543762,0.0,0.6839503049850464,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7248145937919617,-0.0076601458713412285,0.6888638138771057,-0.010010071098804474,-0.999664306640625,-0.023285623639822006,0.7217322587966919,-0.003479110077023506,0.6921292543411255,0.0,1.0,-0.0,0.0020142216235399246,0.999969482421875,-0.005066072568297386,-0.7179479598999023,0.015198217704892159,0.69588303565979,0.6814172863960266,0.015045625157654285,-0.7317118048667908,-0.004943998530507088,-0.999908447265625,-0.011474959552288055,0.0,-1.0,-0.0,0.7161778807640076,0.004394665360450745,0.6978667378425598,0.7157810926437378,0.0036011841148138046,0.6982635259628296,0.7154148817062378,0.0028382213786244392,0.6986907720565796,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.7154148817062378,0.0028382213786244392,0.6986907720565796,0.002075258642435074,0.999969482421875,-0.005493331700563431,0.002075258642435074,0.999969482421875,-0.005493331700563431,0.002075258642435074,0.999969482421875,-0.005493331700563431,0.0019226660951972008,0.999969482421875,-0.0046388134360313416,0.0019226660951972008,0.999969482421875,-0.0046388134360313416,0.0019226660951972008,0.999969482421875,-0.0046388134360313416,0.7161778807640076,0.004394665360450745,0.6978667378425598,0.7161778807640076,0.004394665360450745,0.6978667378425598,0.0,1.0,-0.0,0.7154148817062378,0.0028382213786244392,0.6986907720565796,0.7154148817062378,0.0028382213786244392,0.6986907720565796,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0,0.6835230588912964,0.02151554822921753,-0.729575514793396,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-0.7225867509841919,0.005371257662773132,0.6912137269973755,-0.7225867509841919,0.005371257662773132,0.6912137269973755,0.002075258642435074,0.999969482421875,-0.005493331700563431,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0,0.7161778807640076,0.004394665360450745,0.6978667378425598,0.7154148817062378,0.0028382213786244392,0.6986907720565796,0.0,1.0,-0.0,0.002075258642435074,0.999969482421875,-0.005493331700563431,0.7161778807640076,0.004394665360450745,0.6978667378425598,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0019226660951972008,0.999969482421875,-0.0046388134360313416,0.002075258642435074,0.999969482421875,-0.005493331700563431,0.0,1.0,-0.0,-0.7070833444595337,0.0,-0.7070833444595337,0.7161778807640076,0.004394665360450745,0.6978667378425598,0.002075258642435074,0.999969482421875,-0.005493331700563431,0.0019226660951972008,0.999969482421875,-0.0046388134360313416,0.7154148817062378,0.0028382213786244392,0.6986907720565796,0.0019226660951972008,0.999969482421875,-0.0046388134360313416,0.7154148817062378,0.0028382213786244392,0.6986907720565796,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0019226660951972008,0.999969482421875,-0.0046388134360313416,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.7161778807640076,0.004394665360450745,0.6978667378425598,0.0010071108117699623,0.999969482421875,-0.0027161473408341408,0.0019226660951972008,0.999969482421875,-0.0046388134360313416,0.7154148817062378,0.0028382213786244392,0.6986907720565796,0.0,1.0,-0.0,0.0,1.0,-0.0,-0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.0,1.0,-0.0,0.6917020082473755,0.014648884534835815,-0.7220069169998169,0.0,1.0,-0.0,0.0,1.0,-0.0,-0.7070833444595337,0.0,-0.7070833444595337,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.7154148817062378,0.0028382213786244392,0.6986907720565796,0.0009460737928748131,0.999969482421875,-0.002288888208568096,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.6917020082473755,0.014648884534835815,-0.7220069169998169,0.0033570360392332077,0.99993896484375,-0.010193182155489922,0.0,1.0,-0.0,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.0,1.0,-0.0,0.0,1.0,-0.0,-0.7070833444595337,0.0,-0.7070833444595337,0.0,1.0,-0.0,-0.7070833444595337,0.0,-0.7070833444595337,0.0,1.0,-0.0,0.0,1.0,-0.0,-0.7070833444595337,0.0,-0.7070833444595337,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.6914578676223755,0.003021332435309887,-0.7223731279373169,0.0027466658502817154,0.99993896484375,-0.007324442267417908,0.6915189027786255,0.0029908139258623123,-0.7223120927810669,0.00277718435972929,0.99993896484375,-0.007385479286313057,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.7070833444595337,0.0,-0.7070833444595337,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.003479110077023506,0.99993896484375,-0.00952177494764328,-0.7060151696205139,0.014893032610416412,0.7079988718032837,0.002533036284148693,0.999969482421875,-0.0060731833800673485,0.002685628831386566,0.999969482421875,-0.0064699240028858185,-0.7060151696205139,0.014893032610416412,0.7079988718032837,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0,0.7210302948951721,0.0,0.6928617358207703,0.7218543291091919,0.0016785180196166039,0.6920071840286255,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.7222815752029419,0.0,0.6915494203567505,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.7220069169998169,0.0011597033590078354,0.6918545961380005,0.7220069169998169,0.0011597033590078354,0.6918545961380005,0.0,1.0,-0.0,0.7208471894264221,0.001434369944036007,0.6930753588676453,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.7229529619216919,-0.0006408886983990669,0.6908780336380005,0.0,0.0,1.0,0.999969482421875,-0.0008239997550845146,-0.002471999265253544,0.7240211367607117,-0.0023499252274632454,0.6897183060646057,-0.999969482421875,0.0,-0.0,0.00030518509447574615,6.103701889514923e-05,0.999969482421875,0.002471999265253544,0.999969482421875,-0.003662221133708954,0.9998779296875,-0.00033570360392332077,-0.015045625157654285,0.001434369944036007,0.00012207403779029846,0.999969482421875,0.0,0.0,1.0,1.0,0.0,-0.0,-0.00045777764171361923,6.103701889514923e-05,0.999969482421875,0.999969482421875,0.0,-0.0,0.002471999265253544,0.999969482421875,-0.0023499252274632454,-0.9986571669578552,-0.03814813494682312,-0.03424176573753357,1.0,0.0,-0.0,0.0,0.0,1.0,-0.006164738908410072,-0.99969482421875,0.023621326312422752,0.0,0.0,1.0,0.004943998530507088,0.99993896484375,-0.007354960776865482,0.004943998530507088,0.999969482421875,-0.004699850454926491,0.999969482421875,0.0,-0.0,0.004943998530507088,0.99993896484375,-0.006042664870619774,0.0,-0.99969482421875,0.023621326312422752,0.0013122959062457085,-0.0028077028691768646,0.999969482421875,0.0,-1.0,-0.0,-0.999481201171875,-0.02224799245595932,-0.02221747487783432,-0.9986571669578552,-0.03814813494682312,-0.03424176573753357,-0.0017090365290641785,-0.002868739888072014,0.999969482421875,0.0,1.0,-0.0,0.17572557926177979,0.0,0.9844050407409668,0.0,1.0,-0.0,0.0,-1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.999359130859375,-0.0052797021344304085,-0.03482161834836006,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.046418651938438416,0.0,0.9989013075828552,0.999664306640625,-0.0028077028691768646,-0.024933621287345886,0.0,1.0,-0.0,0.999359130859375,-0.0052797021344304085,-0.03482161834836006,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,-1.0,-0.0,-0.999908447265625,-0.006378368474543095,-0.010193182155489922,-0.999908447265625,-0.006378368474543095,-0.010193182155489922,0.0,1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.01672414317727089,-0.002868739888072014,-0.999847412109375,-1.0,0.0,-0.0,0.999542236328125,-0.004577776417136192,-0.029602954164147377,0.01672414317727089,-0.002868739888072014,-0.999847412109375,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.01672414317727089,-0.002868739888072014,-0.999847412109375,-1.0,0.0,-0.0,0.999786376953125,-0.00317392498254776,-0.01919614151120186,0.01672414317727089,-0.002868739888072014,-0.999847412109375,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.01672414317727089,-0.002868739888072014,-0.999847412109375,-0.04043702408671379,0.0,-0.999176025390625,0.0,1.0,-0.0,-0.99969482421875,0.0,0.024323251098394394,0.046418651938438416,0.0,0.9989013075828552,-0.04043702408671379,0.0,-0.999176025390625,-0.99969482421875,0.0,0.024323251098394394,-0.99969482421875,0.0,0.024323251098394394,0.046418651938438416,0.0,0.9989013075828552,0.046418651938438416,0.0,0.9989013075828552,1.0,0.0,-0.0,-0.04043702408671379,0.0,-0.999176025390625,1.0,0.0,-0.0,-0.04043702408671379,0.0,-0.999176025390625,-0.99969482421875,0.0,0.024323251098394394,0.0,1.0,-0.0,-0.08969389647245407,0.0,-0.9959410429000854,0.999847412109375,0.0,0.016479995101690292,-0.08969389647245407,0.0,-0.9959410429000854,0.17572557926177979,0.0,0.9844050407409668,0.999847412109375,0.0,0.016479995101690292,0.999847412109375,0.0,0.016479995101690292,-0.08969389647245407,0.0,-0.9959410429000854,-1.0,0.0,-0.0,-0.08969389647245407,0.0,-0.9959410429000854,0.17572557926177979,0.0,0.9844050407409668,0.999847412109375,0.0,0.016479995101690292,0.17572557926177979,0.0,0.9844050407409668,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.0,-1.0,-0.0,0.491073340177536,0.8710898160934448,-0.0,0.999969482421875,-0.0033875545486807823,-0.0,0.0,0.0018005920574069023,0.999969482421875,0.999969482421875,-0.0016785180196166039,0.00238044373691082,0.0025940733030438423,0.99993896484375,-0.008972441777586937,0.019257180392742157,0.04361094906926155,-0.9988402724266052,0.999969482421875,0.0,0.004699850454926491,1.0,0.0,-0.0,0.0,-0.0014648884534835815,-0.999969482421875,0.0,-0.0014648884534835815,-0.999969482421875,0.999969482421875,-0.0016785180196166039,-0.0016479995101690292,0.0025940733030438423,0.99993896484375,-0.008972441777586937,-0.013458662666380405,-0.024445325136184692,0.999603271484375,0.999969482421875,6.103701889514923e-05,-0.0032959990203380585,0.999969482421875,0.0023499252274632454,-0.0007629627361893654,0.7395245432853699,0.11499374359846115,-0.6632282733917236,0.999969482421875,0.0023499252274632454,0.0011597033590078354,0.7395245432853699,0.11499374359846115,-0.6632282733917236,1.0,0.0,-0.0,0.023499252274632454,-0.99969482421875,0.0068666646257042885,0.0,-1.0,-0.0,0.0,0.0,-1.0,0.999969482421875,0.0007629627361893654,-0.0007629627361893654,1.0,0.0,-0.0,0.005218665115535259,0.99981689453125,-0.017914365977048874,0.005218665115535259,0.99981689453125,-0.017975401133298874,0.0,-0.0014648884534835815,-0.999969482421875,0.005218665115535259,0.99981689453125,-0.017944883555173874,0.023499252274632454,-0.99969482421875,0.0006103701889514923,0.999969482421875,0.004303109832108021,0.003021332435309887,0.0,-1.0,-0.0,-0.00436414685100317,0.012543107382953167,0.999908447265625,-0.013458662666380405,-0.024445325136184692,0.999603271484375,0.999969482421875,0.0,-0.0021057771518826485,0.0,1.0,-0.0,0.9844355583190918,0.0,-0.17572557926177979,0.0,1.0,-0.0,0.0,-1.0,-0.0,0.999725341796875,0.014404736459255219,-0.016968291252851486,0.023438215255737305,0.07333597540855408,-0.9970091581344604,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.9989013075828552,0.0,-0.046418651938438416,0.02136295661330223,0.05847346410155296,-0.9980468153953552,0.0,1.0,-0.0,0.023438215255737305,0.07333597540855408,-0.9970091581344604,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,-1.0,-0.0,0.004730368964374065,0.049562059342861176,0.9987487196922302,0.004730368964374065,0.049562059342861176,0.9987487196922302,0.0,1.0,-0.0,0.999755859375,0.01303140353411436,-0.016296884045004845,-0.9980468153953552,0.04156620800495148,-0.04623554274439812,0.0,0.0,1.0,0.02053895592689514,0.0634174644947052,-0.9977721571922302,-0.9980468153953552,0.04156620800495148,-0.04623554274439812,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.999725341796875,0.014404736459255219,-0.016968291252851486,0.999725341796875,0.014404736459255219,-0.016968291252851486,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,0.99981689453125,0.010986663401126862,-0.015289773233234882,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.99981689453125,0.010986663401126862,-0.015289773233234882,0.0,1.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,-0.9980468153953552,0.04156620800495148,-0.04623554274439812,0.0,0.0,1.0,0.01467940304428339,0.04358043149113655,-0.9989318251609802,-0.9980468153953552,0.04156620800495148,-0.04623554274439812,0.0,1.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,-0.9980468153953552,0.04156620800495148,-0.04623554274439812,-0.999176025390625,0.0,0.04043702408671379,0.0,1.0,-0.0,0.024323251098394394,0.0,0.99969482421875,0.9989013075828552,0.0,-0.046418651938438416,-0.999176025390625,0.0,0.04043702408671379,0.024323251098394394,0.0,0.99969482421875,0.024323251098394394,0.0,0.99969482421875,0.9989013075828552,0.0,-0.046418651938438416,0.9989013075828552,0.0,-0.046418651938438416,0.0,0.0,-1.0,-0.999176025390625,0.0,0.04043702408671379,0.0,0.0,-1.0,-0.999176025390625,0.0,0.04043702408671379,0.024323251098394394,0.0,0.99969482421875,0.0,1.0,-0.0,-0.9959410429000854,0.0,0.08969389647245407,0.016479995101690292,0.0,-0.999847412109375,-0.9959410429000854,0.0,0.08969389647245407,0.9844355583190918,0.0,-0.17572557926177979,0.016479995101690292,0.0,-0.999847412109375,0.016479995101690292,0.0,-0.999847412109375,-0.9959410429000854,0.0,0.08969389647245407,0.0,0.0,1.0,-0.9959410429000854,0.0,0.08969389647245407,0.9844355583190918,0.0,-0.17572557926177979,0.016479995101690292,0.0,-0.999847412109375,0.9844355583190918,0.0,-0.17572557926177979,0.0,0.0,1.0,0.0,1.0,-0.0,0.7345194816589355,0.1498153656721115,-0.6618244051933289,0.7345194816589355,0.1498153656721115,-0.6618244051933289,0.0,1.0,-0.0,0.0,0.8953825235366821,-0.4452955722808838,1.0,0.0,-0.0,0.0,-1.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.8944059610366821,-0.44718772172927856,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,0.999969482421875,0.0,-1.0,-0.0,0.0,0.0,0.999969482421875,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.5965147614479065,0.8025757670402527,-0.0,0.0,-1.0,-0.0,0.7240516543388367,0.0021973326802253723,0.6897183060646057,0.7240516543388367,0.0021973326802253723,0.6897183060646057,0.0,-1.0,-0.0,0.7028717994689941,0.10922574251890182,-0.7028717994689941,0.7028717994689941,0.10922574251890182,-0.7028717994689941,0.0,1.0,-0.0,0.0,1.0,-0.0,0.7254859805107117,0.0,0.6881923675537109,0.7254859805107117,0.0,0.6881923675537109,0.7244789004325867,0.006378368474543095,0.6892605423927307,0.7235327959060669,0.007110812701284885,0.6902065873146057,0.7345194816589355,0.1498153656721115,-0.6618244051933289,0.7345194816589355,0.1498153656721115,-0.6618244051933289,0.0,1.0,-0.0,0.7028717994689941,0.10922574251890182,-0.7028717994689941,0.0,-0.999969482421875,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.7224036455154419,6.103701889514923e-05,0.6914578676223755,0.0,1.0,-0.0,0.7254859805107117,0.0,0.6881923675537109,0.7201452851295471,-0.012512588873505592,0.6936857104301453,0.0,1.0,-0.0,0.7222815752029419,0.0,0.6915494203567505,0.7222815752029419,0.0,0.6915494203567505,0.7222815752029419,0.0,0.6915494203567505,0.0,1.0,-0.0,0.0,1.0,-0.0,0.6998504400253296,0.1427350640296936,-0.6998504400253296,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.0,-1.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.999969482421875,0.006164738908410072,0.0025635547935962677,0.6998504400253296,0.1427350640296936,-0.6998504400253296,0.00045777764171361923,-6.103701889514923e-05,0.999969482421875,0.0009155552834272385,-0.00015259254723787308,0.999969482421875,0.0009155552834272385,-0.00015259254723787308,0.999969482421875,0.00045777764171361923,-6.103701889514923e-05,0.999969482421875,0.0009155552834272385,-0.00015259254723787308,0.999969482421875,0.7222815752029419,0.0,0.6915494203567505,0.0,0.0,1.0,0.0009155552834272385,-0.00015259254723787308,0.999969482421875,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.7222815752029419,0.0,0.6915494203567505,0.0,1.0,-0.0,0.7222815752029419,0.0,0.6915494203567505,0.0,0.0,-1.0,0.0,1.0,-0.0,0.7222815752029419,0.0,0.6915494203567505,-1.0,0.0,-0.0,0.0,-1.0,-0.0,0.014069032855331898,-0.9996337890625,0.022766808047890663,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.005096591077744961,0.999847412109375,-0.016327403485774994,0.5088045597076416,-0.016418958082795143,-0.860683023929596,0.01974547654390335,-0.999725341796875,0.01031525619328022,0.0050355540588498116,0.9998779296875,-0.014374217949807644,0.5088045597076416,-0.016418958082795143,-0.860683023929596,0.005066072568297386,0.999847412109375,-0.015350810252130032,0.017273476347327232,-0.999725341796875,0.0157170332968235,0.01657155156135559,-0.99969482421875,0.017273476347327232,0.014069032855331898,-0.9996337890625,0.022766808047890663,-0.7294839024543762,0.0,0.6839503049850464,0.0029908139258623123,0.99993896484375,-0.009613330475986004,-0.7294839024543762,0.0,0.6839503049850464,0.6834925413131714,0.004547257907688618,-0.729911208152771,0.0025025177747011185,0.999969482421875,-0.007171849720180035,-0.7054353356361389,0.02233954891562462,0.7083956599235535,0.5088045597076416,-0.016418958082795143,-0.860683023929596,-0.01980651170015335,-0.9987182021141052,-0.04599139466881752,0.6834925413131714,0.004547257907688618,-0.729911208152771,-0.7179479598999023,0.015198217704892159,0.69588303565979,0.0,-1.0,-0.0,-0.7054353356361389,0.02233954891562462,0.7083956599235535,0.0,1.0,-0.0,0.8203680515289307,0.0,0.5718253254890442,0.0,1.0,-0.0,0.7206030488014221,-0.024262215942144394,0.6928922533988953,0.7161778807640076,0.004394665360450745,0.6978667378425598,0.6793725490570068,0.024964140728116035,-0.7333292365074158,-0.0098574785515666,-0.999664306640625,-0.022858362644910812,0.0,1.0,-0.0,0.7391582727432251,0.0,0.6734824776649475,0.6814783215522766,0.01474044006317854,-0.7316507697105408,0.0,1.0,-0.0,0.6793725490570068,0.024964140728116035,-0.7333292365074158,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0,0.0,-0.999969482421875,-0.0,-0.730216383934021,0.008056886494159698,0.6831568479537964,-0.730216383934021,0.008056886494159698,0.6831568479537964,0.0,1.0,-0.0,0.7157810926437378,0.0036011841148138046,0.6982635259628296,-0.6788537502288818,0.013183996081352234,-0.7341227531433105,-0.7070833444595337,0.0,0.7070833444595337,0.6835230588912964,0.02151554822921753,-0.729575514793396,-0.6788537502288818,0.013183996081352234,-0.7341227531433105,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-0.7070833444595337,0.0,-0.7070833444595337,0.7161778807640076,0.004394665360450745,0.6978667378425598,0.7161778807640076,0.004394665360450745,0.6978667378425598,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.0,1.0,-0.0,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.0,1.0,-0.0,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.0,1.0,-0.0,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7154148817062378,0.0028382213786244392,0.6986907720565796,0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7154148817062378,0.0028382213786244392,0.6986907720565796,0.0,1.0,-0.0,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0,0.7070833444595337,0.0,0.7070833444595337,-0.6788537502288818,0.013183996081352234,-0.7341227531433105,-0.7070833444595337,0.0,0.7070833444595337,0.6917020082473755,0.014648884534835815,-0.7220069169998169,-0.6788537502288818,0.013183996081352234,-0.7341227531433105,0.0,1.0,-0.0,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.0,1.0,-0.0,0.7070833444595337,0.0,-0.7070833444595337,0.0,0.999969482421875,-0.0,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.0,1.0,-0.0,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.0,1.0,-0.0,0.7070833444595337,0.0,-0.7070833444595337,0.0,0.999969482421875,-0.0,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.0,1.0,-0.0,0.0,1.0,-0.0,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.0,1.0,-0.0,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.0,0.999969482421875,-0.0,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,-0.7070833444595337,0.0,-0.7070833444595337,0.7070833444595337,0.0,0.7070833444595337,0.7070833444595337,0.0,-0.7070833444595337,-0.6788537502288818,0.013183996081352234,-0.7341227531433105,-0.7351298332214355,0.0,-0.6779076457023621,0.0,1.0,-0.0,-0.6896572709083557,0.0,0.7240821719169617,0.7391582727432251,0.0,0.6734824776649475,-0.7351298332214355,0.0,-0.6779076457023621,-0.6896572709083557,0.0,0.7240821719169617,-0.6896572709083557,0.0,0.7240821719169617,0.7391582727432251,0.0,0.6734824776649475,0.7391582727432251,0.0,0.6734824776649475,0.7070833444595337,0.0,-0.7070833444595337,-0.7351298332214355,0.0,-0.6779076457023621,0.7070833444595337,0.0,-0.7070833444595337,-0.7351298332214355,0.0,-0.6779076457023621,-0.6896572709083557,0.0,0.7240821719169617,0.0,1.0,-0.0,-0.7676625847816467,0.0,-0.6407971382141113,0.7186498641967773,0.0,-0.69533371925354,-0.7676625847816467,0.0,-0.6407971382141113,0.8203680515289307,0.0,0.5718253254890442,0.7186498641967773,0.0,-0.69533371925354,0.7186498641967773,0.0,-0.69533371925354,-0.7676625847816467,0.0,-0.6407971382141113,-0.7070833444595337,0.0,0.7070833444595337,-0.7676625847816467,0.0,-0.6407971382141113,0.8203680515289307,0.0,0.5718253254890442,0.7186498641967773,0.0,-0.69533371925354,0.8203680515289307,0.0,0.5718253254890442,-0.7070833444595337,0.0,0.7070833444595337,0.5088045597076416,-0.016418958082795143,-0.860683023929596,0.01974547654390335,-0.999725341796875,0.01031525619328022,0.7218543291091919,0.0016785180196166039,0.6920071840286255,0.7244483828544617,-0.011719107627868652,0.6891995072364807,0.7208166718482971,0.001434369944036007,0.6930753588676453,0.7222815752029419,0.0,0.6915494203567505,0.7222815752029419,0.0,0.6915494203567505,0.0,1.0,-0.0,0.7205420136451721,-0.024292733520269394,0.6929532885551453],"indices":[395,15,394,15,395,585,358,398,577,398,358,399,842,9,7,9,842,576,24,357,585,357,24,368,578,26,27,26,578,19,606,40,39,40,606,34,600,175,37,600,172,175,600,588,172,601,588,600,25,597,31,597,25,22,592,29,590,29,592,28,22,591,597,591,22,20,28,583,29,583,28,30,596,587,594,21,587,596,21,171,587,589,584,595,584,589,586,593,21,596,580,21,593,580,140,21,180,33,598,33,180,181,181,602,33,602,181,182,74,77,55,77,74,83,39,618,45,618,39,40,609,45,44,45,609,39,21,140,36,36,140,160,36,160,158,36,158,112,36,112,96,96,112,47,47,112,90,90,112,48,48,112,100,100,112,49,49,112,66,157,38,612,159,38,157,581,38,159,581,32,38,603,132,605,132,603,174,599,39,609,39,599,606,87,622,42,53,622,87,91,622,53,54,622,91,99,622,54,640,622,99,639,622,640,111,622,639,41,622,111,607,622,41,131,46,43,114,46,131,712,46,114,56,46,712,88,46,56,57,46,88,102,46,57,707,46,102,104,46,707,42,46,104,622,46,42,647,718,738,718,647,98,61,627,617,627,61,85,36,86,63,86,36,96,96,67,86,67,96,47,643,119,734,119,643,661,72,58,635,58,72,82,90,70,92,70,90,48,92,71,93,71,92,70,93,631,628,631,93,71,100,73,669,73,100,49,669,74,97,74,669,73,112,59,110,59,112,35,655,117,125,117,655,653,71,630,631,630,71,97,47,92,67,92,47,90,82,616,58,616,82,62,108,75,106,75,108,50,106,76,105,76,106,75,105,634,107,634,105,76,95,78,89,78,95,51,89,79,94,79,89,78,94,636,633,636,94,79,101,81,84,81,101,52,84,82,72,82,84,81,619,65,620,619,64,65,619,37,64,600,37,619,103,63,69,63,103,36,701,770,163,770,701,703,49,80,73,80,49,66,60,608,614,625,608,60,612,608,625,612,38,608,62,617,616,617,62,61,85,629,627,629,85,68,109,615,613,615,109,695,69,61,62,61,69,63,86,68,85,68,86,67,97,55,630,55,97,74,48,669,70,669,48,100,68,628,629,628,68,93,724,60,122,139,60,724,625,60,139,76,633,634,633,76,94,52,69,81,69,52,103,662,120,752,120,662,663,79,635,636,635,79,72,51,84,78,84,51,101,670,142,143,142,670,671,685,768,151,768,685,705,683,764,148,764,683,702,50,89,75,89,50,95,80,109,83,109,80,110,116,107,713,107,116,105,83,613,77,613,83,109,113,106,115,106,113,108,66,110,80,110,66,112,130,116,129,116,130,115,129,713,632,713,129,116,132,115,130,115,132,113,691,632,621,632,691,129,679,118,146,118,679,697,168,720,167,720,168,719,750,164,123,164,750,748,605,130,637,130,605,132,165,162,145,162,165,150,155,144,156,144,155,152,128,790,170,790,128,753,758,141,147,141,758,756,774,124,161,124,774,169,154,726,153,726,154,121,766,166,149,166,766,765,126,137,127,137,126,138,716,784,786,784,716,714,675,740,796,740,675,649,677,759,762,759,677,680,689,728,778,728,689,692,699,763,760,763,699,678,704,772,771,772,704,681,623,725,722,623,798,725,623,626,798,667,751,776,751,667,656,698,761,757,761,698,700,65,730,729,730,65,64,706,744,769,744,706,657,708,782,780,782,708,710,664,732,791,732,664,641,715,781,785,781,715,709,672,736,721,736,672,645,673,797,794,797,673,676,682,767,773,767,682,684,659,775,746,775,659,686,687,779,788,779,687,690,696,754,727,754,696,693,654,792,749,792,654,665,642,735,733,735,642,644,646,739,737,739,646,648,694,723,755,723,694,624,650,742,741,742,650,651,658,747,745,747,658,660,666,777,793,777,666,668,711,787,783,787,711,717,652,795,743,795,652,674,638,789,731,789,638,688,803,809,811,809,803,799,158,35,112,35,158,610,140,800,160,800,140,580,136,133,134,133,136,135,801,812,805,812,801,804,611,806,807,806,611,802,159,808,810,808,159,157,171,21,173,173,21,36,173,36,174,174,36,132,132,36,113,113,36,108,108,36,50,50,36,95,95,36,51,51,36,101,101,36,52,52,36,103,587,173,813,173,587,171,817,825,823,825,817,604,176,178,179,178,176,177,815,824,819,824,815,818,175,821,826,821,175,172,814,820,822,820,814,816,834,192,193,192,834,184,869,206,205,206,869,200,864,844,338,864,338,341,864,341,203,864,203,863,191,860,197,860,191,188,855,195,850,195,855,194,188,851,860,851,188,185,194,839,195,839,194,196,187,857,859,187,337,857,857,337,843,190,840,858,840,190,841,836,859,856,836,306,859,859,306,187,346,199,861,199,346,347,347,865,199,865,347,348,240,243,221,243,240,249,205,881,211,881,205,206,872,211,210,211,872,205,232,324,278,232,326,324,232,306,326,187,306,232,187,232,215,187,215,266,187,266,214,187,214,256,187,256,213,187,213,262,187,262,202,837,198,325,325,198,323,323,198,875,875,198,204,866,298,868,298,866,340,862,205,872,205,862,869,253,885,208,219,885,253,257,885,219,220,885,257,265,885,220,903,885,265,902,885,903,277,885,902,207,885,277,870,885,207,297,212,209,280,212,297,975,212,280,222,212,975,254,212,222,223,212,254,268,212,223,970,212,268,270,212,970,208,212,270,885,212,208,910,981,1001,981,910,264,227,890,880,890,227,251,202,252,229,252,202,262,262,233,252,233,262,213,906,285,997,285,906,924,238,224,898,224,238,248,256,236,258,236,256,214,258,237,259,237,258,236,259,894,891,894,259,237,266,239,932,239,266,215,932,240,263,240,932,239,278,225,276,225,278,201,918,283,291,283,918,916,237,893,894,893,237,263,213,258,233,258,213,256,248,879,224,879,248,228,274,241,272,241,274,216,272,242,271,242,272,241,271,897,273,897,271,242,261,244,255,244,261,217,255,245,260,245,255,244,260,899,896,899,260,245,267,247,250,247,267,218,250,248,238,248,250,247,863,203,230,863,230,231,863,231,883,863,883,882,269,229,235,229,269,202,964,1033,329,1033,964,966,215,246,239,246,215,232,875,204,888,888,204,226,226,204,877,877,204,871,228,880,879,880,228,227,251,892,890,892,251,234,275,878,876,878,275,958,235,227,228,227,235,229,252,234,251,234,252,233,263,221,893,221,263,240,214,932,236,932,214,266,234,891,892,891,234,259,305,288,987,305,226,288,888,226,305,242,896,897,896,242,260,218,235,247,235,218,269,925,286,1015,286,925,926,245,898,899,898,245,238,217,250,244,250,217,267,933,308,309,308,933,934,948,1031,317,1031,948,968,946,1027,314,1027,946,965,216,255,241,255,216,261,246,275,249,275,246,276,282,273,976,273,282,271,249,876,243,876,249,275,279,272,281,272,279,274,232,276,246,276,232,278,296,282,295,282,296,281,295,976,895,976,295,282,298,281,296,281,298,279,954,895,884,895,954,295,942,284,312,284,942,960,334,983,333,983,334,982,1013,330,289,330,1013,1011,868,296,900,296,868,298,331,328,311,328,331,316,321,310,322,310,321,318,294,1053,336,1053,294,1016,1021,307,313,307,1021,1019,1037,290,327,290,1037,335,320,989,319,989,320,287,1029,332,315,332,1029,1028,292,303,293,303,292,304,979,1047,1049,1047,979,977,938,1003,1059,1003,938,912,940,1022,1025,1022,940,943,952,991,1041,991,952,955,962,1026,1023,1026,962,941,967,1035,1034,1035,967,944,886,988,985,886,1061,988,886,889,1061,930,1014,1039,1014,930,919,961,1024,1020,1024,961,963,231,993,992,993,231,230,969,1007,1032,1007,969,920,971,1045,1043,1045,971,973,927,995,1054,995,927,904,978,1044,1048,1044,978,972,935,999,984,999,935,908,936,1060,1057,1060,936,939,945,1030,1036,1030,945,947,922,1038,1009,1038,922,949,950,1042,1051,1042,950,953,959,1017,990,1017,959,956,917,1055,1012,1055,917,928,905,998,996,998,905,907,909,1002,1000,1002,909,911,957,986,1018,986,957,887,913,1005,1004,1005,913,914,921,1010,1008,1010,921,923,929,1040,1056,1040,929,931,974,1050,1046,1050,974,980,915,1058,1006,1058,915,937,901,1052,994,1052,901,951,1066,1072,1074,1072,1066,1062,324,201,278,201,324,873,306,1063,326,1063,306,836,302,299,300,299,302,301,1064,1075,1068,1075,1064,1067,874,1069,1070,1069,874,1065,325,1071,1073,1071,325,323,337,187,202,337,202,269,337,269,218,337,218,267,337,267,217,337,217,261,337,261,216,337,216,274,337,274,279,337,279,339,339,279,298,339,298,340,843,339,1076,339,843,337,1080,1088,1086,1088,1080,867,342,344,345,344,342,343,1078,1087,1082,1087,1078,1081,341,1084,1089,1084,341,338,1077,1083,1085,1083,1077,1079,189,353,186,353,189,352,1093,1100,1094,1100,1093,1102,186,354,183,354,186,353,1090,1102,1093,1102,1090,1103,1099,1101,349,1101,1099,1097,354,349,350,349,354,1099,1182,1172,1181,1172,1182,1183,845,576,842,576,845,374,12,23,18,23,12,14,569,372,568,372,569,10,403,574,396,574,403,1121,376,354,183,354,376,350,1091,1124,849,2,846,848,846,2,4,1107,18,1105,18,1107,12,830,388,378,388,830,385,362,582,369,582,362,598,1111,1096,852,1096,1111,391,1152,861,360,861,1152,346,366,598,362,598,366,180,847,379,1115,1114,573,572,573,1114,566,865,374,845,374,865,359,602,368,24,368,602,363,14,371,23,371,14,16,585,17,15,17,585,357,182,363,602,363,182,365,356,13,575,13,356,579,369,579,356,579,369,582,4,854,846,854,4,6,832,1144,1118,1153,1123,1092,1123,1153,377,829,1149,831,567,1165,1129,1165,567,565,183,390,1127,390,183,354,1117,380,1138,380,1117,1143,1116,1140,361,1140,1116,1126,375,385,830,385,375,384,1109,381,1108,381,1109,382,827,384,375,384,827,383,835,5,3,5,835,833,373,835,355,835,373,838,1160,1154,389,1154,1160,1157,1150,350,386,350,1150,354,1137,1166,1169,1166,1137,1159,1156,392,1161,1155,392,1156,1154,392,1155,1157,392,1154,1157,1158,392,360,838,373,838,360,861,0,848,367,848,0,2,1145,1170,1146,1170,1145,1162,348,359,865,359,348,364,1128,1167,1141,1167,1128,1151,560,391,1111,391,560,563,1142,1104,1125,1104,1142,1168,1108,393,1106,393,1108,381,355,3,1,3,355,835,833,7,5,7,833,842,6,370,854,370,6,8,1095,387,351,387,1095,1163,579,394,13,394,579,395,396,11,397,11,396,574,1184,404,405,404,1184,1186,853,1100,1094,1100,853,1098,1094,1134,1131,1134,1094,1100,1119,410,400,410,1119,1120,411,418,417,418,411,1194,1195,1189,550,1195,550,553,1195,553,415,1195,415,1193,402,397,558,397,402,396,1174,407,1173,407,1174,406,403,1122,1121,1122,403,412,406,409,407,409,406,408,401,1178,1180,401,549,1178,1178,549,1188,399,558,398,558,399,402,1185,1180,1175,1185,518,1180,1180,518,401,452,455,433,455,452,461,417,1211,423,1211,417,418,1202,423,422,423,1202,417,401,518,538,401,538,536,401,536,490,401,490,444,401,444,427,401,427,478,401,478,426,401,426,468,401,474,414,401,425,474,401,468,425,1187,1192,537,537,1192,535,535,1192,1205,1205,1192,416,1196,510,1198,510,1196,552,1191,417,1202,417,1191,411,465,1215,420,431,1215,465,469,1215,431,432,1215,469,477,1215,432,1233,1215,477,1232,1215,1233,489,1215,1232,419,1215,489,1200,1215,419,509,424,421,492,424,509,1305,424,492,434,424,1305,466,424,434,435,424,466,480,424,435,1300,424,480,482,424,1300,420,424,482,1215,424,420,1240,1311,1331,1311,1240,476,439,1220,1210,1220,439,463,414,464,441,464,414,474,474,445,464,445,474,425,1236,497,1327,497,1236,1254,450,436,1228,436,450,460,468,448,470,448,468,426,470,449,471,449,470,448,471,1224,1221,1224,471,449,478,451,1262,451,478,427,1262,452,475,452,1262,451,490,437,488,437,490,413,1248,495,503,495,1248,1246,449,1223,1224,1223,449,475,425,470,445,470,425,468,460,1209,436,1209,460,440,486,453,484,453,486,428,484,454,483,454,484,453,483,1227,485,1227,483,454,473,456,467,456,473,429,467,457,472,457,467,456,472,1229,1226,1229,472,457,479,459,462,459,479,430,462,460,450,460,462,459,1193,415,442,1193,442,443,1193,443,1213,1193,1213,1212,481,441,447,441,481,414,1294,1363,541,1363,1294,1296,427,458,451,458,427,444,1205,416,1218,1218,416,438,438,416,1207,1207,416,1201,440,1210,1209,1210,440,439,463,1222,1220,1222,463,446,487,1208,1206,1208,487,1288,447,439,440,439,447,441,464,446,463,446,464,445,475,433,1223,433,475,452,426,1262,448,1262,426,478,446,1221,1222,1221,446,471,1317,438,500,517,438,1317,1218,438,517,454,1226,1227,1226,454,472,430,447,459,447,430,481,1255,498,1345,498,1255,1256,457,1228,1229,1228,457,450,429,462,456,462,429,479,1263,520,521,520,1263,1264,1278,1361,529,1361,1278,1298,1276,1357,526,1357,1276,1295,428,467,453,467,428,473,458,487,461,487,458,488,494,485,1306,485,494,483,461,1206,455,1206,461,487,491,484,493,484,491,486,444,488,458,488,444,490,508,494,507,494,508,493,507,1306,1225,1306,507,494,510,493,508,493,510,491,1284,1225,1214,1225,1284,507,1272,496,524,496,1272,1290,546,1313,545,1313,546,1312,1343,542,501,542,1343,1341,1198,508,1230,508,1198,510,543,540,523,540,543,528,533,522,534,522,533,530,506,1383,548,1383,506,1346,1351,519,525,519,1351,1349,1367,502,539,502,1367,547,532,1319,531,1319,532,499,1359,544,527,544,1359,1358,504,515,505,515,504,516,1309,1377,1379,1377,1309,1307,1268,1333,1389,1333,1268,1242,1270,1352,1355,1352,1270,1273,1282,1321,1371,1321,1282,1285,1292,1356,1353,1356,1292,1271,1297,1365,1364,1365,1297,1274,1216,1318,1315,1216,1391,1318,1216,1219,1391,1260,1344,1369,1344,1260,1249,1291,1354,1350,1354,1291,1293,443,1323,1322,1323,443,442,1299,1337,1362,1337,1299,1250,1301,1375,1373,1375,1301,1303,1257,1325,1384,1325,1257,1234,1308,1374,1378,1374,1308,1302,1265,1329,1314,1329,1265,1238,1266,1390,1387,1390,1266,1269,1275,1360,1366,1360,1275,1277,1252,1368,1339,1368,1252,1279,1280,1372,1381,1372,1280,1283,1289,1347,1320,1347,1289,1286,1247,1385,1342,1385,1247,1258,1235,1328,1326,1328,1235,1237,1239,1332,1330,1332,1239,1241,1287,1316,1348,1316,1287,1217,1243,1335,1334,1335,1243,1244,1251,1340,1338,1340,1251,1253,1259,1370,1386,1370,1259,1261,1304,1380,1376,1380,1304,1310,1245,1388,1336,1388,1245,1267,1231,1382,1324,1382,1231,1281,1396,1402,1404,1402,1396,1392,536,413,490,413,536,1203,518,1393,538,1393,518,1185,514,511,512,511,514,513,1394,1405,1398,1405,1394,1397,1204,1399,1400,1399,1204,1395,537,1401,1403,1401,537,535,549,401,414,549,414,481,549,481,430,549,430,479,549,479,429,549,429,473,549,473,551,551,473,428,551,428,486,551,486,552,552,486,491,552,491,510,1188,551,1406,551,1188,549,1410,1418,1416,1418,1410,1197,554,556,557,556,554,555,1408,1417,1412,1417,1408,1411,553,1414,1419,1414,553,550,1407,1413,1415,1413,1407,1409,1190,1176,1179,1176,1190,1420,1421,1181,1177,1181,1421,1182,400,358,1119,358,400,399,1129,383,827,383,1129,1165,828,1149,829,1147,382,1109,382,1147,1171,1139,1148,1110,1113,1422,1112,1422,1113,559,1131,564,561,564,1131,1134,1164,1426,1135,1426,1164,1425,572,563,560,563,572,573,559,1424,1422,1424,559,571,1136,1169,562,1169,1136,1137,1106,566,1114,566,1106,393,1133,1122,412,1122,1133,1130,570,565,567,565,570,1427,571,568,1424,568,571,569,561,1427,570,1427,561,564,1425,562,1426,562,1425,1136,1428,412,1199,412,1428,1133,1132,410,1120,410,1132,1423,1423,1199,410,1199,1423,1428]}
var cornerBottomMeshBuffer={"positions":[1.0,1.0,-0.46331003308296204,1.0010395050048828,0.0,-0.46331003308296204,0.9999999403953552,1.0,-1.0,0.9999999403953552,0.0,-1.0,1.0,0.943669855594635,-0.46331003308296204,0.0,0.0,-0.0,0.9999999403953552,0.9436699748039246,-1.0,0.0,1.0,-0.0,0.5555499792098999,0.0,0.006593823432922363,0.5555499792098999,1.0,-0.0,0.0,0.9436699748039246,-0.0,0.5555499792098999,0.9436699748039246,-0.0,0.5555499792098999,0.9099599719047546,0.006593778729438782,0.0,0.9099599719047546,-0.0,0.9999999403953552,0.9099599719047546,-1.0,1.0010395050048828,0.9099599719047546,-0.46331003308296204,1.0230965614318848,0.943669855594635,-0.46331003308296204,1.0299999713897705,0.9436699748039246,-1.0,0.0,0.9436699748039246,0.029999999329447746,0.5555499792098999,0.9436699748039246,0.029999999329447746,0.5555499792098999,0.9099599719047546,0.029999999329447746,0.0,0.9099599719047546,0.029999999329447746,1.0299999713897705,0.9099599719047546,-1.0,1.0230965614318848,0.9099599719047546,-0.46331003308296204,1.0010395050048828,0.9099599719047546,-0.46331003308296204,1.0010395050048828,0.9099599719047546,-0.46331003308296204,1.0010395050048828,0.0,-0.46331003308296204,0.5555499792098999,0.9436699748039246,-0.0,0.5555499792098999,0.9436699748039246,-0.0,0.5555499792098999,1.0,-0.0,1.0,0.943669855594635,-0.46331003308296204,1.0,0.943669855594635,-0.46331003308296204,1.0,1.0,-0.46331003308296204,0.5555499792098999,0.9099599719047546,0.006593778729438782,0.5555499792098999,0.9099599719047546,0.006593778729438782,0.5555499792098999,0.0,0.006593823432922363,0.9999999403953552,0.9436699748039246,-1.0,0.9999999403953552,0.9436699748039246,-1.0,0.0,0.9436699748039246,-0.0,0.0,0.9436699748039246,-0.0,0.9999999403953552,0.9099599719047546,-1.0,0.9999999403953552,0.9099599719047546,-1.0,0.0,0.9099599719047546,-0.0,0.0,0.9099599719047546,-0.0,1.0299999713897705,0.9436699748039246,-1.0,1.0299999713897705,0.9436699748039246,-1.0,0.0,0.9099599719047546,0.029999999329447746,0.0,0.9099599719047546,0.029999999329447746,0.0,0.9436699748039246,0.029999999329447746,0.0,0.9436699748039246,0.029999999329447746,1.0299999713897705,0.9099599719047546,-1.0,1.0299999713897705,0.9099599719047546,-1.0,1.0230965614318848,0.943669855594635,-0.46331003308296204,1.0230965614318848,0.943669855594635,-0.46331003308296204,0.5555499792098999,0.9436699748039246,0.029999999329447746,0.5555499792098999,0.9436699748039246,0.029999999329447746,0.5555499792098999,0.9099599719047546,0.029999999329447746,0.5555499792098999,0.9099599719047546,0.029999999329447746,1.0230965614318848,0.9099599719047546,-0.46331003308296204,1.0230965614318848,0.9099599719047546,-0.46331003308296204],"normals":[1.0,0.0,-0.0,0.999969482421875,0.0,-0.0019226660951972008,1.0,0.0,-0.0,0.999969482421875,0.0,-0.0019226660951972008,1.0,0.0,-0.0,-0.01184118166565895,0.0,0.999908447265625,0.999969482421875,0.0,-0.0,0.0,0.0,1.0,-0.01184118166565895,0.0,0.999908447265625,0.0,0.0,1.0,0.0,0.0,1.0,0.7216406464576721,0.0,0.6922513246536255,-0.01184118166565895,0.0,0.999908447265625,-0.01184118166565895,0.0,0.999908447265625,0.999969482421875,0.0,-0.0019226660951972008,0.999969482421875,0.0,-0.0019226660951972008,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.7257912158966064,0.0,0.6878871917724609,0.0,-1.0,-0.0,0.0,0.0,-1.0,0.999908447265625,0.0,0.012848292477428913,0.7256996631622314,0.0,0.6879787445068359,0.0,-1.0,-0.0,0.7256996631622314,0.0,0.6879787445068359,0.0,0.0,1.0,0.0,0.999969482421875,-0.0,0.7216406464576721,0.0,0.6922513246536255,0.7216406464576721,0.0,0.6922513246536255,0.0,0.999969482421875,-0.0,0.7216406464576721,0.0,0.6922513246536255,0.7256996631622314,0.0,0.6879787445068359,0.0,-1.0,-0.0,0.7256996631622314,0.0,0.6879787445068359,0.0,0.0,-1.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,-1.0,-0.0,-1.0,0.0,-0.0,0.0,-1.0,-0.0,0.999908447265625,0.0,0.012848292477428913,0.0,1.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.999908447265625,0.0,0.012848292477428913,0.0,-1.0,-0.0,0.999908447265625,0.0,0.012848292477428913,0.7257912158966064,0.0,0.6878871917724609,0.7257912158966064,0.0,0.6878871917724609,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.7257912158966064,0.0,0.6878871917724609,0.0,-1.0,-0.0],"indices":[2,4,0,4,2,6,11,32,30,32,11,29,10,9,27,9,10,7,1,14,3,14,1,15,5,12,8,12,5,13,35,24,26,24,35,33,31,19,28,19,31,16,28,18,39,18,28,19,36,22,17,22,36,40,23,44,50,44,23,52,20,53,58,53,20,54,46,55,56,55,46,48,31,45,16,45,31,37,41,59,51,59,41,25,34,59,25,59,34,57,43,57,34,57,43,21,38,47,42,47,38,49]}
var doorMeshBuffer={"positions":[1.0,0.0,2.9802322387695312e-08,0.0,0.0,2.9802322387695312e-08,1.0,1.0,-2.9802322387695312e-08,0.0,1.0,-2.9802322387695312e-08,0.23248407244682312,0.0,2.9802322387695312e-08,0.23248407244682312,1.0,-2.9802322387695312e-08,0.7625842094421387,1.0,-2.9802322387695312e-08,0.7625842094421387,0.0,2.9802322387695312e-08,0.4975341558456421,1.0,-2.9802322387695312e-08,0.4975341558456421,0.0,2.9802322387695312e-08,0.7625842094421387,0.8320990800857544,-1.9794647698745393e-08,0.23248407244682312,0.8320990800857544,-1.9794647698745393e-08,0.0,0.8320990800857544,-1.9794647698745393e-08,1.0,0.8320990800857544,-1.9794647698745393e-08,0.9439966678619385,0.8320990800857544,0.04999998211860657,0.7625842094421387,0.8320990800857544,0.0350060909986496,0.4975341558456421,0.8320990800857544,-1.9794647698745393e-08,0.0,0.288002610206604,1.263603088830223e-08,0.23248407244682312,0.788307785987854,-1.718448139342854e-08,1.0,0.788307785987854,-1.718448139342854e-08,0.7625842094421387,0.788307785987854,-1.718448139342854e-08,0.0,0.788307785987854,-1.718448139342854e-08,0.45448148250579834,0.788307785987854,0.0350060909986496,0.4975341558456421,0.288002610206604,0.0350060909986496,0.45448148250579834,0.0,0.0350060909986496,0.23248407244682312,0.8320990800857544,0.0350060909986496,0.7625842094421387,0.3354616165161133,9.807252787652487e-09,1.0,0.3354616165161133,9.807252787652487e-09,0.23248407244682312,0.3354616165161133,9.807252787652487e-09,0.2826286852359772,0.39028602838516235,0.0350060909986496,0.2826286852359772,0.288002610206604,0.0350060909986496,1.0,0.39028602838516235,6.539462304999688e-09,0.9439966678619385,0.39028602838516235,0.05000000819563866,0.2826286852359772,0.8320990800857544,-1.9794647698745393e-08,0.2826286852359772,0.0,2.9802322387695312e-08,0.23248407244682312,0.39028602838516235,0.0350060909986496,0.17159539461135864,0.288002610206604,1.263603088830223e-08,0.7186554074287415,0.0,0.0350060909986496,0.0,0.3354616165161133,9.807252787652487e-09,0.2826286852359772,0.8320990800857544,0.0350060909986496,0.2826286852359772,0.788307785987854,0.0350060909986496,0.5420837998390198,0.3354616165161133,0.0350060909986496,0.7186554074287415,0.8320990800857544,0.0350060909986496,0.7625842094421387,0.288002610206604,1.263603088830223e-08,1.0,0.288002610206604,1.263603088830223e-08,0.23248407244682312,0.288002610206604,1.263603088830223e-08,0.45448148250579834,0.0,2.9802322387695312e-08,0.0,0.39028602838516235,6.539462304999688e-09,0.23248407244682312,0.39028602838516235,6.539462304999688e-09,0.7625842094421387,0.39028602838516235,6.539462304999688e-09,0.2826286852359772,1.0,-2.9802322387695312e-08,0.17159539461135864,0.39028602838516235,6.539462304999688e-09,0.23248407244682312,0.288002610206604,0.0350060909986496,0.4975341558456421,0.39028602838516235,0.0350060909986496,0.45448148250579834,1.0,-2.9802322387695312e-08,0.45448148250579834,0.39028602838516235,0.0350060909986496,0.2826286852359772,0.3354616165161133,0.0350060909986496,0.7625842094421387,0.39028602838516235,0.0350060909986496,0.45448148250579834,0.8320990800857544,-1.9794647698745393e-08,0.8506578207015991,0.288002610206604,1.263603088830223e-08,0.2826286852359772,0.0,0.0350060909986496,0.4975341558456421,0.788307785987854,0.0350060909986496,0.4975341558456421,0.3354616165161133,0.037350915372371674,0.23248407244682312,0.3354616165161133,0.0350060909986496,0.8506578207015991,0.39028602838516235,6.539462304999688e-09,0.8506578207015991,0.3354616165161133,9.807252787652487e-09,0.8506578207015991,0.788307785987854,-1.718448139342854e-08,0.7186554074287415,0.788307785987854,0.0350060909986496,0.5420837998390198,1.0,-2.9802322387695312e-08,0.5420837998390198,0.0,2.9802322387695312e-08,0.5420837998390198,0.8320990800857544,-1.9794647698745393e-08,0.7186554074287415,0.39028602838516235,0.0350060909986496,0.23248407244682312,0.788307785987854,0.0350060909986496,0.7625842094421387,0.788307785987854,0.0350060909986496,0.7625842094421387,0.3354616165161133,0.0350060909986496,0.7625842094421387,0.288002610206604,0.0350060909986496,0.8506578207015991,0.8320990800857544,-1.9794647698745393e-08,0.8506578207015991,1.0,-2.9802322387695312e-08,0.8506578207015991,0.0,2.9802322387695312e-08,0.7186554074287415,0.3354616165161133,0.0350060909986496,0.7186554074287415,0.288002610206604,0.0350060909986496,0.5420837998390198,0.8320990800857544,0.0350060909986496,0.5420837998390198,0.0,0.0350060909986496,0.5420837998390198,0.288002610206604,0.0350060909986496,0.5420837998390198,0.39028602838516235,0.0350060909986496,0.5420837998390198,0.788307785987854,0.0350060909986496,0.7186554074287415,0.8320990800857544,-1.9794647698745393e-08,0.7186554074287415,0.0,2.9802322387695312e-08,0.7186554074287415,1.0,-2.9802322387695312e-08,0.4975341558456421,0.8320990800857544,0.0350060909986496,0.45448148250579834,0.3354616165161133,0.0350060909986496,0.45448148250579834,0.288002610206604,0.0350060909986496,0.45448148250579834,0.8320990800857544,0.0350060909986496,0.4975341558456421,0.0,0.0350060909986496,0.7625842094421387,0.0,0.0350060909986496,0.23248407244682312,0.0,0.0350060909986496,0.08205319941043854,2.980232949312267e-09,0.05000003054738045,0.17159539461135864,0.8320990800857544,-1.9794647698745393e-08,0.17159539461135864,0.3354616165161133,9.807252787652487e-09,0.08205319941043854,0.8320990800857544,0.04999998211860657,0.8506578207015991,0.39028602838516235,0.05000000819563866,0.8506578207015991,0.3354616165161133,0.050000011920928955,0.8506578207015991,0.788307785987854,0.04999998211860657,0.8506578207015991,0.8320990800857544,0.04999998211860657,0.8506578207015991,2.980232949312267e-09,0.05000003054738045,0.17159539461135864,0.8320990800857544,0.04999998211860657,0.17159539461135864,0.3354616165161133,0.050000011920928955,0.9439966678619385,0.39028602838516235,6.539462304999688e-09,0.9439966678619385,0.288002610206604,1.263603088830223e-08,0.9439966678619385,1.0,-2.9802322387695312e-08,0.9439966678619385,0.0,2.9802322387695312e-08,0.08205319941043854,0.788307785987854,-1.718448139342854e-08,0.08205319941043854,0.288002610206604,0.050000011920928955,0.08205319941043854,0.3354616165161133,0.050000011920928955,0.08205319941043854,0.0,2.9802322387695312e-08,0.08205319941043854,1.0,-2.9802322387695312e-08,0.08205319941043854,0.8320990800857544,-1.9794647698745393e-08,0.9439966678619385,0.8320990800857544,-1.9794647698745393e-08,0.9439966678619385,0.788307785987854,-1.718448139342854e-08,0.9439966678619385,0.3354616165161133,9.807252787652487e-09,0.08205319941043854,0.788307785987854,0.04999998211860657,0.17159539461135864,0.0,2.9802322387695312e-08,0.17159539461135864,0.788307785987854,-1.718448139342854e-08,0.17159539461135864,1.0,-2.9802322387695312e-08,0.08205319941043854,0.288002610206604,1.263603088830223e-08,0.08205319941043854,0.3354616165161133,9.807252787652487e-09,0.08205319941043854,0.39028602838516235,6.539462304999688e-09,0.17159539461135864,0.288002610206604,0.050000011920928955,0.17159539461135864,0.39028602838516235,0.05000000819563866,0.8506578207015991,0.288002610206604,0.050000011920928955,0.08205319941043854,0.39028602838516235,0.05000000819563866,0.9439966678619385,0.288002610206604,0.050000011920928955,0.9439966678619385,2.980232949312267e-09,0.05000003054738045,0.17159539461135864,0.788307785987854,0.04999998211860657,0.17159539461135864,2.980232949312267e-09,0.05000003054738045,0.9439966678619385,0.3354616165161133,0.050000011920928955,0.9439966678619385,0.788307785987854,0.04999998211860657,1.0,0.8923339247703552,-2.3384922442915013e-08,0.23248407244682312,0.8923339247703552,-2.3384922442915013e-08,0.7625842094421387,0.8923339247703552,-2.3384922442915013e-08,0.4975341558456421,0.8923339247703552,-2.3384922442915013e-08,0.0,0.8923339247703552,-2.3384922442915013e-08,0.08205319941043854,0.8923339247703552,0.04999997839331627,0.8506578207015991,0.8923339247703552,-2.3384922442915013e-08,0.2826286852359772,0.8923339247703552,-2.3384922442915013e-08,0.5420837998390198,0.8923339247703552,-2.3384922442915013e-08,0.45448148250579834,0.8923339247703552,-2.3384922442915013e-08,0.7186554074287415,0.8923339247703552,-2.3384922442915013e-08,0.8506578207015991,0.8923339247703552,0.04999997839331627,0.17159539461135864,0.8923339247703552,0.04999997839331627,0.9439966678619385,0.8923339247703552,-2.3384922442915013e-08,0.17159539461135864,0.8923339247703552,-2.3384922442915013e-08,0.08205319941043854,0.8923339247703552,-2.3384922442915013e-08,0.9439966678619385,0.8923339247703552,0.04999997839331627,0.7186554074287415,0.8923339247703552,0.04999997839331627,0.2826286852359772,0.8923339247703552,0.04999997839331627,0.5420837998390198,0.8923339247703552,0.04999997839331627,0.45448148250579834,0.8923339247703552,0.04999997839331627,0.45448148250579834,0.8320990800857544,0.04999998211860657,0.5420837998390198,0.8320990800857544,0.04999998211860657,0.4975341558456421,0.8923339247703552,-2.3384922442915013e-08,0.7625842094421387,0.8923339247703552,-2.3384922442915013e-08,0.23248407244682312,0.8923339247703552,-2.3384922442915013e-08,0.2826286852359772,0.8320990800857544,-1.9794647698745393e-08,0.4975341558456421,0.8320990800857544,-1.9794647698745393e-08,0.23248407244682312,0.8320990800857544,-1.9794647698745393e-08,0.7625842094421387,0.8320990800857544,-1.9794647698745393e-08,0.7186554074287415,0.8320990800857544,0.04999998211860657,0.7625842094421387,0.8320990800857544,0.04999998211860657,0.23248407244682312,0.8320990800857544,0.04999998211860657,0.7186554074287415,0.8320990800857544,-1.9794647698745393e-08,0.5420837998390198,0.8320990800857544,-1.9794647698745393e-08,0.45448148250579834,0.8320990800857544,-1.9794647698745393e-08,0.45448148250579834,0.8923339247703552,-2.3384922442915013e-08,0.5420837998390198,0.8923339247703552,-2.3384922442915013e-08,0.2826286852359772,0.8923339247703552,-2.3384922442915013e-08,0.4975341558456421,0.8320990800857544,0.04999998211860657,0.2826286852359772,0.8320990800857544,0.04999998211860657,0.23248407244682312,0.8923339247703552,0.04999997839331627,0.7625842094421387,0.8923339247703552,0.04999997839331627,0.4975341558456421,0.8923339247703552,0.04999997839331627,0.7186554074287415,0.8923339247703552,-2.3384922442915013e-08,0.45448148250579834,0.788307785987854,0.015348892658948898,0.45448148250579834,0.0,0.015348892658948898,0.2826286852359772,0.39028602838516235,0.015348892658948898,0.2826286852359772,0.288002610206604,0.015348892658948898,0.7186554074287415,0.0,0.015348892658948898,0.2826286852359772,0.788307785987854,0.015348892658948898,0.45448148250579834,0.39028602838516235,0.015348892658948898,0.2826286852359772,0.0,0.015348892658948898,0.7186554074287415,0.788307785987854,0.015348892658948898,0.7186554074287415,0.39028602838516235,0.015348892658948898,0.7186554074287415,0.288002610206604,0.015348892658948898,0.5420837998390198,0.0,0.015348892658948898,0.5420837998390198,0.288002610206604,0.015348892658948898,0.5420837998390198,0.39028602838516235,0.015348892658948898,0.5420837998390198,0.788307785987854,0.015348892658948898,0.45448148250579834,0.288002610206604,0.015348892658948898,0.9439966678619385,0.7087034583091736,-1.2439693719556999e-08,1.0,0.7087034583091736,-1.243969283137858e-08,0.08205319941043854,0.7087034583091736,-1.2439693719556999e-08,0.0,0.7087034583091736,-1.243969283137858e-08,0.23248407244682312,0.7087034583091736,-1.2439693719556999e-08,0.7625842094421387,0.7087034583091736,-1.2439693719556999e-08,0.8506578207015991,0.7087034583091736,-1.2439693719556999e-08,0.4975341558456421,0.7087034583091736,0.0350060909986496,0.7625842094421387,0.7087034583091736,0.0350060909986496,0.23248407244682312,0.7087034583091736,0.0350060909986496,0.2826286852359772,0.7087034583091736,0.035009998828172684,0.5420837998390198,0.7087034583091736,0.035009998828172684,0.45448148250579834,0.7087034583091736,0.035009998828172684,0.7186554074287415,0.7087034583091736,0.035009998828172684,0.8506578207015991,0.7087034583091736,0.049999989569187164,0.17159539461135864,0.7087034583091736,0.049999989569187164,0.17159539461135864,0.7087034583091736,-1.2439693719556999e-08,0.9439966678619385,0.7087034583091736,0.049999989569187164,0.08205319941043854,0.7087034583091736,0.049999989569187164,0.2826286852359772,0.7087034583091736,0.015348892658948898,0.5420837998390198,0.7087034583091736,0.015348892658948898,0.45448148250579834,0.7087034583091736,0.015348892658948898,0.7186554074287415,0.7087034583091736,0.015348892658948898,0.2826286852359772,0.6768617033958435,0.015348892658948898,0.08205319941043854,0.6768617033958435,0.049999989569187164,0.9439966678619385,0.6768617033958435,0.049999989569187164,0.17159539461135864,0.6768617033958435,-1.054177811710133e-08,0.0,0.6768617033958435,-1.054177722892291e-08,0.08205319941043854,0.6768617033958435,-1.054177811710133e-08,1.0,0.6768617033958435,-1.054177722892291e-08,0.9439966678619385,0.6768617033958435,-1.054177811710133e-08,0.5420837998390198,0.6768617033958435,0.035009998828172684,0.2826286852359772,0.6768617033958435,0.035009998828172684,0.23248407244682312,0.6768617033958435,0.0350060909986496,0.7625842094421387,0.6768617033958435,0.0350060909986496,0.17159539461135864,0.6768617033958435,0.049999989569187164,0.8506578207015991,0.6768617033958435,0.049999989569187164,0.7186554074287415,0.6768617033958435,0.035009998828172684,0.45448148250579834,0.6768617033958435,0.035009998828172684,0.7186554074287415,0.6768617033958435,0.015348892658948898,0.45448148250579834,0.6768617033958435,0.015348892658948898,0.5420837998390198,0.6768617033958435,0.015348892658948898,0.4975341558456421,0.6768617033958435,0.0350060909986496,0.8506578207015991,0.6768617033958435,-1.054177811710133e-08,0.7625842094421387,0.6768617033958435,-1.054177811710133e-08,0.23248407244682312,0.6768617033958435,-1.054177811710133e-08,0.3685552179813385,0.5335736274719238,0.019999997690320015,0.7186554074287415,0.7141358852386475,0.015348892658948898,0.6303696036338806,0.144001305103302,0.019999997690320015,0.6303696036338806,0.5335738658905029,0.019999997690320015,0.36855512857437134,0.7485055923461914,0.019999997690320015,0.6303696036338806,0.7485055923461914,0.019999997690320015,0.3685550391674042,0.14400123059749603,0.019999997690320015,0.7625842094421387,0.288002610206604,1.263603088830223e-08,0.7625842094421387,0.0,2.9802322387695312e-08,0.7625842094421387,0.0,2.9802322387695312e-08,0.23248407244682312,0.288002610206604,1.263603088830223e-08,0.23248407244682312,0.0,2.9802322387695312e-08,0.23248407244682312,0.0,2.9802322387695312e-08,0.5420837998390198,0.8320990800857544,-1.9794647698745393e-08,0.5420837998390198,0.8320990800857544,-1.9794647698745393e-08,0.4975341558456421,0.8320990800857544,-1.9794647698745393e-08,0.4975341558456421,0.8320990800857544,-1.9794647698745393e-08,0.8506578207015991,0.8320990800857544,-1.9794647698745393e-08,0.8506578207015991,0.8320990800857544,-1.9794647698745393e-08,0.8506578207015991,0.8320990800857544,-1.9794647698745393e-08,0.8506578207015991,0.8320990800857544,-1.9794647698745393e-08,0.7625842094421387,0.8320990800857544,-1.9794647698745393e-08,0.7625842094421387,0.8320990800857544,-1.9794647698745393e-08,0.7625842094421387,0.8320990800857544,-1.9794647698745393e-08,0.7625842094421387,0.8320990800857544,-1.9794647698745393e-08,0.9439966678619385,0.7087034583091736,-1.2439693719556999e-08,0.9439966678619385,0.788307785987854,-1.718448139342854e-08,0.2826286852359772,0.8320990800857544,-1.9794647698745393e-08,0.2826286852359772,0.8320990800857544,-1.9794647698745393e-08,0.23248407244682312,0.8320990800857544,-1.9794647698745393e-08,0.23248407244682312,0.8320990800857544,-1.9794647698745393e-08,0.23248407244682312,0.8320990800857544,-1.9794647698745393e-08,0.23248407244682312,0.8320990800857544,-1.9794647698745393e-08,0.7186554074287415,0.8320990800857544,-1.9794647698745393e-08,0.7186554074287415,0.8320990800857544,-1.9794647698745393e-08,0.23248407244682312,0.3354616165161133,9.807252787652487e-09,0.23248407244682312,0.788307785987854,-1.718448139342854e-08,0.7625842094421387,0.788307785987854,-1.718448139342854e-08,0.9439966678619385,0.0,2.9802322387695312e-08,0.9439966678619385,0.0,2.9802322387695312e-08,0.9439966678619385,0.288002610206604,1.263603088830223e-08,0.23248407244682312,0.39028602838516235,6.539462304999688e-09,0.45448148250579834,0.8320990800857544,-1.9794647698745393e-08,0.45448148250579834,0.8320990800857544,-1.9794647698745393e-08,0.8506578207015991,0.788307785987854,0.04999998211860657,0.8506578207015991,0.8320990800857544,0.04999998211860657,0.8506578207015991,0.8320990800857544,0.04999998211860657,0.8506578207015991,0.8320990800857544,0.04999998211860657,0.8506578207015991,0.8320990800857544,0.04999998211860657,0.08205319941043854,0.288002610206604,0.050000011920928955,0.08205319941043854,0.3354616165161133,0.050000011920928955,0.08205319941043854,0.7087034583091736,-1.2439693719556999e-08,0.08205319941043854,0.788307785987854,-1.718448139342854e-08,0.8506578207015991,0.288002610206604,0.050000011920928955,0.8506578207015991,0.3354616165161133,0.050000011920928955,0.23248407244682312,0.7087034583091736,-1.2439693719556999e-08,0.7625842094421387,0.7087034583091736,-1.2439693719556999e-08,0.7625842094421387,0.3354616165161133,9.807252787652487e-09,0.7625842094421387,0.39028602838516235,6.539462304999688e-09,0.9439966678619385,0.3354616165161133,0.050000011920928955,0.9439966678619385,0.39028602838516235,0.05000000819563866,0.23248407244682312,0.39028602838516235,0.0350060909986496,0.23248407244682312,0.3354616165161133,0.0350060909986496,0.8506578207015991,0.3354616165161133,9.807252787652487e-09,0.8506578207015991,0.39028602838516235,6.539462304999688e-09,0.8506578207015991,0.0,2.9802322387695312e-08,0.8506578207015991,0.0,2.9802322387695312e-08,0.8506578207015991,0.288002610206604,1.263603088830223e-08,0.8506578207015991,0.7087034583091736,-1.2439693719556999e-08,0.8506578207015991,0.788307785987854,-1.718448139342854e-08,0.7625842094421387,0.8320990800857544,0.0350060909986496,0.7625842094421387,0.8320990800857544,0.0350060909986496,0.7625842094421387,0.39028602838516235,0.0350060909986496,0.7625842094421387,0.3354616165161133,0.0350060909986496,0.45448148250579834,0.0,0.0350060909986496,0.45448148250579834,0.0,0.0350060909986496,0.45448148250579834,0.0,0.0350060909986496,0.4975341558456421,0.0,0.0350060909986496,0.23248407244682312,0.288002610206604,0.0350060909986496,0.7625842094421387,0.788307785987854,0.0350060909986496,0.23248407244682312,0.0,0.0350060909986496,0.23248407244682312,0.0,0.0350060909986496,0.7625842094421387,0.0,0.0350060909986496,0.7625842094421387,0.0,0.0350060909986496,0.5420837998390198,0.0,0.0350060909986496,0.5420837998390198,0.0,0.0350060909986496,0.5420837998390198,0.0,0.0350060909986496,0.5420837998390198,0.8320990800857544,0.0350060909986496,0.4975341558456421,0.8320990800857544,0.0350060909986496,0.7186554074287415,0.8320990800857544,0.0350060909986496,0.23248407244682312,0.8320990800857544,0.0350060909986496,0.23248407244682312,0.8320990800857544,0.0350060909986496,0.23248407244682312,0.788307785987854,0.0350060909986496,0.7625842094421387,0.288002610206604,0.0350060909986496,0.45448148250579834,0.8320990800857544,0.0350060909986496,0.2826286852359772,0.8320990800857544,0.0350060909986496,0.7625842094421387,0.7087034583091736,0.0350060909986496,0.23248407244682312,0.7087034583091736,0.0350060909986496,0.7186554074287415,0.0,0.0350060909986496,0.7186554074287415,0.0,0.0350060909986496,0.7186554074287415,0.0,0.0350060909986496,0.2826286852359772,0.0,0.0350060909986496,0.2826286852359772,0.0,0.0350060909986496,0.2826286852359772,0.0,0.0350060909986496,0.45448148250579834,0.788307785987854,0.0350060909986496,0.45448148250579834,0.788307785987854,0.0350060909986496,0.2826286852359772,0.788307785987854,0.0350060909986496,0.2826286852359772,0.788307785987854,0.0350060909986496,0.2826286852359772,0.288002610206604,0.0350060909986496,0.2826286852359772,0.288002610206604,0.0350060909986496,0.2826286852359772,0.7087034583091736,0.035009998828172684,0.2826286852359772,0.7087034583091736,0.035009998828172684,0.45448148250579834,0.39028602838516235,0.0350060909986496,0.45448148250579834,0.39028602838516235,0.0350060909986496,0.2826286852359772,0.39028602838516235,0.0350060909986496,0.2826286852359772,0.39028602838516235,0.0350060909986496,0.7186554074287415,0.288002610206604,0.0350060909986496,0.7186554074287415,0.288002610206604,0.0350060909986496,0.5420837998390198,0.288002610206604,0.0350060909986496,0.5420837998390198,0.288002610206604,0.0350060909986496,0.45448148250579834,0.288002610206604,0.0350060909986496,0.45448148250579834,0.288002610206604,0.0350060909986496,0.5420837998390198,0.7087034583091736,0.035009998828172684,0.5420837998390198,0.7087034583091736,0.035009998828172684,0.5420837998390198,0.788307785987854,0.0350060909986496,0.5420837998390198,0.788307785987854,0.0350060909986496,0.45448148250579834,0.7087034583091736,0.035009998828172684,0.45448148250579834,0.7087034583091736,0.035009998828172684,0.7186554074287415,0.7087034583091736,0.035009998828172684,0.7186554074287415,0.7087034583091736,0.035009998828172684,0.7186554074287415,0.788307785987854,0.0350060909986496,0.7186554074287415,0.788307785987854,0.0350060909986496,0.7186554074287415,0.39028602838516235,0.0350060909986496,0.7186554074287415,0.39028602838516235,0.0350060909986496,0.5420837998390198,0.39028602838516235,0.0350060909986496,0.5420837998390198,0.39028602838516235,0.0350060909986496,0.9439966678619385,0.8320990800857544,-1.9794647698745393e-08,0.9439966678619385,0.3354616165161133,9.807252787652487e-09,0.08205319941043854,0.8320990800857544,-1.9794647698745393e-08,0.08205319941043854,0.288002610206604,1.263603088830223e-08,0.08205319941043854,0.3354616165161133,9.807252787652487e-09,0.9439966678619385,0.39028602838516235,6.539462304999688e-09,0.08205319941043854,0.0,2.9802322387695312e-08,0.08205319941043854,0.0,2.9802322387695312e-08,0.8506578207015991,0.7087034583091736,0.049999989569187164,0.08205319941043854,0.39028602838516235,0.05000000819563866,0.08205319941043854,2.980232949312267e-09,0.05000003054738045,0.08205319941043854,2.980232949312267e-09,0.05000003054738045,0.17159539461135864,0.7087034583091736,0.049999989569187164,0.17159539461135864,0.788307785987854,0.04999998211860657,0.17159539461135864,0.3354616165161133,9.807252787652487e-09,0.17159539461135864,0.39028602838516235,6.539462304999688e-09,0.17159539461135864,0.0,2.9802322387695312e-08,0.17159539461135864,0.0,2.9802322387695312e-08,0.17159539461135864,0.288002610206604,1.263603088830223e-08,0.9439966678619385,0.788307785987854,0.04999998211860657,0.9439966678619385,0.8320990800857544,0.04999998211860657,0.17159539461135864,2.980232949312267e-09,0.05000003054738045,0.17159539461135864,2.980232949312267e-09,0.05000003054738045,0.8506578207015991,2.980232949312267e-09,0.05000003054738045,0.8506578207015991,2.980232949312267e-09,0.05000003054738045,0.17159539461135864,0.788307785987854,-1.718448139342854e-08,0.17159539461135864,0.8320990800857544,-1.9794647698745393e-08,0.17159539461135864,0.8320990800857544,-1.9794647698745393e-08,0.17159539461135864,0.8320990800857544,-1.9794647698745393e-08,0.17159539461135864,0.8320990800857544,-1.9794647698745393e-08,0.08205319941043854,0.788307785987854,0.04999998211860657,0.08205319941043854,0.8320990800857544,0.04999998211860657,0.08205319941043854,0.39028602838516235,6.539462304999688e-09,0.9439966678619385,0.288002610206604,0.050000011920928955,0.9439966678619385,2.980232949312267e-09,0.05000003054738045,0.9439966678619385,2.980232949312267e-09,0.05000003054738045,0.17159539461135864,0.7087034583091736,-1.2439693719556999e-08,0.17159539461135864,0.288002610206604,0.050000011920928955,0.17159539461135864,0.8320990800857544,0.04999998211860657,0.17159539461135864,0.8320990800857544,0.04999998211860657,0.08205319941043854,0.8923339247703552,-2.3384922442915013e-08,0.08205319941043854,0.8923339247703552,-2.3384922442915013e-08,0.17159539461135864,0.8923339247703552,-2.3384922442915013e-08,0.17159539461135864,0.8923339247703552,-2.3384922442915013e-08,0.8506578207015991,0.39028602838516235,0.05000000819563866,0.9439966678619385,0.7087034583091736,0.049999989569187164,0.08205319941043854,0.7087034583091736,0.049999989569187164,0.17159539461135864,0.3354616165161133,0.050000011920928955,0.17159539461135864,0.39028602838516235,0.05000000819563866,0.9439966678619385,0.8923339247703552,-2.3384922442915013e-08,0.9439966678619385,0.8923339247703552,-2.3384922442915013e-08,0.8506578207015991,0.8923339247703552,-2.3384922442915013e-08,0.8506578207015991,0.8923339247703552,-2.3384922442915013e-08,0.7186554074287415,0.8320990800857544,-1.9794647698745393e-08,0.7186554074287415,0.8320990800857544,-1.9794647698745393e-08,0.7625842094421387,0.8320990800857544,-1.9794647698745393e-08,0.7625842094421387,0.8320990800857544,-1.9794647698745393e-08,0.08205319941043854,0.8923339247703552,0.04999997839331627,0.08205319941043854,0.8923339247703552,0.04999997839331627,0.7625842094421387,0.8923339247703552,-2.3384922442915013e-08,0.7625842094421387,0.8923339247703552,-2.3384922442915013e-08,0.7625842094421387,0.8923339247703552,-2.3384922442915013e-08,0.7625842094421387,0.8923339247703552,-2.3384922442915013e-08,0.7186554074287415,0.8923339247703552,-2.3384922442915013e-08,0.7186554074287415,0.8923339247703552,-2.3384922442915013e-08,0.7186554074287415,0.8923339247703552,-2.3384922442915013e-08,0.7186554074287415,0.8923339247703552,-2.3384922442915013e-08,0.45448148250579834,0.8923339247703552,-2.3384922442915013e-08,0.45448148250579834,0.8923339247703552,-2.3384922442915013e-08,0.45448148250579834,0.8923339247703552,-2.3384922442915013e-08,0.45448148250579834,0.8923339247703552,-2.3384922442915013e-08,0.2826286852359772,0.8923339247703552,-2.3384922442915013e-08,0.2826286852359772,0.8923339247703552,-2.3384922442915013e-08,0.2826286852359772,0.8923339247703552,-2.3384922442915013e-08,0.2826286852359772,0.8923339247703552,-2.3384922442915013e-08,0.8506578207015991,0.8923339247703552,0.04999997839331627,0.8506578207015991,0.8923339247703552,0.04999997839331627,0.9439966678619385,0.8923339247703552,0.04999997839331627,0.9439966678619385,0.8923339247703552,0.04999997839331627,0.23248407244682312,0.8923339247703552,-2.3384922442915013e-08,0.23248407244682312,0.8923339247703552,-2.3384922442915013e-08,0.4975341558456421,0.8923339247703552,-2.3384922442915013e-08,0.4975341558456421,0.8923339247703552,-2.3384922442915013e-08,0.5420837998390198,0.8923339247703552,-2.3384922442915013e-08,0.5420837998390198,0.8923339247703552,-2.3384922442915013e-08,0.7625842094421387,0.8923339247703552,0.04999997839331627,0.7186554074287415,0.8923339247703552,0.04999997839331627,0.45448148250579834,0.8320990800857544,0.04999998211860657,0.4975341558456421,0.8320990800857544,0.04999998211860657,0.5420837998390198,0.8923339247703552,0.04999997839331627,0.2826286852359772,0.8320990800857544,0.04999998211860657,0.23248407244682312,0.8923339247703552,-2.3384922442915013e-08,0.23248407244682312,0.8923339247703552,-2.3384922442915013e-08,0.23248407244682312,0.8320990800857544,-1.9794647698745393e-08,0.23248407244682312,0.8320990800857544,-1.9794647698745393e-08,0.2826286852359772,0.8320990800857544,-1.9794647698745393e-08,0.2826286852359772,0.8320990800857544,-1.9794647698745393e-08,0.5420837998390198,0.8923339247703552,-2.3384922442915013e-08,0.5420837998390198,0.8923339247703552,-2.3384922442915013e-08,0.45448148250579834,0.8320990800857544,-1.9794647698745393e-08,0.45448148250579834,0.8320990800857544,-1.9794647698745393e-08,0.4975341558456421,0.8923339247703552,-2.3384922442915013e-08,0.4975341558456421,0.8923339247703552,-2.3384922442915013e-08,0.5420837998390198,0.8320990800857544,-1.9794647698745393e-08,0.5420837998390198,0.8320990800857544,-1.9794647698745393e-08,0.4975341558456421,0.8320990800857544,-1.9794647698745393e-08,0.4975341558456421,0.8320990800857544,-1.9794647698745393e-08,0.7186554074287415,0.8320990800857544,0.04999998211860657,0.5420837998390198,0.8320990800857544,0.04999998211860657,0.23248407244682312,0.8320990800857544,0.04999998211860657,0.7625842094421387,0.8320990800857544,0.04999998211860657,0.23248407244682312,0.8923339247703552,0.04999997839331627,0.4975341558456421,0.8923339247703552,0.04999997839331627,0.45448148250579834,0.8923339247703552,0.04999997839331627,0.2826286852359772,0.8923339247703552,0.04999997839331627,0.45448148250579834,0.788307785987854,0.015348892658948898,0.45448148250579834,0.788307785987854,0.015348892658948898,0.2826286852359772,0.788307785987854,0.015348892658948898,0.2826286852359772,0.788307785987854,0.015348892658948898,0.2826286852359772,0.0,0.015348892658948898,0.2826286852359772,0.0,0.015348892658948898,0.2826286852359772,0.288002610206604,0.015348892658948898,0.2826286852359772,0.288002610206604,0.015348892658948898,0.2826286852359772,0.7087034583091736,0.015348892658948898,0.2826286852359772,0.7087034583091736,0.015348892658948898,0.2826286852359772,0.7087034583091736,0.015348892658948898,0.45448148250579834,0.39028602838516235,0.015348892658948898,0.45448148250579834,0.39028602838516235,0.015348892658948898,0.2826286852359772,0.39028602838516235,0.015348892658948898,0.2826286852359772,0.39028602838516235,0.015348892658948898,0.7186554074287415,0.288002610206604,0.015348892658948898,0.7186554074287415,0.288002610206604,0.015348892658948898,0.5420837998390198,0.288002610206604,0.015348892658948898,0.5420837998390198,0.288002610206604,0.015348892658948898,0.45448148250579834,0.288002610206604,0.015348892658948898,0.45448148250579834,0.288002610206604,0.015348892658948898,0.5420837998390198,0.0,0.015348892658948898,0.5420837998390198,0.0,0.015348892658948898,0.5420837998390198,0.7087034583091736,0.015348892658948898,0.5420837998390198,0.7087034583091736,0.015348892658948898,0.5420837998390198,0.7087034583091736,0.015348892658948898,0.5420837998390198,0.788307785987854,0.015348892658948898,0.5420837998390198,0.788307785987854,0.015348892658948898,0.45448148250579834,0.0,0.015348892658948898,0.45448148250579834,0.0,0.015348892658948898,0.45448148250579834,0.7087034583091736,0.015348892658948898,0.45448148250579834,0.7087034583091736,0.015348892658948898,0.45448148250579834,0.7087034583091736,0.015348892658948898,0.7186554074287415,0.0,0.015348892658948898,0.7186554074287415,0.0,0.015348892658948898,0.7186554074287415,0.7141358852386475,0.015348892658948898,0.7186554074287415,0.788307785987854,0.015348892658948898,0.7186554074287415,0.788307785987854,0.015348892658948898,0.7186554074287415,0.39028602838516235,0.015348892658948898,0.7186554074287415,0.39028602838516235,0.015348892658948898,0.5420837998390198,0.39028602838516235,0.015348892658948898,0.5420837998390198,0.39028602838516235,0.015348892658948898,0.9439966678619385,0.6768617033958435,-1.054177811710133e-08,0.08205319941043854,0.6768617033958435,-1.054177811710133e-08,0.23248407244682312,0.6768617033958435,-1.054177811710133e-08,0.7625842094421387,0.6768617033958435,-1.054177811710133e-08,0.8506578207015991,0.6768617033958435,-1.054177811710133e-08,0.7625842094421387,0.6768617033958435,0.0350060909986496,0.23248407244682312,0.6768617033958435,0.0350060909986496,0.2826286852359772,0.6768617033958435,0.035009998828172684,0.2826286852359772,0.6768617033958435,0.035009998828172684,0.5420837998390198,0.6768617033958435,0.035009998828172684,0.5420837998390198,0.6768617033958435,0.035009998828172684,0.45448148250579834,0.6768617033958435,0.035009998828172684,0.45448148250579834,0.6768617033958435,0.035009998828172684,0.7186554074287415,0.6768617033958435,0.035009998828172684,0.7186554074287415,0.6768617033958435,0.035009998828172684,0.8506578207015991,0.6768617033958435,0.049999989569187164,0.17159539461135864,0.6768617033958435,0.049999989569187164,0.17159539461135864,0.6768617033958435,-1.054177811710133e-08,0.9439966678619385,0.6768617033958435,0.049999989569187164,0.08205319941043854,0.6768617033958435,0.049999989569187164,0.2826286852359772,0.6768617033958435,0.015348892658948898,0.2826286852359772,0.6768617033958435,0.015348892658948898,0.2826286852359772,0.6768617033958435,0.015348892658948898,0.5420837998390198,0.6768617033958435,0.015348892658948898,0.5420837998390198,0.6768617033958435,0.015348892658948898,0.5420837998390198,0.6768617033958435,0.015348892658948898,0.45448148250579834,0.6768617033958435,0.015348892658948898,0.45448148250579834,0.6768617033958435,0.015348892658948898,0.45448148250579834,0.6768617033958435,0.015348892658948898,0.7186554074287415,0.6768617033958435,0.015348892658948898,0.7186554074287415,0.6768617033958435,0.015348892658948898,0.7186554074287415,0.6768617033958435,0.015348892658948898,0.7186554074287415,0.7087034583091736,0.015348892658948898,0.7186554074287415,0.7087034583091736,0.015348892658948898,0.7186554074287415,0.7087034583091736,0.015348892658948898],"normals":[0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,-0.0002136295661330223,-0.012329477816820145,0.999908447265625,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.013122959062457085,-0.0008239997550845146,0.999908447265625,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,-0.0002136295661330223,0.010681478306651115,0.99993896484375,0.0,0.0,1.0,-0.009033478796482086,0.007110812701284885,0.999908447265625,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,1.0,-0.0004272591322660446,-0.0016479995101690292,0.999969482421875,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,-1.0,-0.0,0.008758812211453915,-0.008209479041397572,0.999908447265625,0.00872829370200634,0.007110812701284885,0.999908447265625,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,-0.013580736704170704,-0.0008239997550845146,0.9998779296875,-0.00906399730592966,-0.008209479041397572,0.999908447265625,0.0,1.0,-0.0,0.0,-1.0,-0.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.3162022829055786,0.0,0.9486678838729858,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.3333231508731842,0.6666463017463684,0.6666463017463684,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.48695334792137146,0.8734092116355896,-0.0,0.6496475338935852,0.7601855397224426,-0.0,0.0,1.0,-0.0,0.32160404324531555,0.9468672871589661,-0.0,0.0,-1.0,-0.0,0.269081711769104,0.9631031155586243,-0.0,0.6756187677383423,0.7372050881385803,-0.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.6536149382591248,0.7567979693412781,-0.0,0.5458235144615173,0.8378551602363586,-0.0,0.47932371497154236,0.8776207566261292,-0.0,0.4538407623767853,0.8910794258117676,-0.0,0.5191808938980103,0.8546403646469116,-0.0,0.3019196093082428,0.9533066749572754,-0.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.6272163987159729,0.7788018584251404,-0.0,0.0,-1.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,-1.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,-0.9989318251609802,-0.0023194067180156708,-0.045503098517656326,0.0,1.0,-0.0,0.0,-1.0,-0.0,1.0,0.0,-0.0,0.0,-1.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,6.103701889514923e-05,0.0,1.0,-3.0518509447574615e-05,0.0,1.0,0.3161717653274536,0.0,0.9486678838729858,0.3161717653274536,0.0,0.9486678838729858,-0.3161717653274536,0.0,0.9486678838729858,-0.3161717653274536,0.0,0.9486678838729858,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.999969482421875,0.0,-0.0,0.999969482421875,0.0,-0.0,-1.0,0.0,-0.0,6.103701889514923e-05,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-0.3161717653274536,0.0,0.9486678838729858,-0.999969482421875,0.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-0.9989318251609802,-0.0023194067180156708,-0.045503098517656326,0.0,0.0,0.999969482421875,0.0,0.0,1.0,0.0,0.0,0.999969482421875,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.5458235144615173,0.8378551602363586,-0.0,0.5458235144615173,0.8378551602363586,-0.0,0.5131687521934509,0.8582720160484314,-0.0,0.5131687521934509,0.8582720160484314,-0.0,-1.0,0.0,-0.0,0.7148350477218628,0.6992400884628296,-0.0,-1.0,0.0,-0.0,0.0,-1.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.6756187677383423,0.7372050881385803,-0.0,0.6756187677383423,0.7372050881385803,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.32160404324531555,0.9468672871589661,-0.0,0.32160404324531555,0.9468672871589661,-0.0,0.0,0.0,1.0,0.269081711769104,0.9631031155586243,-0.0,-1.0,0.0,-0.0,0.269081711769104,0.9631031155586243,-0.0,0.6536149382591248,0.7567979693412781,-0.0,0.6536149382591248,0.7567979693412781,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,-1.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.47932371497154236,0.8776207566261292,-0.0,0.47932371497154236,0.8776207566261292,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,-1.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,1.0,0.0,-0.0,0.0,-1.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,-1.0,-0.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,-1.0,-0.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-0.9989318251609802,-0.0023194067180156708,-0.045503098517656326,-0.9989318251609802,-0.0023194067180156708,-0.045503098517656326,0.0,-1.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,-1.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,-1.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,-1.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,-1.0,-0.0,1.0,0.0,-0.0,0.20194098353385925,0.9793694615364075,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,-1.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.44718772172927856,0.8944059610366821,-0.0,0.18881802260875702,0.981994092464447,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,-0.44718772172927856,0.8944059610366821,-0.0,0.6899929642677307,0.7237769961357117,-0.0,0.0,-1.0,-0.0,0.6536149382591248,0.7567979693412781,-0.0,0.0,-1.0,-0.0,0.6756187677383423,0.7372050881385803,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.6496475338935852,0.7601855397224426,-0.0,0.6496475338935852,0.7601855397224426,-0.0,0.6496475338935852,0.7601855397224426,-0.0,0.6272163987159729,0.7788018584251404,-0.0,0.6272163987159729,0.7788018584251404,-0.0,0.0,1.0,-0.0,0.6272163987159729,0.7788018584251404,-0.0,0.0,1.0,-0.0,0.4538407623767853,0.8910794258117676,-0.0,0.4538407623767853,0.8910794258117676,-0.0,0.4538407623767853,0.8910794258117676,-0.0,0.3019196093082428,0.9533066749572754,-0.0,0.3019196093082428,0.9533066749572754,-0.0,0.3019196093082428,0.9533066749572754,-0.0,0.0,1.0,-0.0,-0.44718772172927856,0.8944059610366821,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.252113401889801,0.9676808714866638,-0.0,0.252113401889801,0.9676808714866638,-0.0,0.48695334792137146,0.8734092116355896,-0.0,0.48695334792137146,0.8734092116355896,-0.0,0.5191808938980103,0.8546403646469116,-0.0,0.5191808938980103,0.8546403646469116,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.252113401889801,0.9676808714866638,-0.0,0.252113401889801,0.9676808714866638,-0.0,0.0,-1.0,-0.0,0.269081711769104,0.9631031155586243,-0.0,0.32160404324531555,0.9468672871589661,-0.0,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.5191808938980103,0.8546403646469116,-0.0,0.47932371497154236,0.8776207566261292,-0.0,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.48695334792137146,0.8734092116355896,-0.0,0.0,-1.0,-0.0,0.5458235144615173,0.8378551602363586,-0.0,0.5131687521934509,0.8582720160484314,-0.0,0.5131687521934509,0.8582720160484314,-0.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.03912472724914551,0.032227545976638794,0.9986876845359802,1.0,0.0,-0.0,-0.03912472724914551,0.032227545976638794,0.9986876845359802,-0.018524736166000366,-0.021210364997386932,0.99957275390625,0.0,1.0,-0.0,0.0,-1.0,-0.0,-0.018524736166000366,0.021210364997386932,0.99957275390625,0.0,1.0,-0.0,1.0,0.0,-0.0,-0.03912472724914551,-0.032227545976638794,0.9986876845359802,-1.0,0.0,-0.0,0.018585771322250366,-0.021271400153636932,0.99957275390625,1.0,0.0,-0.0,-0.018585771322250366,-0.021271400153636932,0.99957275390625,-1.0,0.0,-0.0,0.018433179706335068,0.020966216921806335,0.999603271484375,1.0,0.0,-0.0,-0.018433179706335068,0.020966216921806335,0.999603271484375,-1.0,0.0,-0.0,0.018524736166000366,0.021210364997386932,0.99957275390625,0.0,1.0,-0.0,-0.018433179706335068,-0.020966216921806335,0.999603271484375,0.0,1.0,-0.0,1.0,0.0,-0.0,-0.038422804325819016,-0.031464584171772,0.9987487196922302,0.0,-1.0,-0.0,-0.038422804325819016,0.031464584171772,0.9987487196922302,0.018524736166000366,-0.021210364997386932,0.99957275390625,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.03912472724914551,-0.032227545976638794,0.9986876845359802,0.0,1.0,-0.0,0.018433179706335068,-0.020966216921806335,0.999603271484375,0.05258339270949364,0.0,0.9985961318016052,0.0,-1.0,-0.0,0.038422804325819016,0.031464584171772,0.9987487196922302,-1.0,0.0,-0.0,0.018494216725230217,-0.021027252078056335,0.999603271484375,1.0,0.0,-0.0,-0.018494216725230217,-0.021027252078056335,0.999603271484375,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,-3.0518509447574615e-05,0.0,1.0,0.3161717653274536,0.0,0.9486678838729858,0.0,-1.0,-0.0,0.3161717653274536,0.0,0.9486678838729858,0.0,-1.0,-0.0,-0.3161717653274536,0.0,0.9486678838729858,0.0,-1.0,-0.0,-0.999969482421875,0.0,-0.0,0.0,-1.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,-1.0,-0.0,-0.018585771322250366,0.021271400153636932,0.99957275390625,1.0,0.0,-0.0,0.0,-1.0,-0.0,-0.018494216725230217,0.021027252078056335,0.999603271484375,0.0,-1.0,-0.0,-1.0,0.0,-0.0,0.018585771322250366,0.021271400153636932,0.99957275390625,0.0,-1.0,-0.0,-1.0,0.0,-0.0,0.018494216725230217,0.021027252078056335,0.999603271484375,0.0,1.0,-0.0,-0.9989318251609802,-0.0023194067180156708,-0.045503098517656326,0.038422804325819016,-0.031464584171772,0.9987487196922302],"indices":[150,2,137,2,150,109,151,5,138,5,151,123,147,6,139,6,147,88,146,8,140,8,146,54,118,13,19,13,118,117,122,273,18,273,122,97,307,129,311,129,307,101,98,428,51,428,98,106,26,64,65,64,26,49,198,19,199,19,198,118,121,45,255,45,121,36,252,59,78,59,252,43,43,65,59,65,43,26,214,18,202,18,214,122,203,66,204,66,203,20,108,27,44,27,108,119,20,76,66,76,20,10,138,50,144,50,138,5,36,28,45,28,36,394,394,48,28,48,394,395,139,77,143,77,139,6,86,81,70,81,86,42,110,44,0,44,110,108,46,93,9,93,46,24,119,31,27,31,119,107,243,305,285,305,243,231,33,25,11,25,33,39,281,15,266,15,281,73,58,39,33,39,58,92,16,92,58,92,16,89,69,37,87,37,69,82,140,68,145,68,140,8,253,75,251,75,253,94,254,95,256,95,254,322,301,57,302,57,301,74,265,42,86,42,265,314,144,54,146,54,144,50,279,322,254,322,279,63,285,63,279,63,285,305,4,60,34,60,4,324,87,326,7,326,87,37,211,323,206,323,211,67,300,73,281,73,300,340,70,89,16,89,70,81,79,316,317,316,79,71,251,74,301,74,251,75,52,56,30,56,52,306,34,24,46,24,34,60,91,62,23,62,91,90,9,82,69,82,9,93,80,317,337,317,80,79,275,336,280,336,275,334,145,88,147,88,145,68,318,23,321,23,318,91,72,339,40,339,72,335,342,337,327,337,342,80,22,332,61,332,22,338,210,61,205,61,210,22,67,315,323,315,67,333,90,53,62,53,90,55,306,29,56,29,306,35,207,40,208,40,207,72,362,193,328,193,362,512,325,30,345,30,325,52,205,85,209,85,205,61,30,90,91,90,30,56,40,338,22,338,40,339,370,495,348,495,370,219,61,331,85,331,61,332,56,55,90,55,56,29,349,187,350,187,349,182,23,41,83,41,23,62,373,190,374,373,245,190,373,570,245,62,84,41,84,62,53,321,83,329,83,321,23,83,79,80,79,83,41,85,333,67,333,85,331,41,71,79,71,41,84,263,102,313,102,263,103,226,389,412,389,226,222,405,418,408,418,405,393,382,120,296,120,382,411,1,124,114,124,1,17,412,294,384,294,412,389,112,427,127,427,112,113,17,125,124,125,17,38,383,96,386,96,383,293,212,136,215,136,212,288,297,135,131,135,297,298,38,126,125,126,38,47,141,115,152,115,141,3,201,111,200,111,201,21,421,411,382,411,421,142,21,116,111,116,21,12,149,420,422,420,149,437,308,101,307,101,308,100,298,32,135,32,298,424,396,417,398,417,396,401,216,133,213,133,216,410,113,128,427,128,113,130,390,127,134,127,390,112,104,131,414,131,104,297,288,14,136,14,288,290,410,105,133,105,410,99,309,132,282,132,309,403,269,399,270,399,269,425,381,304,385,304,381,303,284,303,381,303,284,413,398,106,98,106,398,417,241,100,308,100,241,234,311,404,310,404,311,129,283,413,284,413,283,415,416,393,405,393,416,392,387,402,397,402,387,391,384,293,383,293,384,294,270,400,380,400,270,399,429,455,431,455,429,457,431,289,261,289,431,455,117,137,13,137,117,150,461,173,449,173,461,160,443,174,463,174,443,181,286,486,259,486,286,172,260,171,257,171,260,485,277,166,267,166,277,170,441,446,444,446,441,161,450,175,451,175,450,448,12,152,116,152,12,141,151,115,123,115,151,152,290,153,14,153,290,148,99,149,105,149,99,438,406,149,422,149,406,105,380,458,430,458,380,400,143,109,150,109,143,77,274,163,271,163,274,165,433,168,435,168,433,487,158,492,468,492,158,157,464,482,462,482,464,478,452,471,459,471,452,453,272,479,287,479,272,475,177,157,158,157,177,155,483,487,433,487,483,159,447,494,454,494,447,493,162,149,422,149,162,178,439,154,445,154,439,179,169,155,177,155,169,491,105,491,169,491,105,149,258,434,278,434,258,484,468,469,488,469,468,492,480,176,164,176,480,467,167,465,490,465,167,466,445,156,477,156,445,154,407,489,473,489,407,419,431,179,439,179,431,455,454,178,162,178,454,494,481,493,447,493,481,180,473,470,476,470,473,489,268,436,262,488,466,167,466,488,469,435,291,264,291,435,168,476,467,480,467,476,470,460,472,423,164,159,483,159,164,176,477,180,481,180,477,156,432,440,442,409,474,276,490,456,292,456,490,465,527,248,496,571,532,530,532,571,249,513,246,517,360,194,363,194,360,192,378,191,376,191,378,195,229,535,379,535,229,239,364,501,352,501,364,197,353,189,346,189,353,185,375,521,368,521,375,531,230,508,358,508,230,221,319,514,365,514,319,183,330,528,343,528,330,516,359,188,356,188,359,184,344,510,361,510,344,186,537,199,227,199,537,198,224,202,539,202,224,214,242,204,541,204,242,203,280,341,299,341,280,336,235,206,232,206,235,211,540,340,300,340,540,542,548,205,240,205,548,210,543,208,544,208,543,207,240,209,546,209,240,205,548,525,210,525,548,564,235,220,211,220,235,567,296,426,295,426,296,120,552,215,555,215,552,212,225,200,538,200,225,201,556,213,233,213,556,216,228,425,269,425,228,223,313,388,312,388,313,102,554,392,416,392,554,553,369,218,367,218,369,196,351,217,354,217,351,497,47,538,126,538,47,225,395,539,48,539,395,224,385,223,228,223,385,304,208,557,544,557,208,504,559,244,509,53,546,84,546,53,240,299,231,243,231,299,341,312,234,241,234,312,388,130,233,128,233,130,556,51,553,554,553,51,428,209,560,546,560,209,519,357,238,236,238,357,506,71,232,316,232,71,235,49,541,64,541,49,242,55,240,53,240,55,548,377,237,550,237,377,533,562,247,536,35,544,29,544,35,543,424,555,32,555,424,552,107,227,31,227,107,537,295,222,226,222,295,426,302,542,540,542,302,57,544,210,548,210,544,208,526,355,503,355,526,371,569,366,518,366,569,372,558,549,563,549,558,545,546,211,235,211,546,209,561,551,566,551,561,547,565,244,559,507,244,565,509,244,507,534,247,568,536,247,534,568,247,562,498,496,248,498,248,505,505,248,527,522,532,249,522,249,520,520,249,571,529,246,511,517,246,529,511,246,513,515,523,250,515,250,502,502,250,499,499,250,523,347,524,320,524,347,500]}
var otherBottomMeshBuffer={"positions":[0.9999998807907104,0.0,-0.0,0.9999998807907104,1.0,-0.0,0.9999998807907104,0.9099642038345337,-0.0,0.724348783493042,0.5692343711853027,-2.4745240807533264e-05,-8.940696716308594e-08,1.0,-0.0,0.724348783493042,-4.4990833281514456e-18,-2.480205148458481e-05,0.750044584274292,0.6473822593688965,-0.0,0.5189406871795654,0.5704642534255981,-0.06463287770748138,0.518940806388855,0.0,-0.06463287770748138,0.6236635446548462,0.6997168660163879,-0.0,0.724348783493042,-4.4990833281514456e-18,-0.0646328330039978,0.5938739776611328,0.619551420211792,-2.4813514755805954e-05,0.724348783493042,0.5704642534255981,-0.0646328404545784,0.724348783493042,0.5692343711853027,0.04652766138315201,0.750044584274292,0.6473822593688965,0.04652766138315201,0.6236635446548462,0.6997168660163879,0.04652766138315201,0.5938739776611328,0.619551420211792,0.04652766138315201,0.9999998807907104,0.9436699748039246,-0.0,-9.685754776000977e-08,0.9436699748039246,-0.0,-9.685754776000977e-08,0.9099642038345337,0.029999999329447746,0.5000000596046448,0.9099642038345337,-0.0,-9.685754776000977e-08,0.9436682462692261,0.029999999329447746,0.9999998807907104,0.9099642038345337,0.029999999329447746,0.9999998807907104,0.9436682462692261,0.029999999329447746,0.8025888800621033,0.0,-0.0,0.8025888800621033,0.5540251731872559,-0.0,0.724348783493042,-4.4990833281514456e-18,0.04652766138315201,0.8025888800621033,-4.4990833281514456e-18,0.04652766138315201,0.8025888800621033,0.5540251731872559,0.04652766138315201,0.5189406871795654,0.5704642534255981,-0.056450046598911285,0.518940806388855,0.0,-0.056450046598911285,-8.940696716308594e-08,0.0,-0.0,-8.940696716308594e-08,0.9099642038345337,-0.0,0.4999999403953552,0.6291965842247009,-2.4881501303752884e-05,0.5,0.7334760427474976,-0.0,0.2756512463092804,0.5692343711853027,-2.4745240807533264e-05,0.2756512463092804,-4.4990833281514456e-18,-2.480205148458481e-05,0.2499554455280304,0.6473822593688965,-0.0,0.4810592830181122,0.5704642534255981,-0.06463287770748138,0.4810592234134674,0.0,-0.06463287770748138,0.3763364553451538,0.6997168660163879,-0.0,0.2756512463092804,-4.4990833281514456e-18,-0.0646328330039978,0.4061260223388672,0.619551420211792,-2.4813514755805954e-05,0.2756512463092804,0.5704642534255981,-0.0646328404545784,0.49999988079071045,0.5713427066802979,-0.06463291496038437,0.4999999403953552,0.6291965842247009,0.04652766138315201,0.5,0.7334760427474976,0.04652766138315201,0.2756512463092804,0.5692343711853027,0.04652766138315201,0.2499554455280304,0.6473822593688965,0.04652766138315201,0.3763364553451538,0.6997168660163879,0.04652766138315201,0.4061260223388672,0.619551420211792,0.04652766138315201,0.19741111993789673,0.0,-0.0,0.19741111993789673,0.5540251731872559,-0.0,0.2756512463092804,-4.4990833281514456e-18,0.04652766138315201,0.19741111993789673,-4.4990833281514456e-18,0.04652766138315201,0.19741111993789673,0.5540251731872559,0.04652766138315201,0.4810592830181122,0.5704642534255981,-0.056450046598911285,0.4810592234134674,0.0,-0.056450046598911285,0.4999999403953552,0.6291965842247009,-2.4881501303752884e-05,0.5,0.7334760427474976,-0.0,0.5,0.7334760427474976,-0.0,0.6236635446548462,0.6997168660163879,-0.0,0.724348783493042,0.5692343711853027,-2.4745240807533264e-05,0.724348783493042,0.5704642534255981,-0.0646328404545784,0.724348783493042,0.5704642534255981,-0.0646328404545784,0.750044584274292,0.6473822593688965,-0.0,0.750044584274292,0.6473822593688965,-0.0,0.750044584274292,0.6473822593688965,0.04652766138315201,0.750044584274292,0.6473822593688965,0.04652766138315201,0.724348783493042,-4.4990833281514456e-18,-0.0646328330039978,0.724348783493042,0.5692343711853027,0.04652766138315201,0.724348783493042,0.5692343711853027,0.04652766138315201,0.5189406871795654,0.5704642534255981,-0.06463287770748138,0.5189406871795654,0.5704642534255981,-0.06463287770748138,0.5189406871795654,0.5704642534255981,-0.06463287770748138,0.49999988079071045,0.5713427066802979,-0.06463291496038437,0.518940806388855,0.0,-0.06463287770748138,0.4999999403953552,0.6291965842247009,0.04652766138315201,0.5938739776611328,0.619551420211792,0.04652766138315201,0.5,0.7334760427474976,0.04652766138315201,0.5,0.7334760427474976,0.04652766138315201,0.6236635446548462,0.6997168660163879,0.04652766138315201,0.9999998807907104,0.9436699748039246,-0.0,-9.685754776000977e-08,0.9436699748039246,-0.0,0.4810592830181122,0.5704642534255981,-0.056450046598911285,0.4810592830181122,0.5704642534255981,-0.056450046598911285,0.5189406871795654,0.5704642534255981,-0.056450046598911285,0.5189406871795654,0.5704642534255981,-0.056450046598911285,-9.685754776000977e-08,0.9436682462692261,0.029999999329447746,0.9999998807907104,0.9436682462692261,0.029999999329447746,0.8025888800621033,0.5540251731872559,-0.0,0.8025888800621033,0.0,-0.0,0.724348783493042,-4.4990833281514456e-18,0.04652766138315201,0.8025888800621033,0.5540251731872559,0.04652766138315201,0.8025888800621033,-4.4990833281514456e-18,0.04652766138315201,0.518940806388855,0.0,-0.056450046598911285,0.5000000596046448,0.9099642038345337,-0.0,0.9999998807907104,0.9099642038345337,-0.0,0.3763364553451538,0.6997168660163879,-0.0,0.2756512463092804,0.5692343711853027,-2.4745240807533264e-05,0.2756512463092804,0.5704642534255981,-0.0646328404545784,0.2756512463092804,0.5704642534255981,-0.0646328404545784,0.2499554455280304,0.6473822593688965,-0.0,0.2499554455280304,0.6473822593688965,-0.0,0.2499554455280304,0.6473822593688965,0.04652766138315201,0.2499554455280304,0.6473822593688965,0.04652766138315201,0.2756512463092804,-4.4990833281514456e-18,-0.0646328330039978,0.2756512463092804,0.5692343711853027,0.04652766138315201,0.2756512463092804,0.5692343711853027,0.04652766138315201,0.4810592830181122,0.5704642534255981,-0.06463287770748138,0.4810592830181122,0.5704642534255981,-0.06463287770748138,0.4810592830181122,0.5704642534255981,-0.06463287770748138,0.4810592234134674,0.0,-0.06463287770748138,0.4061260223388672,0.619551420211792,0.04652766138315201,0.3763364553451538,0.6997168660163879,0.04652766138315201,0.19741111993789673,0.5540251731872559,-0.0,0.19741111993789673,0.0,-0.0,0.2756512463092804,-4.4990833281514456e-18,0.04652766138315201,0.19741111993789673,0.5540251731872559,0.04652766138315201,0.19741111993789673,-4.4990833281514456e-18,0.04652766138315201,0.4810592234134674,0.0,-0.056450046598911285,-9.685754776000977e-08,0.9099642038345337,0.029999999329447746,0.9999998807907104,0.9099642038345337,0.029999999329447746,-8.940696716308594e-08,0.9099642038345337,-0.0],"normals":[0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,0.999969482421875,-1.0,0.0,-0.0,0.382580041885376,0.9238868355751038,-0.0,-0.08783227205276489,-0.7956785559654236,0.599291980266571,1.0,0.0,-0.0,0.3236182630062103,0.9461653232574463,-0.0,-1.0,0.0,-0.0,-0.1827448308467865,-0.9517807364463806,0.2463148832321167,-1.0,0.0,-0.0,-0.35981321334838867,-0.9330118894577026,-0.0,0.382580041885376,0.9238868355751038,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,0.999969482421875,0.0,1.0,3.0518509447574615e-05,0.0,0.0,1.0,0.0,1.0,3.0518509447574615e-05,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.9673146605491638,0.2535172700881958,-0.0,0.03024384379386902,0.999359130859375,0.018585771322250366,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-0.999969482421875,-0.0,0.2633442282676697,0.964690089225769,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,-0.382580041885376,0.9238868355751038,-0.0,0.08783227205276489,-0.7956785559654236,0.599291980266571,-1.0,0.0,-0.0,-0.3236182630062103,0.9461653232574463,-0.0,1.0,0.0,-0.0,0.1827448308467865,-0.9517807364463806,0.2463148832321167,1.0,0.0,-0.0,0.0,-0.7500534057617188,0.6613361239433289,0.0,-1.0,-0.0,0.0,0.0,1.0,0.35981321334838867,-0.9330118894577026,-0.0,-0.382580041885376,0.9238868355751038,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,-0.9673146605491638,0.2535172700881958,-0.0,-0.01541184727102518,0.9973143935203552,0.0713522732257843,-1.0,0.0,-0.0,0.0,-0.7500534057617188,0.6613361239433289,-0.2633442282676697,0.964690089225769,-0.0,0.0,0.0,0.999969482421875,0.0,0.0,1.0,-0.2547990381717682,-0.9435712695121765,0.21149326860904694,-0.1349833607673645,-0.9010894894599915,0.4119998812675476,0.0,0.0,1.0,0.0,0.0,1.0,0.8714255094528198,0.4904629588127136,-0.0,0.0,0.0,1.0,0.8714255094528198,0.4904629588127136,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.046327099204063416,0.9989013075828552,-0.0,0.0,0.0,1.0,-0.007385479286313057,0.9980162978172302,0.06210516765713692,0.0,0.0,0.999969482421875,0.0,0.0,1.0,-0.23303933441638947,-0.9724417924880981,-0.0,0.2633442282676697,0.964690089225769,-0.0,-0.2633442282676697,0.964690089225769,-0.0,0.3236182630062103,0.9461653232574463,-0.0,0.0,1.0,3.0518509447574615e-05,0.0,1.0,3.0518509447574615e-05,-1.0,0.0,-0.0,0.0,0.0,0.999969482421875,1.0,0.0,-0.0,0.0,0.0,0.999969482421875,0.0,0.0,1.0,0.0,0.0,1.0,0.9673146605491638,0.2535172700881958,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.2547990381717682,-0.9435712695121765,0.21149326860904694,0.1349833607673645,-0.9010894894599915,0.4119998812675476,0.0,0.0,1.0,0.0,0.0,1.0,-0.8714255094528198,0.4904629588127136,-0.0,0.0,0.0,1.0,-0.8714255094528198,0.4904629588127136,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,-0.01541184727102518,0.9973143935203552,0.0713522732257843,0.0,0.0,1.0,0.0,0.0,0.999969482421875,0.23303933441638947,-0.9724417924880981,-0.0,-0.3236182630062103,0.9461653232574463,-0.0,-0.9673146605491638,0.2535172700881958,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.999969482421875,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,-0.999969482421875,-0.0],"indices":[11,13,62,13,11,78,24,28,90,28,24,94,17,4,1,4,17,18,11,44,58,44,11,7,8,86,72,86,8,30,5,12,3,12,5,10,7,62,63,62,7,11,16,46,15,46,16,77,70,15,67,15,70,16,81,6,14,6,81,9,9,79,34,79,9,81,78,33,45,33,78,11,82,21,83,21,82,23,2,65,20,65,2,25,69,74,64,74,69,76,27,70,93,70,27,92,3,26,5,26,3,71,93,70,67,90,68,66,68,90,28,0,25,2,25,0,91,42,47,113,47,42,99,51,55,119,55,51,115,73,29,75,42,44,38,44,42,58,39,84,57,84,39,109,36,43,41,43,36,35,122,96,19,96,122,97,38,99,42,99,38,100,50,46,77,46,50,49,107,49,50,49,107,104,114,37,40,37,114,48,40,80,114,80,40,59,113,33,42,33,113,45,102,20,98,106,111,112,111,106,101,54,107,117,107,54,118,35,53,108,53,35,36,118,104,107,115,105,55,105,115,103,31,52,116,52,31,32,98,20,60,65,61,20,61,60,20,22,88,89,88,22,121,110,29,56,29,110,75,32,102,52,102,32,20,19,96,123,120,87,95,87,120,85]}
var roofMeshBuffer={"positions":[1.0,0.0,2.9802322387695312e-08,1.0,1.0,-0.9999999403953552,1.0,0.731292724609375,-0.15819424390792847,1.0,0.36594465374946594,-0.001184016466140747,1.0,0.8952803611755371,-0.30612000823020935,1.0,0.2888537049293518,-0.0009353458881378174,1.0,0.2888537049293518,0.02964639477431774,0.7683234214782715,1.0,-0.9999999403953552,0.8826556205749512,0.730431079864502,-0.15701021254062653,0.8826556205749512,0.36594465374946594,1.4901161193847656e-08,0.7683234214782715,0.8952803611755371,-0.3061159551143646,0.6539912223815918,0.730431079864502,-0.15701021254062653,0.6539912223815918,0.36594465374946594,1.4901161193847656e-08,0.7683234214782715,0.8952803611755371,-0.3061159551143646,0.6539912223815918,0.36594465374946594,0.015972383320331573,0.6539912223815918,0.7301744818687439,0.015866275876760483,0.8826556205749512,0.36594465374946594,0.015972383320331573,0.8826556205749512,0.7301744818687439,0.015866275876760483,0.7683234214782715,0.770918071269989,0.015866275876760483,0.7683234214782715,0.36594465374946594,0.015972383320331573,0.7683234214782715,0.8952803611755371,-0.3061159551143646,0.7683234214782715,0.36594465374946594,1.4901161193847656e-08,0.7683234214782715,0.7711746692657471,-0.15701021254062653,0.7683234214782715,0.7509961128234863,0.01588749699294567,0.7683234810829163,0.7302912473678589,-0.0528719425201416,0.7683234214782715,0.45477741956710815,-0.05318829044699669,0.7683234214782715,0.453829288482666,0.015951162204146385,0.859789252281189,0.7383232116699219,0.015866275876760483,0.6768577098846436,0.7383232116699219,0.015866275876760483,0.6768577098846436,0.7249202132225037,0.01588749699294567,0.6997241377830505,0.7156234979629517,-0.0528719425201416,0.6997241377830505,0.45310497283935547,-0.05318829044699669,0.6768577098846436,0.4536029100418091,0.015951162204146385,0.859789252281189,0.7249202132225037,0.01588749699294567,0.8369227647781372,0.7156235575675964,-0.0528719425201416,0.859789252281189,0.4536029100418091,0.015951162204146385,0.8369227647781372,0.45311713218688965,-0.05318829044699669,0.7683234214782715,0.45405054092407227,0.009205498732626438,0.6997241377830505,0.45339617133140564,0.009205498732626438,0.7225905656814575,0.45366954803466797,0.009205498732626438,0.7454570531845093,0.4538731575012207,0.009205498732626438,0.7911899089813232,0.4538184404373169,0.009205498732626438,0.8140563368797302,0.45371243357658386,0.009205498732626438,0.8369227647781372,0.45339903235435486,0.009205498732626438,0.7683234214782715,0.45430493354797363,-0.009346922859549522,0.6997241377830505,0.4532942771911621,-0.009346922859549522,0.7225905656814575,0.45401811599731445,-0.009346922859549522,0.7454570531845093,0.4541897177696228,-0.009346922859549522,0.7911899089813232,0.45407211780548096,-0.009346922859549522,0.8140563368797302,0.454110324382782,-0.009346922859549522,0.8369227647781372,0.4533003568649292,-0.009346922859549522,0.7058282494544983,0.4560271203517914,-0.004054160788655281,0.7058282494544983,0.4560730755329132,0.004314220044761896,0.7161425352096558,0.4561963677406311,0.004314220044761896,0.7161425352096558,0.4563536047935486,-0.004054160788655281,0.7287269234657288,0.4565430283546448,-0.0040260907262563705,0.728726863861084,0.45638349652290344,0.004463698714971542,0.7391908168792725,0.45647668838500977,0.004463698714971542,0.7391908168792725,0.45662152767181396,-0.0040260907262563705,0.7516905069351196,0.45671188831329346,-0.0039787860587239265,0.7516905069351196,0.4565693438053131,0.00437645148485899,0.7619885206222534,0.45664921402931213,0.00437645148485899,0.7619885206222534,0.45676377415657043,-0.0039787860587239265,0.7741724252700806,0.4567510187625885,-0.004409827291965485,0.7741724252700806,0.4566250145435333,0.004780808929353952,0.785500168800354,0.4565100371837616,0.004780808929353952,0.785500168800354,0.4566356837749481,-0.004409827291965485,0.7974719405174255,0.4565621018409729,-0.003972608596086502,0.7974719405174255,0.456447571516037,0.004404474515467882,0.8077969551086426,0.45639970898628235,0.004404474515467882,0.8077969551086426,0.4565793573856354,-0.003972608596086502,0.8204275965690613,0.4564184844493866,-0.0041223447769880295,0.8204275965690613,0.4562356173992157,0.004404684994369745,0.8309374451637268,0.45609158277511597,0.004404684994369745,0.8309374451637268,0.4560462236404419,-0.0041223447769880295,0.821765661239624,0.5274276733398438,-0.003683101385831833,0.821765661239624,0.5272448062896729,0.004843928385525942,0.8322755098342896,0.5271007418632507,0.004843928385525942,0.8322755098342896,0.5270553827285767,-0.003683101385831833,0.7975527048110962,0.5275810360908508,-0.0030159177258610725,0.7975527048110962,0.5274664759635925,0.005361165385693312,0.8078777194023132,0.5274186134338379,0.005361165385693312,0.8078777194023132,0.5275982618331909,-0.0030159177258610725,0.774726390838623,0.527770459651947,-0.00366387702524662,0.774726390838623,0.5276444554328918,0.005526759661734104,0.7860541343688965,0.5275294780731201,0.005526759661734104,0.7860541343688965,0.5276551246643066,-0.00366387702524662,0.7513419389724731,0.527731716632843,-0.0031404634937644005,0.7513419389724731,0.5275891423225403,0.005214774515479803,0.7616399526596069,0.5276690125465393,0.005214774515479803,0.7616399526596069,0.5277835726737976,-0.0031404634937644005,0.7282799482345581,0.5275598168373108,-0.0030494332313537598,0.7282799482345581,0.5274002552032471,0.0054403566755354404,0.7387438416481018,0.5274934768676758,0.0054403566755354404,0.7387438416481018,0.52763831615448,-0.0030494332313537598,0.7046403884887695,0.5270403623580933,-0.0036919256672263145,0.7046403884887695,0.5270863175392151,0.004676455166190863,0.714954674243927,0.5272095799446106,0.004676455166190863,0.714954674243927,0.5273668169975281,-0.0036919256672263145,0.7683234214782715,0.2888537049293518,1.816079020500183e-08,0.7683234214782715,0.2888537049293518,1.816079020500183e-08,1.0,0.2500981092453003,0.02977186255156994,1.0,0.2500981092453003,-0.0008098483085632324,0.0,0.0,2.9802322387695312e-08,0.0,1.0,-0.9999999403953552,0.0,0.731292724609375,-0.15819424390792847,0.0,0.36594465374946594,-0.001184016466140747,0.0,0.8952803611755371,-0.3061159551143646,0.0,0.2888537049293518,-0.0009353458881378174,0.0,0.2888537049293518,0.02964639477431774,0.5,0.0,2.9802322387695312e-08,0.5,1.0,-0.9999999403953552,0.23167654871940613,1.0,-0.9999999403953552,0.5,0.730431079864502,-0.15701019763946533,0.11734434962272644,0.730431079864502,-0.15701021254062653,0.5,0.36594465374946594,-0.0,0.5,0.8952803611755371,-0.3061159551143646,0.11734434962272644,0.36594465374946594,1.4901161193847656e-08,0.23167654871940613,0.8952803611755371,-0.3061159551143646,0.3460087478160858,0.730431079864502,-0.15701021254062653,0.3460087478160858,0.36594465374946594,1.4901161193847656e-08,0.23167654871940613,0.8952803611755371,-0.3061159551143646,0.3460087478160858,0.36594465374946594,0.015972383320331573,0.3460087478160858,0.7301744818687439,0.015866275876760483,0.11734434962272644,0.36594465374946594,0.015972383320331573,0.11734434962272644,0.7301744818687439,0.015866275876760483,0.23167654871940613,0.770918071269989,0.015866275876760483,0.23167654871940613,0.36594465374946594,0.015972383320331573,0.23167654871940613,0.8952803611755371,-0.3061159551143646,0.23167654871940613,0.36594465374946594,1.4901161193847656e-08,0.23167654871940613,0.7711746692657471,-0.15701021254062653,0.23167654871940613,0.7509961128234863,0.01588749699294567,0.23167651891708374,0.7302912473678589,-0.0528719425201416,0.23167654871940613,0.45477741956710815,-0.05318829044699669,0.23167654871940613,0.453829288482666,0.015951162204146385,0.14021077752113342,0.7383232116699219,0.015866275876760483,0.32314229011535645,0.7383232116699219,0.015866275876760483,0.32314229011535645,0.7249202132225037,0.01588749699294567,0.30027586221694946,0.7156234979629517,-0.0528719425201416,0.30027586221694946,0.45310497283935547,-0.05318829044699669,0.32314229011535645,0.4536029100418091,0.015951162204146385,0.14021077752113342,0.7249202132225037,0.01588749699294567,0.1630772054195404,0.7156235575675964,-0.0528719425201416,0.14021077752113342,0.4536029100418091,0.015951162204146385,0.1630772054195404,0.45311713218688965,-0.05318829044699669,0.23167654871940613,0.45405054092407227,0.009205498732626438,0.30027586221694946,0.45339617133140564,0.009205498732626438,0.2774094343185425,0.45366954803466797,0.009205498732626438,0.2545429766178131,0.4538731575012207,0.009205498732626438,0.20881009101867676,0.4538184404373169,0.009205498732626438,0.18594366312026978,0.45371243357658386,0.009205498732626438,0.1630772054195404,0.45339903235435486,0.009205498732626438,0.23167654871940613,0.45430493354797363,-0.009346922859549522,0.30027586221694946,0.4532942771911621,-0.009346922859549522,0.2774094045162201,0.45401811599731445,-0.009346922859549522,0.2545429766178131,0.4541897177696228,-0.009346922859549522,0.20881009101867676,0.45407211780548096,-0.009346922859549522,0.18594366312026978,0.454110324382782,-0.009346922859549522,0.1630772054195404,0.4533003568649292,-0.009346922859549522,0.2941717505455017,0.4560271203517914,-0.004054160788655281,0.2941717505455017,0.4560730755329132,0.004314220044761896,0.28385746479034424,0.4561963677406311,0.004314220044761896,0.28385746479034424,0.4563536047935486,-0.004054160788655281,0.27127307653427124,0.4565430283546448,-0.0040260907262563705,0.27127310633659363,0.45638349652290344,0.004463698714971542,0.26080918312072754,0.45647668838500977,0.004463698714971542,0.26080918312072754,0.45662152767181396,-0.0040260907262563705,0.24830952286720276,0.45671188831329346,-0.0039787860587239265,0.24830952286720276,0.4565693438053131,0.00437645148485899,0.2380114495754242,0.45664921402931213,0.00437645148485899,0.2380114495754242,0.45676377415657043,-0.0039787860587239265,0.22582754492759705,0.4567510187625885,-0.004409827291965485,0.22582754492759705,0.4566250145435333,0.004780808929353952,0.2144998013973236,0.4565100371837616,0.004780808929353952,0.2144998013973236,0.4566356837749481,-0.004409827291965485,0.20252805948257446,0.4565621018409729,-0.003972608596086502,0.20252805948257446,0.456447571516037,0.004404474515467882,0.19220304489135742,0.45639970898628235,0.004404474515467882,0.19220304489135742,0.4565793573856354,-0.003972608596086502,0.17957240343093872,0.4564184844493866,-0.0041223447769880295,0.17957240343093872,0.4562356173992157,0.004404684994369745,0.1690625548362732,0.45609158277511597,0.004404684994369745,0.1690625548362732,0.4560462236404419,-0.0041223447769880295,0.17823433876037598,0.5274276733398438,-0.003683101385831833,0.17823433876037598,0.5272448062896729,0.004843928385525942,0.16772449016571045,0.5271007418632507,0.004843928385525942,0.16772449016571045,0.5270553827285767,-0.003683101385831833,0.2024472951889038,0.5275810360908508,-0.0030159177258610725,0.2024472951889038,0.5274664759635925,0.005361165385693312,0.19212228059768677,0.5274186134338379,0.005361165385693312,0.19212228059768677,0.5275982618331909,-0.0030159177258610725,0.22527363896369934,0.527770459651947,-0.00366387702524662,0.22527363896369934,0.5276444554328918,0.005526759661734104,0.2139458954334259,0.5275294780731201,0.005526759661734104,0.2139458954334259,0.5276551246643066,-0.00366387702524662,0.24865809082984924,0.527731716632843,-0.0031404634937644005,0.24865809082984924,0.5275891423225403,0.005214774515479803,0.23836001753807068,0.5276690125465393,0.005214774515479803,0.23836001753807068,0.5277835726737976,-0.0031404634937644005,0.2717200517654419,0.5275598168373108,-0.0030494332313537598,0.2717200815677643,0.5274002552032471,0.0054403566755354404,0.2612561583518982,0.5274934768676758,0.0054403566755354404,0.2612561583518982,0.52763831615448,-0.0030494332313537598,0.29535961151123047,0.5270403623580933,-0.0036919256672263145,0.29535961151123047,0.5270863175392151,0.004676455166190863,0.285045325756073,0.5272095799446106,0.004676455166190863,0.285045325756073,0.5273668169975281,-0.0036919256672263145,0.5,0.2889605164527893,2.9802322387695312e-08,0.23167654871940613,0.2888537049293518,1.816079020500183e-08,0.23167654871940613,0.2888537049293518,1.816079020500183e-08,0.0,0.2500981092453003,0.02977186255156994,0.5,0.2500981092453003,0.030581770464777946,0.5,0.2500981092453003,2.9802322387695312e-08,0.0,0.2500981092453003,-0.0008098483085632324,0.5,0.2888537049293518,0.03058171086013317,0.7683234214782715,1.0,-0.9999999403953552,0.7683234214782715,1.0,-0.9999999403953552,0.7683234214782715,1.0,-0.9999999403953552,0.7683234214782715,0.8952803611755371,-0.3061159551143646,0.7683234214782715,0.8952803611755371,-0.3061159551143646,0.8826556205749512,0.730431079864502,-0.15701021254062653,0.8826556205749512,0.730431079864502,-0.15701021254062653,0.7683234214782715,0.7711746692657471,-0.15701021254062653,0.7683234214782715,0.7711746692657471,-0.15701021254062653,0.7683234214782715,0.7711746692657471,-0.15701021254062653,0.8826556205749512,0.36594465374946594,1.4901161193847656e-08,0.8826556205749512,0.36594465374946594,1.4901161193847656e-08,0.7683234214782715,0.36594465374946594,1.4901161193847656e-08,0.7683234214782715,0.8952803611755371,-0.3061159551143646,0.7683234214782715,0.8952803611755371,-0.3061159551143646,0.7683234214782715,0.8952803611755371,-0.3061159551143646,0.5,0.8952803611755371,-0.3061159551143646,0.7683234214782715,0.8952803611755371,-0.3061159551143646,0.7683234214782715,0.8952803611755371,-0.3061159551143646,0.7683234214782715,0.770918071269989,0.015866275876760483,0.7683234214782715,0.770918071269989,0.015866275876760483,0.6539912223815918,0.730431079864502,-0.15701021254062653,0.6539912223815918,0.730431079864502,-0.15701021254062653,0.6539912223815918,0.7301744818687439,0.015866275876760483,0.6539912223815918,0.7301744818687439,0.015866275876760483,0.6539912223815918,0.36594465374946594,1.4901161193847656e-08,0.6539912223815918,0.36594465374946594,1.4901161193847656e-08,0.6539912223815918,0.36594465374946594,0.015972383320331573,0.6539912223815918,0.36594465374946594,0.015972383320331573,0.8826556205749512,0.36594465374946594,0.015972383320331573,0.8826556205749512,0.36594465374946594,0.015972383320331573,0.8826556205749512,0.7301744818687439,0.015866275876760483,0.8826556205749512,0.7301744818687439,0.015866275876760483,0.859789252281189,0.7383232116699219,0.015866275876760483,0.6768577098846436,0.7383232116699219,0.015866275876760483,0.859789252281189,0.7249202132225037,0.01588749699294567,0.859789252281189,0.7249202132225037,0.01588749699294567,0.8369227647781372,0.7156235575675964,-0.0528719425201416,0.8369227647781372,0.7156235575675964,-0.0528719425201416,0.6768577098846436,0.7249202132225037,0.01588749699294567,0.6768577098846436,0.7249202132225037,0.01588749699294567,0.6997241377830505,0.7156234979629517,-0.0528719425201416,0.6997241377830505,0.7156234979629517,-0.0528719425201416,0.7683234810829163,0.7302912473678589,-0.0528719425201416,0.6997241377830505,0.45310497283935547,-0.05318829044699669,0.6997241377830505,0.45310497283935547,-0.05318829044699669,0.6768577098846436,0.4536029100418091,0.015951162204146385,0.6768577098846436,0.4536029100418091,0.015951162204146385,0.859789252281189,0.4536029100418091,0.015951162204146385,0.859789252281189,0.4536029100418091,0.015951162204146385,0.8369227647781372,0.45311713218688965,-0.05318829044699669,0.8369227647781372,0.45311713218688965,-0.05318829044699669,0.7683234214782715,0.453829288482666,0.015951162204146385,0.7683234214782715,0.36594465374946594,0.015972383320331573,0.8140563368797302,0.454110324382782,-0.009346922859549522,0.8140563368797302,0.454110324382782,-0.009346922859549522,0.8140563368797302,0.45371243357658386,0.009205498732626438,0.8140563368797302,0.45371243357658386,0.009205498732626438,0.8204275965690613,0.4564184844493866,-0.0041223447769880295,0.8204275965690613,0.4564184844493866,-0.0041223447769880295,0.8204275965690613,0.4564184844493866,-0.0041223447769880295,0.7454570531845093,0.4538731575012207,0.009205498732626438,0.7454570531845093,0.4538731575012207,0.009205498732626438,0.7516905069351196,0.4565693438053131,0.00437645148485899,0.7516905069351196,0.4565693438053131,0.00437645148485899,0.7516905069351196,0.4565693438053131,0.00437645148485899,0.7391908168792725,0.45647668838500977,0.004463698714971542,0.7391908168792725,0.45647668838500977,0.004463698714971542,0.7391908168792725,0.45647668838500977,0.004463698714971542,0.7911899089813232,0.4538184404373169,0.009205498732626438,0.7911899089813232,0.4538184404373169,0.009205498732626438,0.7974719405174255,0.456447571516037,0.004404474515467882,0.7974719405174255,0.456447571516037,0.004404474515467882,0.7974719405174255,0.456447571516037,0.004404474515467882,0.7683234214782715,0.45405054092407227,0.009205498732626438,0.7683234214782715,0.45405054092407227,0.009205498732626438,0.7741724252700806,0.4566250145435333,0.004780808929353952,0.7741724252700806,0.4566250145435333,0.004780808929353952,0.7741724252700806,0.4566250145435333,0.004780808929353952,0.7225905656814575,0.45401811599731445,-0.009346922859549522,0.7225905656814575,0.45401811599731445,-0.009346922859549522,0.7225905656814575,0.45366954803466797,0.009205498732626438,0.7225905656814575,0.45366954803466797,0.009205498732626438,0.7058282494544983,0.4560271203517914,-0.004054160788655281,0.7058282494544983,0.4560271203517914,-0.004054160788655281,0.7058282494544983,0.4560271203517914,-0.004054160788655281,0.7058282494544983,0.4560730755329132,0.004314220044761896,0.7058282494544983,0.4560730755329132,0.004314220044761896,0.7058282494544983,0.4560730755329132,0.004314220044761896,0.7161425352096558,0.4561963677406311,0.004314220044761896,0.7161425352096558,0.4561963677406311,0.004314220044761896,0.7161425352096558,0.4561963677406311,0.004314220044761896,0.7161425352096558,0.4563536047935486,-0.004054160788655281,0.7161425352096558,0.4563536047935486,-0.004054160788655281,0.7161425352096558,0.4563536047935486,-0.004054160788655281,0.7287269234657288,0.4565430283546448,-0.0040260907262563705,0.7287269234657288,0.4565430283546448,-0.0040260907262563705,0.7287269234657288,0.4565430283546448,-0.0040260907262563705,0.728726863861084,0.45638349652290344,0.004463698714971542,0.728726863861084,0.45638349652290344,0.004463698714971542,0.728726863861084,0.45638349652290344,0.004463698714971542,0.7619885206222534,0.45664921402931213,0.00437645148485899,0.7619885206222534,0.45664921402931213,0.00437645148485899,0.7619885206222534,0.45664921402931213,0.00437645148485899,0.7391908168792725,0.45662152767181396,-0.0040260907262563705,0.7391908168792725,0.45662152767181396,-0.0040260907262563705,0.7391908168792725,0.45662152767181396,-0.0040260907262563705,0.7454570531845093,0.4541897177696228,-0.009346922859549522,0.7454570531845093,0.4541897177696228,-0.009346922859549522,0.7516905069351196,0.45671188831329346,-0.0039787860587239265,0.7516905069351196,0.45671188831329346,-0.0039787860587239265,0.7516905069351196,0.45671188831329346,-0.0039787860587239265,0.785500168800354,0.4565100371837616,0.004780808929353952,0.785500168800354,0.4565100371837616,0.004780808929353952,0.785500168800354,0.4565100371837616,0.004780808929353952,0.7619885206222534,0.45676377415657043,-0.0039787860587239265,0.7619885206222534,0.45676377415657043,-0.0039787860587239265,0.7619885206222534,0.45676377415657043,-0.0039787860587239265,0.7683234214782715,0.45430493354797363,-0.009346922859549522,0.7683234214782715,0.45430493354797363,-0.009346922859549522,0.7741724252700806,0.4567510187625885,-0.004409827291965485,0.7741724252700806,0.4567510187625885,-0.004409827291965485,0.7741724252700806,0.4567510187625885,-0.004409827291965485,0.785500168800354,0.4566356837749481,-0.004409827291965485,0.785500168800354,0.4566356837749481,-0.004409827291965485,0.785500168800354,0.4566356837749481,-0.004409827291965485,0.7974719405174255,0.4565621018409729,-0.003972608596086502,0.7974719405174255,0.4565621018409729,-0.003972608596086502,0.7974719405174255,0.4565621018409729,-0.003972608596086502,0.8077969551086426,0.45639970898628235,0.004404474515467882,0.8077969551086426,0.45639970898628235,0.004404474515467882,0.8077969551086426,0.45639970898628235,0.004404474515467882,0.7911899089813232,0.45407211780548096,-0.009346922859549522,0.7911899089813232,0.45407211780548096,-0.009346922859549522,0.8077969551086426,0.4565793573856354,-0.003972608596086502,0.8077969551086426,0.4565793573856354,-0.003972608596086502,0.8077969551086426,0.4565793573856354,-0.003972608596086502,0.8309374451637268,0.45609158277511597,0.004404684994369745,0.8309374451637268,0.45609158277511597,0.004404684994369745,0.8309374451637268,0.45609158277511597,0.004404684994369745,0.8204275965690613,0.4562356173992157,0.004404684994369745,0.8204275965690613,0.4562356173992157,0.004404684994369745,0.8204275965690613,0.4562356173992157,0.004404684994369745,0.8309374451637268,0.4560462236404419,-0.0041223447769880295,0.8309374451637268,0.4560462236404419,-0.0041223447769880295,0.8309374451637268,0.4560462236404419,-0.0041223447769880295,0.821765661239624,0.5272448062896729,0.004843928385525942,0.821765661239624,0.5272448062896729,0.004843928385525942,0.821765661239624,0.5274276733398438,-0.003683101385831833,0.821765661239624,0.5274276733398438,-0.003683101385831833,0.8322755098342896,0.5271007418632507,0.004843928385525942,0.8322755098342896,0.5271007418632507,0.004843928385525942,0.8322755098342896,0.5270553827285767,-0.003683101385831833,0.8322755098342896,0.5270553827285767,-0.003683101385831833,0.7975527048110962,0.5274664759635925,0.005361165385693312,0.7975527048110962,0.5274664759635925,0.005361165385693312,0.7975527048110962,0.5275810360908508,-0.0030159177258610725,0.7975527048110962,0.5275810360908508,-0.0030159177258610725,0.8078777194023132,0.5274186134338379,0.005361165385693312,0.8078777194023132,0.5274186134338379,0.005361165385693312,0.8078777194023132,0.5275982618331909,-0.0030159177258610725,0.8078777194023132,0.5275982618331909,-0.0030159177258610725,0.774726390838623,0.5276444554328918,0.005526759661734104,0.774726390838623,0.5276444554328918,0.005526759661734104,0.774726390838623,0.527770459651947,-0.00366387702524662,0.774726390838623,0.527770459651947,-0.00366387702524662,0.7860541343688965,0.5275294780731201,0.005526759661734104,0.7860541343688965,0.5275294780731201,0.005526759661734104,0.7860541343688965,0.5276551246643066,-0.00366387702524662,0.7860541343688965,0.5276551246643066,-0.00366387702524662,0.7513419389724731,0.5275891423225403,0.005214774515479803,0.7513419389724731,0.5275891423225403,0.005214774515479803,0.7513419389724731,0.527731716632843,-0.0031404634937644005,0.7513419389724731,0.527731716632843,-0.0031404634937644005,0.7616399526596069,0.5276690125465393,0.005214774515479803,0.7616399526596069,0.5276690125465393,0.005214774515479803,0.7616399526596069,0.5277835726737976,-0.0031404634937644005,0.7616399526596069,0.5277835726737976,-0.0031404634937644005,0.7282799482345581,0.5274002552032471,0.0054403566755354404,0.7282799482345581,0.5274002552032471,0.0054403566755354404,0.7282799482345581,0.5275598168373108,-0.0030494332313537598,0.7282799482345581,0.5275598168373108,-0.0030494332313537598,0.7387438416481018,0.5274934768676758,0.0054403566755354404,0.7387438416481018,0.5274934768676758,0.0054403566755354404,0.7387438416481018,0.52763831615448,-0.0030494332313537598,0.7387438416481018,0.52763831615448,-0.0030494332313537598,0.7046403884887695,0.5270863175392151,0.004676455166190863,0.7046403884887695,0.5270863175392151,0.004676455166190863,0.7046403884887695,0.5270403623580933,-0.0036919256672263145,0.7046403884887695,0.5270403623580933,-0.0036919256672263145,0.714954674243927,0.5272095799446106,0.004676455166190863,0.714954674243927,0.5272095799446106,0.004676455166190863,0.714954674243927,0.5273668169975281,-0.0036919256672263145,0.714954674243927,0.5273668169975281,-0.0036919256672263145,1.0,0.2888537049293518,-0.0009353458881378174,1.0,0.2888537049293518,-0.0009353458881378174,0.7683234214782715,0.2888537049293518,1.816079020500183e-08,0.7683234214782715,0.2888537049293518,1.816079020500183e-08,0.7683234214782715,0.2888537049293518,1.816079020500183e-08,1.0,0.8952803611755371,-0.30612000823020935,0.7683234214782715,0.2888537049293518,1.816079020500183e-08,0.7683234214782715,0.2888537049293518,1.816079020500183e-08,0.7683234214782715,0.2888537049293518,1.816079020500183e-08,0.7683234214782715,0.2888537049293518,1.816079020500183e-08,1.0,0.2500981092453003,0.02977186255156994,0.5,0.2500981092453003,0.030581770464777946,0.5,0.2888537049293518,0.03058171086013317,0.5,0.2888537049293518,0.03058171086013317,0.5,0.2888537049293518,0.03058171086013317,0.5,0.2888537049293518,0.03058171086013317,0.5,0.2888537049293518,0.03058171086013317,1.0,0.2888537049293518,0.02964639477431774,0.7683234214782715,0.7509961128234863,0.01588749699294567,0.7683234214782715,0.45477741956710815,-0.05318829044699669,1.0,0.2500981092453003,-0.0008098483085632324,0.5,0.2500981092453003,2.9802322387695312e-08,0.5,0.2500981092453003,2.9802322387695312e-08,0.5,0.2500981092453003,2.9802322387695312e-08,0.23167654871940613,1.0,-0.9999999403953552,0.23167654871940613,1.0,-0.9999999403953552,0.23167654871940613,1.0,-0.9999999403953552,0.23167654871940613,0.8952803611755371,-0.3061159551143646,0.23167654871940613,0.8952803611755371,-0.3061159551143646,0.11734434962272644,0.730431079864502,-0.15701021254062653,0.11734434962272644,0.730431079864502,-0.15701021254062653,0.23167654871940613,0.7711746692657471,-0.15701021254062653,0.23167654871940613,0.7711746692657471,-0.15701021254062653,0.23167654871940613,0.7711746692657471,-0.15701021254062653,0.11734434962272644,0.36594465374946594,1.4901161193847656e-08,0.11734434962272644,0.36594465374946594,1.4901161193847656e-08,0.23167654871940613,0.36594465374946594,1.4901161193847656e-08,0.23167654871940613,0.8952803611755371,-0.3061159551143646,0.23167654871940613,0.8952803611755371,-0.3061159551143646,0.23167654871940613,0.8952803611755371,-0.3061159551143646,0.23167654871940613,0.8952803611755371,-0.3061159551143646,0.23167654871940613,0.8952803611755371,-0.3061159551143646,0.23167654871940613,0.770918071269989,0.015866275876760483,0.23167654871940613,0.770918071269989,0.015866275876760483,0.3460087478160858,0.730431079864502,-0.15701021254062653,0.3460087478160858,0.730431079864502,-0.15701021254062653,0.3460087478160858,0.7301744818687439,0.015866275876760483,0.3460087478160858,0.7301744818687439,0.015866275876760483,0.3460087478160858,0.36594465374946594,1.4901161193847656e-08,0.3460087478160858,0.36594465374946594,1.4901161193847656e-08,0.3460087478160858,0.36594465374946594,0.015972383320331573,0.3460087478160858,0.36594465374946594,0.015972383320331573,0.11734434962272644,0.36594465374946594,0.015972383320331573,0.11734434962272644,0.36594465374946594,0.015972383320331573,0.11734434962272644,0.7301744818687439,0.015866275876760483,0.11734434962272644,0.7301744818687439,0.015866275876760483,0.14021077752113342,0.7383232116699219,0.015866275876760483,0.32314229011535645,0.7383232116699219,0.015866275876760483,0.14021077752113342,0.7249202132225037,0.01588749699294567,0.14021077752113342,0.7249202132225037,0.01588749699294567,0.1630772054195404,0.7156235575675964,-0.0528719425201416,0.1630772054195404,0.7156235575675964,-0.0528719425201416,0.32314229011535645,0.7249202132225037,0.01588749699294567,0.32314229011535645,0.7249202132225037,0.01588749699294567,0.30027586221694946,0.7156234979629517,-0.0528719425201416,0.30027586221694946,0.7156234979629517,-0.0528719425201416,0.23167651891708374,0.7302912473678589,-0.0528719425201416,0.30027586221694946,0.45310497283935547,-0.05318829044699669,0.30027586221694946,0.45310497283935547,-0.05318829044699669,0.32314229011535645,0.4536029100418091,0.015951162204146385,0.32314229011535645,0.4536029100418091,0.015951162204146385,0.14021077752113342,0.4536029100418091,0.015951162204146385,0.14021077752113342,0.4536029100418091,0.015951162204146385,0.1630772054195404,0.45311713218688965,-0.05318829044699669,0.1630772054195404,0.45311713218688965,-0.05318829044699669,0.23167654871940613,0.453829288482666,0.015951162204146385,0.23167654871940613,0.36594465374946594,0.015972383320331573,0.18594366312026978,0.454110324382782,-0.009346922859549522,0.18594366312026978,0.454110324382782,-0.009346922859549522,0.18594366312026978,0.45371243357658386,0.009205498732626438,0.18594366312026978,0.45371243357658386,0.009205498732626438,0.17957240343093872,0.4564184844493866,-0.0041223447769880295,0.17957240343093872,0.4564184844493866,-0.0041223447769880295,0.17957240343093872,0.4564184844493866,-0.0041223447769880295,0.2545429766178131,0.4538731575012207,0.009205498732626438,0.2545429766178131,0.4538731575012207,0.009205498732626438,0.24830952286720276,0.4565693438053131,0.00437645148485899,0.24830952286720276,0.4565693438053131,0.00437645148485899,0.24830952286720276,0.4565693438053131,0.00437645148485899,0.26080918312072754,0.45647668838500977,0.004463698714971542,0.26080918312072754,0.45647668838500977,0.004463698714971542,0.26080918312072754,0.45647668838500977,0.004463698714971542,0.20881009101867676,0.4538184404373169,0.009205498732626438,0.20881009101867676,0.4538184404373169,0.009205498732626438,0.20252805948257446,0.456447571516037,0.004404474515467882,0.20252805948257446,0.456447571516037,0.004404474515467882,0.20252805948257446,0.456447571516037,0.004404474515467882,0.23167654871940613,0.45405054092407227,0.009205498732626438,0.23167654871940613,0.45405054092407227,0.009205498732626438,0.22582754492759705,0.4566250145435333,0.004780808929353952,0.22582754492759705,0.4566250145435333,0.004780808929353952,0.22582754492759705,0.4566250145435333,0.004780808929353952,0.2774094045162201,0.45401811599731445,-0.009346922859549522,0.2774094045162201,0.45401811599731445,-0.009346922859549522,0.2774094343185425,0.45366954803466797,0.009205498732626438,0.2774094343185425,0.45366954803466797,0.009205498732626438,0.2941717505455017,0.4560271203517914,-0.004054160788655281,0.2941717505455017,0.4560271203517914,-0.004054160788655281,0.2941717505455017,0.4560271203517914,-0.004054160788655281,0.2941717505455017,0.4560730755329132,0.004314220044761896,0.2941717505455017,0.4560730755329132,0.004314220044761896,0.2941717505455017,0.4560730755329132,0.004314220044761896,0.28385746479034424,0.4561963677406311,0.004314220044761896,0.28385746479034424,0.4561963677406311,0.004314220044761896,0.28385746479034424,0.4561963677406311,0.004314220044761896,0.28385746479034424,0.4563536047935486,-0.004054160788655281,0.28385746479034424,0.4563536047935486,-0.004054160788655281,0.28385746479034424,0.4563536047935486,-0.004054160788655281,0.27127307653427124,0.4565430283546448,-0.0040260907262563705,0.27127307653427124,0.4565430283546448,-0.0040260907262563705,0.27127307653427124,0.4565430283546448,-0.0040260907262563705,0.27127310633659363,0.45638349652290344,0.004463698714971542,0.27127310633659363,0.45638349652290344,0.004463698714971542,0.27127310633659363,0.45638349652290344,0.004463698714971542,0.2380114495754242,0.45664921402931213,0.00437645148485899,0.2380114495754242,0.45664921402931213,0.00437645148485899,0.2380114495754242,0.45664921402931213,0.00437645148485899,0.26080918312072754,0.45662152767181396,-0.0040260907262563705,0.26080918312072754,0.45662152767181396,-0.0040260907262563705,0.26080918312072754,0.45662152767181396,-0.0040260907262563705,0.2545429766178131,0.4541897177696228,-0.009346922859549522,0.2545429766178131,0.4541897177696228,-0.009346922859549522,0.24830952286720276,0.45671188831329346,-0.0039787860587239265,0.24830952286720276,0.45671188831329346,-0.0039787860587239265,0.24830952286720276,0.45671188831329346,-0.0039787860587239265,0.2144998013973236,0.4565100371837616,0.004780808929353952,0.2144998013973236,0.4565100371837616,0.004780808929353952,0.2144998013973236,0.4565100371837616,0.004780808929353952,0.2380114495754242,0.45676377415657043,-0.0039787860587239265,0.2380114495754242,0.45676377415657043,-0.0039787860587239265,0.2380114495754242,0.45676377415657043,-0.0039787860587239265,0.23167654871940613,0.45430493354797363,-0.009346922859549522,0.23167654871940613,0.45430493354797363,-0.009346922859549522,0.22582754492759705,0.4567510187625885,-0.004409827291965485,0.22582754492759705,0.4567510187625885,-0.004409827291965485,0.22582754492759705,0.4567510187625885,-0.004409827291965485,0.2144998013973236,0.4566356837749481,-0.004409827291965485,0.2144998013973236,0.4566356837749481,-0.004409827291965485,0.2144998013973236,0.4566356837749481,-0.004409827291965485,0.20252805948257446,0.4565621018409729,-0.003972608596086502,0.20252805948257446,0.4565621018409729,-0.003972608596086502,0.20252805948257446,0.4565621018409729,-0.003972608596086502,0.19220304489135742,0.45639970898628235,0.004404474515467882,0.19220304489135742,0.45639970898628235,0.004404474515467882,0.19220304489135742,0.45639970898628235,0.004404474515467882,0.20881009101867676,0.45407211780548096,-0.009346922859549522,0.20881009101867676,0.45407211780548096,-0.009346922859549522,0.19220304489135742,0.4565793573856354,-0.003972608596086502,0.19220304489135742,0.4565793573856354,-0.003972608596086502,0.19220304489135742,0.4565793573856354,-0.003972608596086502,0.1690625548362732,0.45609158277511597,0.004404684994369745,0.1690625548362732,0.45609158277511597,0.004404684994369745,0.1690625548362732,0.45609158277511597,0.004404684994369745,0.17957240343093872,0.4562356173992157,0.004404684994369745,0.17957240343093872,0.4562356173992157,0.004404684994369745,0.17957240343093872,0.4562356173992157,0.004404684994369745,0.1690625548362732,0.4560462236404419,-0.0041223447769880295,0.1690625548362732,0.4560462236404419,-0.0041223447769880295,0.1690625548362732,0.4560462236404419,-0.0041223447769880295,0.17823433876037598,0.5272448062896729,0.004843928385525942,0.17823433876037598,0.5272448062896729,0.004843928385525942,0.17823433876037598,0.5274276733398438,-0.003683101385831833,0.17823433876037598,0.5274276733398438,-0.003683101385831833,0.16772449016571045,0.5271007418632507,0.004843928385525942,0.16772449016571045,0.5271007418632507,0.004843928385525942,0.16772449016571045,0.5270553827285767,-0.003683101385831833,0.16772449016571045,0.5270553827285767,-0.003683101385831833,0.2024472951889038,0.5274664759635925,0.005361165385693312,0.2024472951889038,0.5274664759635925,0.005361165385693312,0.2024472951889038,0.5275810360908508,-0.0030159177258610725,0.2024472951889038,0.5275810360908508,-0.0030159177258610725,0.19212228059768677,0.5274186134338379,0.005361165385693312,0.19212228059768677,0.5274186134338379,0.005361165385693312,0.19212228059768677,0.5275982618331909,-0.0030159177258610725,0.19212228059768677,0.5275982618331909,-0.0030159177258610725,0.22527363896369934,0.5276444554328918,0.005526759661734104,0.22527363896369934,0.5276444554328918,0.005526759661734104,0.22527363896369934,0.527770459651947,-0.00366387702524662,0.22527363896369934,0.527770459651947,-0.00366387702524662,0.2139458954334259,0.5275294780731201,0.005526759661734104,0.2139458954334259,0.5275294780731201,0.005526759661734104,0.2139458954334259,0.5276551246643066,-0.00366387702524662,0.2139458954334259,0.5276551246643066,-0.00366387702524662,0.24865809082984924,0.5275891423225403,0.005214774515479803,0.24865809082984924,0.5275891423225403,0.005214774515479803,0.24865809082984924,0.527731716632843,-0.0031404634937644005,0.24865809082984924,0.527731716632843,-0.0031404634937644005,0.23836001753807068,0.5276690125465393,0.005214774515479803,0.23836001753807068,0.5276690125465393,0.005214774515479803,0.23836001753807068,0.5277835726737976,-0.0031404634937644005,0.23836001753807068,0.5277835726737976,-0.0031404634937644005,0.2717200815677643,0.5274002552032471,0.0054403566755354404,0.2717200815677643,0.5274002552032471,0.0054403566755354404,0.2717200517654419,0.5275598168373108,-0.0030494332313537598,0.2717200517654419,0.5275598168373108,-0.0030494332313537598,0.2612561583518982,0.5274934768676758,0.0054403566755354404,0.2612561583518982,0.5274934768676758,0.0054403566755354404,0.2612561583518982,0.52763831615448,-0.0030494332313537598,0.2612561583518982,0.52763831615448,-0.0030494332313537598,0.29535961151123047,0.5270863175392151,0.004676455166190863,0.29535961151123047,0.5270863175392151,0.004676455166190863,0.29535961151123047,0.5270403623580933,-0.0036919256672263145,0.29535961151123047,0.5270403623580933,-0.0036919256672263145,0.285045325756073,0.5272095799446106,0.004676455166190863,0.285045325756073,0.5272095799446106,0.004676455166190863,0.285045325756073,0.5273668169975281,-0.0036919256672263145,0.285045325756073,0.5273668169975281,-0.0036919256672263145,0.0,0.2888537049293518,-0.0009353458881378174,0.0,0.2888537049293518,-0.0009353458881378174,0.23167654871940613,0.2888537049293518,1.816079020500183e-08,0.23167654871940613,0.2888537049293518,1.816079020500183e-08,0.23167654871940613,0.2888537049293518,1.816079020500183e-08,0.0,0.8952803611755371,-0.3061159551143646,0.23167654871940613,0.2888537049293518,1.816079020500183e-08,0.23167654871940613,0.2888537049293518,1.816079020500183e-08,0.23167654871940613,0.2888537049293518,1.816079020500183e-08,0.23167654871940613,0.2888537049293518,1.816079020500183e-08,0.0,0.2500981092453003,0.02977186255156994,0.0,0.2888537049293518,0.02964639477431774,0.23167654871940613,0.7509961128234863,0.01588749699294567,0.23167654871940613,0.45477741956710815,-0.05318829044699669,0.0,0.2500981092453003,-0.0008098483085632324],"normals":[0.00079348124563694,0.0016174810007214546,0.999969482421875,0.0,0.9887996912002563,0.14920499920845032,0.00436414685100317,0.5411236882209778,0.8409070372581482,0.007080294191837311,0.20059816539287567,0.9796441793441772,0.0008545182645320892,0.670461118221283,0.7419049739837646,0.006042664870619774,-0.002868739888072014,0.999969482421875,0.001739555038511753,0.0016174810007214546,0.999969482421875,0.4773705303668976,0.6213263273239136,-0.6213263273239136,0.055146947503089905,0.600085437297821,0.7979980111122131,0.005981627851724625,0.13238929212093353,0.9911496043205261,0.6303598284721375,0.7345194816589355,-0.25113680958747864,-0.051911983639001846,0.6011536121368408,0.7974181175231934,0.0,0.1343119591474533,0.9909359812736511,-0.15732291340827942,0.7202368378639221,0.6756187677383423,-1.0,0.0,-0.0,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.0,-1.0,-0.0,0.33567309379577637,0.9419537782669067,0.0013733329251408577,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.0,-1.0,-0.0,0.2641682028770447,0.7412946224212646,0.616992712020874,0.0,0.0,1.0,0.2641682028770447,0.7412946224212646,0.616992712020874,0.0,0.0012512588873505592,0.999969482421875,0.0,-0.9676808714866638,0.252052366733551,0.0,-0.0011597033590078354,0.999969482421875,0.0,0.0002136295661330223,0.999969482421875,0.33567309379577637,0.9419537782669067,0.0013733329251408577,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.23917356133460999,-0.939603865146637,0.24475844204425812,0.23917356133460999,-0.939603865146637,0.24475844204425812,-0.020264290273189545,0.999755859375,-0.006653035059571266,0.00555436871945858,0.9998779296875,-0.012787255458533764,-0.23917356133460999,-0.939603865146637,0.24475844204425812,-0.23917356133460999,-0.939603865146637,0.24475844204425812,-0.005493331700563431,0.9998779296875,-0.012543107382953167,0.020966216921806335,0.999725341796875,-0.007812738418579102,0.0011597033590078354,0.983062207698822,0.1831720918416977,-0.061372723430395126,0.9974364638328552,0.03662221133708954,-0.011200292967259884,0.9810785055160522,0.19312113523483276,-0.008514664135873318,0.983336865901947,0.1814935803413391,0.0056764427572488785,0.9848933219909668,0.17300942540168762,0.01184118166565895,0.9787896275520325,0.20438246428966522,0.062990203499794,0.9972533583641052,0.03827021270990372,0.002533036284148693,0.9904171824455261,-0.13788262009620667,-0.06414990872144699,0.9962767362594604,-0.05740531533956528,-0.02072206884622574,0.9894101023674011,-0.143589586019516,-0.0064699240028858185,0.9910580515861511,-0.13318277895450592,0.0029602954164147377,0.9907223582267761,-0.1356852948665619,0.018799401819705963,0.9895321726799011,-0.1429792195558548,0.06598101556301117,0.9960936307907104,-0.058381907641887665,-0.999847412109375,-0.01672414317727089,9.155552834272385e-05,-0.999847412109375,-0.01672414317727089,9.155552834272385e-05,-0.010528885759413242,0.8826563358306885,0.4698629677295685,0.35319072008132935,0.9353618025779724,0.01754814386367798,-0.39320048689842224,0.9192480444908142,0.017242956906557083,-0.39320048689842224,0.9192480444908142,0.017242956906557083,-0.007751701399683952,0.8721579909324646,0.48912015557289124,0.3733939528465271,0.9275185465812683,0.01580858789384365,-0.004547257907688618,0.9071016311645508,-0.4208807647228241,-0.3866389989852905,0.922086238861084,0.0157170332968235,0.3711661100387573,0.9284645915031433,0.012726218439638615,0.3711661100387573,0.9284645915031433,0.012726218439638615,0.00906399730592966,0.8916898369789124,-0.4525284469127655,0.008697775192558765,0.8592486381530762,0.5114597082138062,0.008697775192558765,0.8592486381530762,0.5114597082138062,0.999969482421875,-0.007782219909131527,-9.155552834272385e-05,-0.999969482421875,0.0011291848495602608,-0.0,0.004028443247079849,0.8748435974121094,0.4843592643737793,-6.103701889514923e-05,-0.013458662666380405,0.999908447265625,0.3815424144268036,0.9241309762001038,0.01980651170015335,-0.3550218343734741,0.9346293807029724,0.020020142197608948,-0.3550218343734741,0.9346293807029724,0.020020142197608948,0.012024292722344398,0.8784447908401489,0.4776451885700226,0.0318308062851429,0.8992888927459717,-0.4361400306224823,-0.99981689453125,0.018829919397830963,0.00039674062281847,-0.99981689453125,0.018829919397830963,0.00039674062281847,-6.103701889514923e-05,-0.006164738908410072,0.999969482421875,0.99981689453125,-0.018829919397830963,9.155552834272385e-05,-0.999969482421875,0.0011291848495602608,-0.0,-0.999969482421875,0.0011291848495602608,-0.0,-6.103701889514923e-05,-0.013458662666380405,0.999908447265625,0.999969482421875,-0.0011291848495602608,-0.0,-0.999969482421875,0.007782219909131527,9.155552834272385e-05,-0.999969482421875,0.007782219909131527,9.155552834272385e-05,-9.155552834272385e-05,-0.010498367249965668,0.99993896484375,0.999969482421875,-0.007782219909131527,-9.155552834272385e-05,-0.999969482421875,-0.0048829615116119385,-6.103701889514923e-05,-0.999969482421875,-0.0048829615116119385,-6.103701889514923e-05,6.103701889514923e-05,-0.011780144646763802,0.999908447265625,0.999969482421875,0.0048829615116119385,6.103701889514923e-05,-0.999969482421875,-0.006286812946200371,-9.155552834272385e-05,-0.999969482421875,-0.006286812946200371,-9.155552834272385e-05,0.00012207403779029846,-0.013733329251408577,0.9998779296875,0.999969482421875,0.006286812946200371,9.155552834272385e-05,-0.999847412109375,-0.01672414317727089,9.155552834272385e-05,-0.999847412109375,-0.01672414317727089,9.155552834272385e-05,3.0518509447574615e-05,-0.005096591077744961,0.999969482421875,0.999847412109375,0.01669362559914589,0.00030518509447574615,0.0011291848495602608,-0.0005188146606087685,0.999969482421875,0.0,0.0,1.0,0.001739555038511753,0.0016174810007214546,0.999969482421875,0.00079348124563694,0.0016174810007214546,0.999969482421875,-0.00079348124563694,0.0016174810007214546,0.999969482421875,0.0,0.9887996912002563,0.14920499920845032,-0.00436414685100317,0.5411236882209778,0.8409070372581482,-0.007080294191837311,0.20059816539287567,0.9796441793441772,-0.0008545182645320892,0.670461118221283,0.7419354915618896,-0.006042664870619774,-0.002868739888072014,0.999969482421875,-0.001739555038511753,0.0016174810007214546,0.999969482421875,0.0,0.0016174810007214546,0.999969482421875,0.0,0.9887996912002563,0.14920499920845032,0.16165654361248016,0.6977751851081848,-0.6977751851081848,0.0,0.5404828190803528,0.8413342833518982,-0.055146947503089905,0.600085437297821,0.7979980111122131,0.0,0.20197150111198425,0.9793694615364075,0.0,0.9887996912002563,0.14920499920845032,-0.005981627851724625,0.13238929212093353,0.9911496043205261,0.2378307431936264,0.9190649390220642,-0.31421858072280884,0.051911983639001846,0.6011536121368408,0.7974181175231934,0.0,0.1343119591474533,0.9909359812736511,0.15732291340827942,0.7202368378639221,0.6756187677383423,1.0,0.0,-0.0,0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.0,-1.0,-0.0,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.0,-1.0,-0.0,-0.2641682028770447,0.7412946224212646,0.616992712020874,0.0,0.0,1.0,-0.2641682028770447,0.7412946224212646,0.616992712020874,0.0,0.0012512588873505592,0.999969482421875,0.0,-0.9676808714866638,0.252052366733551,0.0,-0.0011597033590078354,0.999969482421875,0.0,0.0002136295661330223,0.999969482421875,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.33567309379577637,0.9419537782669067,0.0013733329251408577,-0.23917356133460999,-0.939603865146637,0.24475844204425812,-0.23917356133460999,-0.939603865146637,0.24475844204425812,0.020264290273189545,0.999755859375,-0.006653035059571266,-0.00555436871945858,0.9998779296875,-0.012787255458533764,0.23917356133460999,-0.939603865146637,0.24475844204425812,0.23917356133460999,-0.939603865146637,0.24475844204425812,0.005493331700563431,0.9998779296875,-0.012543107382953167,-0.020966216921806335,0.999725341796875,-0.007812738418579102,-0.0011597033590078354,0.983062207698822,0.1831720918416977,0.061372723430395126,0.9974364638328552,0.03662221133708954,0.011200292967259884,0.9810785055160522,0.19312113523483276,0.008514664135873318,0.983336865901947,0.1814935803413391,-0.0056764427572488785,0.9848933219909668,0.17300942540168762,-0.01184118166565895,0.9787896275520325,0.20438246428966522,-0.062990203499794,0.9972533583641052,0.03827021270990372,-0.002533036284148693,0.9904171824455261,-0.13788262009620667,0.06414990872144699,0.9962767362594604,-0.05740531533956528,0.02072206884622574,0.9894101023674011,-0.143589586019516,0.0064699240028858185,0.9910580515861511,-0.13318277895450592,-0.0029602954164147377,0.9907223582267761,-0.1356852948665619,-0.018799401819705963,0.9895321726799011,-0.1429792195558548,-0.06598101556301117,0.9960936307907104,-0.058381907641887665,0.999847412109375,-0.01672414317727089,9.155552834272385e-05,0.999847412109375,-0.01672414317727089,9.155552834272385e-05,0.010528885759413242,0.8826563358306885,0.4698629677295685,-0.35319072008132935,0.9353618025779724,0.01754814386367798,0.39320048689842224,0.9192480444908142,0.017242956906557083,0.39320048689842224,0.9192480444908142,0.017242956906557083,0.007751701399683952,0.8721579909324646,0.48912015557289124,-0.3733939528465271,0.9275185465812683,0.01580858789384365,0.004547257907688618,0.9071016311645508,-0.4208807647228241,0.3866389989852905,0.922086238861084,0.0157170332968235,-0.3711661100387573,0.9284645915031433,0.012726218439638615,-0.3711661100387573,0.9284645915031433,0.012726218439638615,-0.00906399730592966,0.8916898369789124,-0.4525284469127655,-0.008697775192558765,0.8592486381530762,0.5114597082138062,-0.008697775192558765,0.8592486381530762,0.5114597082138062,-0.999969482421875,-0.007782219909131527,-9.155552834272385e-05,0.999969482421875,0.0011291848495602608,-0.0,-0.004028443247079849,0.8748435974121094,0.4843592643737793,6.103701889514923e-05,-0.013458662666380405,0.999908447265625,-0.3815424144268036,0.9241309762001038,0.01980651170015335,0.3550218343734741,0.9346293807029724,0.020020142197608948,0.3550218343734741,0.9346293807029724,0.020020142197608948,-0.012024292722344398,0.8784447908401489,0.4776451885700226,-0.0318308062851429,0.8992888927459717,-0.4361400306224823,0.99981689453125,0.018829919397830963,0.00039674062281847,0.99981689453125,0.018829919397830963,0.00039674062281847,6.103701889514923e-05,-0.006164738908410072,0.999969482421875,-0.99981689453125,-0.018829919397830963,9.155552834272385e-05,0.999969482421875,0.0011291848495602608,-0.0,0.999969482421875,0.0011291848495602608,-0.0,6.103701889514923e-05,-0.013458662666380405,0.999908447265625,-0.999969482421875,-0.0011291848495602608,-0.0,0.999969482421875,0.007782219909131527,9.155552834272385e-05,0.999969482421875,0.007782219909131527,9.155552834272385e-05,9.155552834272385e-05,-0.010498367249965668,0.99993896484375,-0.999969482421875,-0.007782219909131527,-9.155552834272385e-05,0.999969482421875,-0.0048829615116119385,-6.103701889514923e-05,0.999969482421875,-0.0048829615116119385,-6.103701889514923e-05,-6.103701889514923e-05,-0.011780144646763802,0.999908447265625,-0.999969482421875,0.0048829615116119385,6.103701889514923e-05,0.999969482421875,-0.006286812946200371,-9.155552834272385e-05,0.999969482421875,-0.006286812946200371,-9.155552834272385e-05,-0.00012207403779029846,-0.013733329251408577,0.9998779296875,-0.999969482421875,0.006286812946200371,9.155552834272385e-05,0.999847412109375,-0.01672414317727089,9.155552834272385e-05,0.999847412109375,-0.01672414317727089,9.155552834272385e-05,-3.0518509447574615e-05,-0.005096591077744961,0.999969482421875,-0.999847412109375,0.01669362559914589,0.00030518509447574615,0.0,0.0,1.0,-0.0011291848495602608,-0.0005188146606087685,0.999969482421875,0.0,0.0,1.0,-0.001739555038511753,0.0016174810007214546,0.999969482421875,0.0,0.0016174810007214546,0.999969482421875,0.0,-1.0,-0.0,-0.00079348124563694,0.0016174810007214546,0.999969482421875,0.0,0.0016174810007214546,0.999969482421875,0.0,0.9887996912002563,0.14920499920845032,0.0,0.9887996912002563,0.14920499920845032,0.4773705303668976,0.6213263273239136,-0.6213263273239136,0.1576891392469406,0.7200537323951721,0.6757103204727173,0.0,0.9887996912002563,0.14920499920845032,0.33567309379577637,0.9419537782669067,0.0013733329251408577,1.0,0.0,-0.0,-0.2641682028770447,0.7412946224212646,0.616992712020874,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.0,-1.0,-0.0,0.999969482421875,0.0,-0.0,0.0,-1.0,-0.0,-0.2641682028770447,0.7412946224212646,0.616992712020874,0.6303598284721375,0.7345194816589355,-0.25113680958747864,0.6303598284721375,0.7345194816589355,-0.25113680958747864,0.0,0.670796811580658,0.7416303157806396,0.0,0.9887996912002563,0.14920499920845032,0.6303598284721375,0.7345194816589355,-0.25113680958747864,0.0,0.0012512588873505592,0.999969482421875,0.33567309379577637,0.9419537782669067,0.0013733329251408577,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,-1.0,0.0,-0.0,-0.0004882961511611938,0.0006408886983990669,0.999969482421875,-1.0,0.0,-0.0,-0.999969482421875,0.0,-0.0,0.0,-1.0,-0.0,-6.103701889514923e-05,0.0002441480755805969,0.999969482421875,0.0,-1.0,-0.0,6.103701889514923e-05,0.0002441480755805969,1.0,1.0,0.0,-0.0,0.0004882961511611938,0.0006408886983990669,0.999969482421875,1.0,0.0,-0.0,0.00045777764171361923,0.0013733329251408577,0.999969482421875,-0.00045777764171361923,0.0013733329251408577,0.999969482421875,0.00045777764171361923,0.0009460737928748131,0.999969482421875,-0.9491561651229858,-0.00012207403779029846,0.31476789712905884,-0.9491561651229858,-0.00012207403779029846,0.31476789712905884,-0.00012207403779029846,-0.0011597033590078354,0.999969482421875,0.9491561651229858,-0.00012207403779029846,0.31476789712905884,-0.00045777764171361923,0.0009460737928748131,0.999969482421875,0.9491561651229858,-0.00012207403779029846,0.31476789712905884,0.00012207403779029846,-0.0011597033590078354,0.999969482421875,0.0,-0.0011597033590078354,0.999969482421875,0.9491561651229858,-0.00012207403779029846,0.31476789712905884,0.00012207403779029846,-0.0011597033590078354,0.999969482421875,0.9491561651229858,-0.00012207403779029846,0.31476789712905884,-0.00027466658502817154,0.0002441480755805969,0.999969482421875,0.00027466658502817154,0.0002441480755805969,0.999969482421875,-0.9491561651229858,-0.00012207403779029846,0.31476789712905884,-0.9491561651229858,-0.00012207403779029846,0.31476789712905884,-0.00012207403779029846,-0.0011597033590078354,0.999969482421875,0.00079348124563694,0.99957275390625,0.02868739888072014,0.0,0.0002136295661330223,1.0,0.3815424144268036,0.9241309762001038,0.01980651170015335,-0.3550218343734741,0.9346293807029724,0.020020142197608948,0.3815424144268036,0.9241309762001038,0.01980651170015335,-0.3550218343734741,0.9346293807029724,0.020020142197608948,0.0318308062851429,0.8992888927459717,-0.4361400306224823,-0.99981689453125,0.018829919397830963,0.00039674062281847,0.0002136295661330223,0.006164738908410072,-0.999969482421875,-0.3866389989852905,0.922086238861084,0.0157170332968235,0.3733939528465271,0.9275185465812683,0.01580858789384365,6.103701889514923e-05,-0.011780144646763802,0.999908447265625,-0.999969482421875,-0.0048829615116119385,-6.103701889514923e-05,-0.006775109097361565,0.8767967820167542,0.48075807094573975,0.3733939528465271,0.9275185465812683,0.01580858789384365,0.00012207403779029846,-0.013733329251408577,0.9998779296875,0.999969482421875,0.006286812946200371,9.155552834272385e-05,0.4196600317955017,0.9075594544410706,0.012390514835715294,-0.37778863310813904,0.9257789850234985,0.01263466291129589,-0.999969482421875,0.0011291848495602608,-0.0,-6.103701889514923e-05,-0.013458662666380405,0.999908447265625,-0.37778863310813904,0.9257789850234985,0.01263466291129589,0.3711661100387573,0.9284645915031433,0.012726218439638615,-0.39481794834136963,0.9186681509017944,0.012573625892400742,-0.39481794834136963,0.9186681509017944,0.012573625892400742,-0.999969482421875,0.007782219909131527,9.155552834272385e-05,-9.155552834272385e-05,-0.010498367249965668,0.99993896484375,-0.39320048689842224,0.9192480444908142,0.017242956906557083,0.35319072008132935,0.9353618025779724,0.01754814386367798,-0.39320048689842224,0.9192480444908142,0.017242956906557083,0.35319072008132935,0.9353618025779724,0.01754814386367798,-0.00015259254723787308,0.005096591077744961,-0.999969482421875,-0.02850428782403469,0.9012115597724915,-0.43241676688194275,-0.4049806296825409,0.9143040180206299,-0.005005035549402237,-0.010528885759413242,0.8826563358306885,0.4698629677295685,-0.4049806296825409,0.9143040180206299,-0.005005035549402237,3.0518509447574615e-05,-0.005096591077744961,0.999969482421875,0.35319072008132935,0.9353618025779724,0.01754814386367798,3.0518509447574615e-05,-0.005096591077744961,0.999969482421875,0.999847412109375,0.01669362559914589,0.00030518509447574615,-0.00015259254723787308,0.005096591077744961,-0.999969482421875,0.999847412109375,0.01669362559914589,0.00030518509447574615,-0.02850428782403469,0.9012115597724915,-0.43241676688194275,-0.006775109097361565,0.9064302444458008,-0.4222846031188965,-0.999969482421875,-0.006286812946200371,-9.155552834272385e-05,-9.155552834272385e-05,0.013733329251408577,-0.9998779296875,-0.007751701399683952,0.8721579909324646,0.48912015557289124,-0.999969482421875,-0.006286812946200371,-9.155552834272385e-05,0.00012207403779029846,-0.013733329251408577,0.9998779296875,6.103701889514923e-05,-0.011780144646763802,0.999908447265625,-0.006775109097361565,0.8767967820167542,0.48075807094573975,0.999969482421875,0.0048829615116119385,6.103701889514923e-05,-0.006775109097361565,0.9064302444458008,-0.4222846031188965,0.999969482421875,0.006286812946200371,9.155552834272385e-05,-9.155552834272385e-05,0.013733329251408577,-0.9998779296875,0.3733939528465271,0.9275185465812683,0.01580858789384365,-0.3866389989852905,0.922086238861084,0.0157170332968235,-0.3866389989852905,0.922086238861084,0.0157170332968235,-0.999969482421875,-0.0048829615116119385,-6.103701889514923e-05,-3.0518509447574615e-05,0.011780144646763802,-0.999908447265625,0.999969482421875,-0.007782219909131527,-9.155552834272385e-05,-9.155552834272385e-05,-0.010498367249965668,0.99993896484375,0.4196600317955017,0.9075594544410706,0.012390514835715294,-0.004547257907688618,0.9071016311645508,-0.4208807647228241,0.999969482421875,0.0048829615116119385,6.103701889514923e-05,-3.0518509447574615e-05,0.011780144646763802,-0.999908447265625,0.3711661100387573,0.9284645915031433,0.012726218439638615,-0.39481794834136963,0.9186681509017944,0.012573625892400742,-0.39481794834136963,0.9186681509017944,0.012573625892400742,-0.999969482421875,0.007782219909131527,9.155552834272385e-05,9.155552834272385e-05,0.010498367249965668,-0.99993896484375,0.00906399730592966,0.8916898369789124,-0.4525284469127655,0.4196600317955017,0.9075594544410706,0.012390514835715294,9.155552834272385e-05,0.010498367249965668,-0.99993896484375,-0.0014954069629311562,0.9080172181129456,-0.4188970625400543,-0.37778863310813904,0.9257789850234985,0.01263466291129589,0.0,0.013458662666380405,-0.999908447265625,0.3815424144268036,0.9241309762001038,0.01980651170015335,0.004028443247079849,0.8748435974121094,0.4843592643737793,0.999969482421875,-0.0011291848495602608,-0.0,0.4196600317955017,0.9075594544410706,0.012390514835715294,-0.37778863310813904,0.9257789850234985,0.01263466291129589,-0.0014954069629311562,0.9080172181129456,-0.4188970625400543,0.999969482421875,-0.0011291848495602608,-0.0,0.0,0.013458662666380405,-0.999908447265625,0.99981689453125,-0.018829919397830963,9.155552834272385e-05,-6.103701889514923e-05,-0.006164738908410072,0.999969482421875,0.41346475481987,0.9104892015457153,-0.004821924492716789,0.012024292722344398,0.8784447908401489,0.4776451885700226,-0.99981689453125,0.018829919397830963,0.00039674062281847,-6.103701889514923e-05,-0.006164738908410072,0.999969482421875,0.99981689453125,-0.018829919397830963,9.155552834272385e-05,0.41346475481987,0.9104892015457153,-0.004821924492716789,0.0002136295661330223,0.006164738908410072,-0.999969482421875,-6.103701889514923e-05,-0.006164738908410072,0.999969482421875,0.02453688159584999,0.999664306640625,0.008056886494159698,0.0002136295661330223,0.006164738908410072,-0.999969482421875,0.02453688159584999,0.999664306640625,0.008056886494159698,0.99981689453125,-0.018829919397830963,9.155552834272385e-05,0.02453688159584999,0.999664306640625,0.008056886494159698,0.0002136295661330223,0.006164738908410072,-0.999969482421875,0.02453688159584999,0.999664306640625,0.008056886494159698,-6.103701889514923e-05,-0.013458662666380405,0.999908447265625,0.0014648884534835815,0.99981689453125,0.01754814386367798,0.0,0.013458662666380405,-0.999908447265625,0.0014648884534835815,0.99981689453125,0.01754814386367798,0.999969482421875,-0.0011291848495602608,-0.0,0.0014648884534835815,0.99981689453125,0.01754814386367798,0.0,0.013458662666380405,-0.999908447265625,0.0014648884534835815,0.99981689453125,0.01754814386367798,-9.155552834272385e-05,-0.010498367249965668,0.99993896484375,0.010162663646042347,0.999847412109375,0.013672292232513428,9.155552834272385e-05,0.010498367249965668,-0.99993896484375,0.010162663646042347,0.999847412109375,0.013672292232513428,0.999969482421875,-0.007782219909131527,-9.155552834272385e-05,0.010162663646042347,0.999847412109375,0.013672292232513428,9.155552834272385e-05,0.010498367249965668,-0.99993896484375,0.010162663646042347,0.999847412109375,0.013672292232513428,6.103701889514923e-05,-0.011780144646763802,0.999908447265625,-0.006378368474543095,0.999847412109375,0.015381328761577606,-3.0518509447574615e-05,0.011780144646763802,-0.999908447265625,-0.006378368474543095,0.999847412109375,0.015381328761577606,0.999969482421875,0.0048829615116119385,6.103701889514923e-05,-0.006378368474543095,0.999847412109375,0.015381328761577606,-3.0518509447574615e-05,0.011780144646763802,-0.999908447265625,-0.006378368474543095,0.999847412109375,0.015381328761577606,0.00012207403779029846,-0.013733329251408577,0.9998779296875,-0.008178960531949997,0.999786376953125,0.017914365977048874,-9.155552834272385e-05,0.013733329251408577,-0.9998779296875,-0.008178960531949997,0.999786376953125,0.017914365977048874,0.999969482421875,0.006286812946200371,9.155552834272385e-05,-0.008178960531949997,0.999786376953125,0.017914365977048874,-9.155552834272385e-05,0.013733329251408577,-0.9998779296875,-0.008178960531949997,0.999786376953125,0.017914365977048874,3.0518509447574615e-05,-0.005096591077744961,0.999969482421875,-0.021790215745568275,0.999725341796875,0.0066225165501236916,-0.00015259254723787308,0.005096591077744961,-0.999969482421875,-0.021790215745568275,0.999725341796875,0.0066225165501236916,0.999847412109375,0.01669362559914589,0.00030518509447574615,-0.021790215745568275,0.999725341796875,0.0066225165501236916,-0.00015259254723787308,0.005096591077744961,-0.999969482421875,-0.021790215745568275,0.999725341796875,0.0066225165501236916,0.0,1.0,-0.0,0.9607226848602295,0.2775048017501831,-0.0008850367739796638,0.0,1.0,-0.0,0.9360331892967224,0.35187840461730957,-0.0,0.9360331892967224,0.35187840461730957,-0.0,0.0,0.9887996912002563,0.14920499920845032,0.9360331892967224,0.35187840461730957,-0.0,0.9360331892967224,0.35187840461730957,-0.0,0.0,0.0,1.0,-0.08911404758691788,0.616992712020874,-0.7818841934204102,0.0,-0.999969482421875,-0.0,0.0,-1.0,-0.0,0.8646504282951355,0.4995269775390625,0.052858058363199234,0.8646504282951355,0.4995269775390625,0.052858058363199234,0.0,0.6194341778755188,-0.7850276231765747,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,-0.9676808714866638,0.252052366733551,3.0518509447574615e-05,0.999969482421875,0.0021973326802253723,0.0,-1.0,-0.0,0.0,0.6194341778755188,-0.7850276231765747,0.0,0.0,1.0,0.0,0.0016174810007214546,0.999969482421875,0.0,0.9887996912002563,0.14920499920845032,0.0,0.9887996912002563,0.14920499920845032,0.16165654361248016,0.6977751851081848,-0.6977751851081848,-0.1576891392469406,0.7200537323951721,0.6757103204727173,0.0,0.9887996912002563,0.14920499920845032,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,-1.0,0.0,-0.0,0.2641682028770447,0.7412946224212646,0.616992712020874,0.33567309379577637,0.9419537782669067,0.0013733329251408577,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.0,-1.0,-0.0,-0.999969482421875,0.0,-0.0,0.0,-1.0,-0.0,0.2641682028770447,0.7412946224212646,0.616992712020874,0.2378307431936264,0.9190649390220642,-0.31421858072280884,0.2378307431936264,0.9190649390220642,-0.31421858072280884,0.0,0.9887996912002563,0.14920499920845032,0.2378307431936264,0.9190649390220642,-0.31421858072280884,0.0,0.0012512588873505592,0.999969482421875,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.33567309379577637,0.9419537782669067,0.0013733329251408577,1.0,0.0,-0.0,0.0004882961511611938,0.0006408886983990669,0.999969482421875,1.0,0.0,-0.0,0.999969482421875,0.0,-0.0,0.0,-1.0,-0.0,6.103701889514923e-05,0.0002441480755805969,0.999969482421875,0.0,-1.0,-0.0,-6.103701889514923e-05,0.0002441480755805969,1.0,-1.0,0.0,-0.0,-0.0004882961511611938,0.0006408886983990669,0.999969482421875,-1.0,0.0,-0.0,-0.00045777764171361923,0.0013733329251408577,0.999969482421875,0.00045777764171361923,0.0013733329251408577,0.999969482421875,-0.00045777764171361923,0.0009460737928748131,0.999969482421875,0.9491561651229858,-0.00012207403779029846,0.31476789712905884,0.9491561651229858,-0.00012207403779029846,0.31476789712905884,0.00012207403779029846,-0.0011597033590078354,0.999969482421875,-0.9491561651229858,-0.00012207403779029846,0.31476789712905884,0.00045777764171361923,0.0009460737928748131,0.999969482421875,-0.9491561651229858,-0.00012207403779029846,0.31476789712905884,-0.00012207403779029846,-0.0011597033590078354,0.999969482421875,0.0,-0.0011597033590078354,0.999969482421875,-0.9491561651229858,-0.00012207403779029846,0.31476789712905884,-0.00012207403779029846,-0.0011597033590078354,0.999969482421875,-0.9491561651229858,-0.00012207403779029846,0.31476789712905884,0.00027466658502817154,0.0002441480755805969,0.999969482421875,-0.00027466658502817154,0.0002441480755805969,0.999969482421875,0.9491561651229858,-0.00012207403779029846,0.31476789712905884,0.9491561651229858,-0.00012207403779029846,0.31476789712905884,0.00012207403779029846,-0.0011597033590078354,0.999969482421875,-0.00079348124563694,0.99957275390625,0.02868739888072014,0.0,0.0002136295661330223,1.0,-0.3815424144268036,0.9241309762001038,0.01980651170015335,0.3550218343734741,0.9346293807029724,0.020020142197608948,-0.3815424144268036,0.9241309762001038,0.01980651170015335,0.3550218343734741,0.9346293807029724,0.020020142197608948,-0.0318308062851429,0.8992888927459717,-0.4361400306224823,0.99981689453125,0.018829919397830963,0.00039674062281847,-0.0002136295661330223,0.006164738908410072,-0.999969482421875,0.3866389989852905,0.922086238861084,0.0157170332968235,-0.3733939528465271,0.9275185465812683,0.01580858789384365,-6.103701889514923e-05,-0.011780144646763802,0.999908447265625,0.999969482421875,-0.0048829615116119385,-6.103701889514923e-05,0.006775109097361565,0.8767967820167542,0.48075807094573975,-0.3733939528465271,0.9275185465812683,0.01580858789384365,-0.00012207403779029846,-0.013733329251408577,0.9998779296875,-0.999969482421875,0.006286812946200371,9.155552834272385e-05,-0.4196905493736267,0.9075594544410706,0.012390514835715294,0.37778863310813904,0.9257789850234985,0.01263466291129589,0.999969482421875,0.0011291848495602608,-0.0,6.103701889514923e-05,-0.013458662666380405,0.999908447265625,0.37778863310813904,0.9257789850234985,0.01263466291129589,-0.3711661100387573,0.9284645915031433,0.012726218439638615,0.39481794834136963,0.9186681509017944,0.012573625892400742,0.39481794834136963,0.9186681509017944,0.012573625892400742,0.999969482421875,0.007782219909131527,9.155552834272385e-05,9.155552834272385e-05,-0.010498367249965668,0.99993896484375,0.39320048689842224,0.9192480444908142,0.017242956906557083,-0.35319072008132935,0.9353618025779724,0.01754814386367798,0.39320048689842224,0.9192480444908142,0.017242956906557083,-0.35319072008132935,0.9353618025779724,0.01754814386367798,0.00015259254723787308,0.005096591077744961,-0.999969482421875,0.02850428782403469,0.9012115597724915,-0.43241676688194275,0.4049806296825409,0.9143040180206299,-0.005005035549402237,0.010528885759413242,0.8826563358306885,0.4698629677295685,0.4049806296825409,0.9143040180206299,-0.005005035549402237,-3.0518509447574615e-05,-0.005096591077744961,0.999969482421875,-0.35319072008132935,0.9353618025779724,0.01754814386367798,-3.0518509447574615e-05,-0.005096591077744961,0.999969482421875,-0.999847412109375,0.01669362559914589,0.00030518509447574615,0.00015259254723787308,0.005096591077744961,-0.999969482421875,-0.999847412109375,0.01669362559914589,0.00030518509447574615,0.02850428782403469,0.9012115597724915,-0.43241676688194275,0.006775109097361565,0.9064302444458008,-0.4222846031188965,0.999969482421875,-0.006286812946200371,-9.155552834272385e-05,9.155552834272385e-05,0.013733329251408577,-0.9998779296875,0.007751701399683952,0.8721579909324646,0.48912015557289124,0.999969482421875,-0.006286812946200371,-9.155552834272385e-05,-0.00012207403779029846,-0.013733329251408577,0.9998779296875,-6.103701889514923e-05,-0.011780144646763802,0.999908447265625,0.006775109097361565,0.8767967820167542,0.48075807094573975,-0.999969482421875,0.0048829615116119385,6.103701889514923e-05,0.006775109097361565,0.9064302444458008,-0.4222846031188965,-0.999969482421875,0.006286812946200371,9.155552834272385e-05,9.155552834272385e-05,0.013733329251408577,-0.9998779296875,-0.3733939528465271,0.9275185465812683,0.01580858789384365,0.3866389989852905,0.922086238861084,0.0157170332968235,0.3866389989852905,0.922086238861084,0.0157170332968235,0.999969482421875,-0.0048829615116119385,-6.103701889514923e-05,3.0518509447574615e-05,0.011780144646763802,-0.999908447265625,-0.999969482421875,-0.007782219909131527,-9.155552834272385e-05,9.155552834272385e-05,-0.010498367249965668,0.99993896484375,-0.4196905493736267,0.9075594544410706,0.012390514835715294,0.004547257907688618,0.9071016311645508,-0.4208807647228241,-0.999969482421875,0.0048829615116119385,6.103701889514923e-05,3.0518509447574615e-05,0.011780144646763802,-0.999908447265625,-0.3711661100387573,0.9284645915031433,0.012726218439638615,0.39481794834136963,0.9186681509017944,0.012573625892400742,0.39481794834136963,0.9186681509017944,0.012573625892400742,0.999969482421875,0.007782219909131527,9.155552834272385e-05,-9.155552834272385e-05,0.010498367249965668,-0.99993896484375,-0.00906399730592966,0.8916898369789124,-0.4525284469127655,-0.4196905493736267,0.9075594544410706,0.012390514835715294,-9.155552834272385e-05,0.010498367249965668,-0.99993896484375,0.0014954069629311562,0.9080172181129456,-0.4188970625400543,0.37778863310813904,0.9257789850234985,0.01263466291129589,0.0,0.013458662666380405,-0.999908447265625,-0.3815424144268036,0.9241309762001038,0.01980651170015335,-0.004028443247079849,0.8748435974121094,0.4843592643737793,-0.999969482421875,-0.0011291848495602608,-0.0,-0.4196905493736267,0.9075594544410706,0.012390514835715294,0.37778863310813904,0.9257789850234985,0.01263466291129589,0.0014954069629311562,0.9080172181129456,-0.4188970625400543,-0.999969482421875,-0.0011291848495602608,-0.0,0.0,0.013458662666380405,-0.999908447265625,-0.99981689453125,-0.018829919397830963,9.155552834272385e-05,6.103701889514923e-05,-0.006164738908410072,0.999969482421875,-0.41346475481987,0.9104892015457153,-0.004821924492716789,-0.012024292722344398,0.8784447908401489,0.4776451885700226,0.99981689453125,0.018829919397830963,0.00039674062281847,6.103701889514923e-05,-0.006164738908410072,0.999969482421875,-0.99981689453125,-0.018829919397830963,9.155552834272385e-05,-0.41346475481987,0.9104892015457153,-0.004821924492716789,-0.0002136295661330223,0.006164738908410072,-0.999969482421875,6.103701889514923e-05,-0.006164738908410072,0.999969482421875,-0.02453688159584999,0.999664306640625,0.008056886494159698,-0.0002136295661330223,0.006164738908410072,-0.999969482421875,-0.02453688159584999,0.999664306640625,0.008056886494159698,-0.99981689453125,-0.018829919397830963,9.155552834272385e-05,-0.02453688159584999,0.999664306640625,0.008056886494159698,-0.0002136295661330223,0.006164738908410072,-0.999969482421875,-0.02453688159584999,0.999664306640625,0.008056886494159698,6.103701889514923e-05,-0.013458662666380405,0.999908447265625,-0.0014648884534835815,0.99981689453125,0.01754814386367798,0.0,0.013458662666380405,-0.999908447265625,-0.0014648884534835815,0.99981689453125,0.01754814386367798,-0.999969482421875,-0.0011291848495602608,-0.0,-0.0014648884534835815,0.99981689453125,0.01754814386367798,0.0,0.013458662666380405,-0.999908447265625,-0.0014648884534835815,0.99981689453125,0.01754814386367798,9.155552834272385e-05,-0.010498367249965668,0.99993896484375,-0.010162663646042347,0.999847412109375,0.013672292232513428,-9.155552834272385e-05,0.010498367249965668,-0.99993896484375,-0.010162663646042347,0.999847412109375,0.013672292232513428,-0.999969482421875,-0.007782219909131527,-9.155552834272385e-05,-0.010162663646042347,0.999847412109375,0.013672292232513428,-9.155552834272385e-05,0.010498367249965668,-0.99993896484375,-0.010162663646042347,0.999847412109375,0.013672292232513428,-6.103701889514923e-05,-0.011780144646763802,0.999908447265625,0.006378368474543095,0.999847412109375,0.015381328761577606,3.0518509447574615e-05,0.011780144646763802,-0.999908447265625,0.006378368474543095,0.999847412109375,0.015381328761577606,-0.999969482421875,0.0048829615116119385,6.103701889514923e-05,0.006378368474543095,0.999847412109375,0.015381328761577606,3.0518509447574615e-05,0.011780144646763802,-0.999908447265625,0.006378368474543095,0.999847412109375,0.015381328761577606,-0.00012207403779029846,-0.013733329251408577,0.9998779296875,0.008178960531949997,0.999786376953125,0.017914365977048874,9.155552834272385e-05,0.013733329251408577,-0.9998779296875,0.008178960531949997,0.999786376953125,0.017914365977048874,-0.999969482421875,0.006286812946200371,9.155552834272385e-05,0.008178960531949997,0.999786376953125,0.017914365977048874,9.155552834272385e-05,0.013733329251408577,-0.9998779296875,0.008178960531949997,0.999786376953125,0.017914365977048874,-3.0518509447574615e-05,-0.005096591077744961,0.999969482421875,0.021790215745568275,0.999725341796875,0.0066225165501236916,0.00015259254723787308,0.005096591077744961,-0.999969482421875,0.021790215745568275,0.999725341796875,0.0066225165501236916,-0.999847412109375,0.01669362559914589,0.00030518509447574615,0.021790215745568275,0.999725341796875,0.0066225165501236916,0.00015259254723787308,0.005096591077744961,-0.999969482421875,0.021790215745568275,0.999725341796875,0.0066225165501236916,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0032349620014429092,0.0,1.0,-0.0,0.6256599426269531,0.7800835967063904,-0.0,0.6256599426269531,0.7800835967063904,-0.0,0.0,0.9887996912002563,0.14920499920845032,0.6256599426269531,0.7800835967063904,-0.0,0.6256599426269531,0.7800835967063904,-0.0,0.0,0.0,1.0,0.08911404758691788,0.616992712020874,-0.7818841934204102,0.0,-0.999969482421875,-0.0,0.0,1.0,-0.0,0.0,-0.9676808714866638,0.252052366733551,-3.0518509447574615e-05,0.999969482421875,0.0021973326802253723,0.0,-1.0,-0.0],"indices":[4,8,218,8,4,2,13,113,231,113,13,11,8,3,9,3,8,2,228,11,13,11,228,222,218,22,20,22,218,8,27,220,17,248,23,234,23,248,250,42,43,267,427,30,29,30,427,24,33,24,427,24,33,34,28,223,18,223,28,236,41,42,267,37,41,267,15,236,28,40,37,267,32,45,38,32,31,45,113,12,115,12,113,11,254,259,261,259,254,256,39,40,267,38,39,267,238,262,242,262,238,255,6,211,214,211,6,101,416,412,421,43,35,267,36,35,50,32,38,267,19,227,241,14,237,239,237,14,240,246,250,248,16,225,19,50,35,43,9,99,21,19,225,227,269,344,70,344,269,271,272,71,72,71,272,270,296,55,56,55,296,294,40,313,57,313,40,39,39,301,53,301,39,38,19,241,243,295,304,54,304,295,297,322,281,58,281,322,277,47,330,59,330,47,44,44,338,63,338,44,48,46,319,310,319,46,47,41,64,65,64,41,37,333,61,62,61,333,289,48,349,341,349,48,49,43,355,73,355,43,42,49,74,273,74,49,50,276,324,60,324,276,323,290,335,291,335,290,334,356,75,76,75,356,274,353,361,77,361,353,357,358,365,78,365,358,352,275,367,363,367,275,360,286,79,80,79,286,67,69,369,81,369,69,287,350,373,82,373,350,346,343,375,371,375,343,351,292,83,84,83,292,336,328,377,85,377,328,293,66,381,86,381,66,327,337,383,379,383,337,340,279,87,88,87,279,325,316,385,89,385,316,278,331,389,90,389,331,318,326,391,387,391,326,332,314,91,92,91,314,311,282,393,93,393,282,315,320,397,94,397,320,283,312,399,395,399,312,321,52,95,96,95,52,51,305,401,97,401,305,303,308,405,98,405,308,306,298,407,403,407,298,307,408,402,404,402,408,406,400,394,396,394,400,398,368,362,364,362,368,366,376,370,372,370,376,374,384,378,380,378,384,382,392,386,388,386,392,390,263,268,26,268,263,244,12,207,115,207,12,100,21,100,12,100,21,99,250,244,263,244,250,246,411,426,424,426,411,409,252,264,265,264,252,251,247,226,245,226,247,221,258,266,25,266,258,253,234,255,249,255,234,23,235,220,27,220,235,224,31,46,45,46,31,428,428,47,46,428,44,47,428,48,44,428,49,48,428,50,49,50,428,36,257,25,260,25,257,258,7,10,229,215,116,111,116,215,232,217,230,233,1,219,216,219,1,414,429,420,419,420,429,212,415,410,413,3,99,9,99,3,5,249,255,238,26,242,262,242,26,268,45,309,299,309,45,46,37,280,317,280,37,40,50,354,359,354,50,43,42,68,345,68,42,41,347,329,339,329,347,284,285,342,288,342,285,348,38,300,302,300,38,45,107,114,105,114,107,436,121,113,119,113,121,231,114,106,105,106,114,117,446,119,440,119,446,121,436,130,114,130,436,128,135,125,438,465,131,467,131,465,451,150,484,151,638,138,132,138,638,137,141,132,142,132,141,638,136,441,453,441,136,126,149,484,150,145,484,149,123,136,453,148,484,145,140,146,153,140,153,139,113,120,119,120,113,115,471,476,473,476,471,478,147,484,148,146,484,147,455,479,472,479,455,459,109,211,210,211,109,214,633,422,629,151,484,143,144,158,143,140,484,146,127,458,445,122,454,457,454,122,456,463,465,467,124,127,443,158,151,143,117,129,208,127,445,443,486,561,488,561,486,178,489,179,487,179,489,180,513,163,511,163,513,164,148,530,147,530,148,165,147,518,146,518,147,161,127,460,458,512,521,514,521,512,162,539,498,494,498,539,166,155,547,152,547,155,167,152,555,156,555,152,171,154,536,155,536,154,527,149,172,145,172,149,173,550,169,506,169,550,170,156,566,157,566,156,558,151,572,150,572,151,181,157,182,158,182,157,490,493,541,540,541,493,168,507,552,551,552,507,508,573,183,491,183,573,184,570,578,574,578,570,185,575,582,569,582,575,186,492,584,577,584,492,580,503,187,175,187,503,188,177,586,504,586,177,189,567,590,563,590,567,190,560,592,568,592,560,588,509,191,553,191,509,192,545,594,510,594,545,193,174,598,544,598,174,194,554,600,557,600,554,596,496,195,542,195,496,196,533,602,495,602,533,197,548,606,535,606,548,198,543,608,549,608,543,604,531,199,528,199,531,200,499,610,532,610,499,201,537,614,500,614,537,202,529,616,538,616,529,612,160,203,159,203,160,204,522,618,520,618,522,205,525,622,523,622,525,206,515,624,524,624,515,620,625,619,623,619,625,621,617,611,615,611,617,613,585,579,583,579,585,581,593,587,591,587,593,589,601,595,599,595,601,597,609,603,607,603,609,605,480,485,461,485,480,134,120,207,209,207,120,115,129,209,208,209,129,120,467,461,463,461,467,480,628,637,626,637,628,425,469,481,468,481,469,482,464,444,439,444,464,462,475,483,470,483,475,133,451,472,131,472,451,466,452,438,442,438,452,135,139,154,639,154,139,153,639,154,155,639,155,152,639,152,156,639,156,157,639,158,144,158,639,157,474,133,475,133,474,477,112,447,118,433,116,449,116,433,111,435,450,448,104,437,631,437,104,434,640,420,212,420,640,636,632,630,627,106,208,108,208,106,117,466,455,472,134,459,485,459,134,479,153,526,154,526,153,516,145,497,148,497,145,534,158,571,151,571,158,576,150,176,149,176,150,562,564,546,501,546,564,556,502,559,565,559,502,505,146,517,153,517,146,519,207,417,431,417,207,100,430,418,423,207,634,209,634,207,431,430,423,635,110,102,0,102,110,432,213,110,103,110,213,432]}
var roofCornerMeshBuffer={"positions":[0.0,0.0,2.9802322387695312e-08,0.0,1.0,-0.9999999403953552,0.0,0.731292724609375,-0.15819424390792847,0.0,0.36594465374946594,-0.001184016466140747,0.0,0.8952803611755371,-0.3061159551143646,0.0,0.2888537049293518,-0.0009353458881378174,0.0,0.2888537049293518,0.02964639477431774,0.5555499792098999,0.0,2.9802322387695312e-08,0.5541894435882568,0.730431079864502,-0.15701019763946533,0.15008243918418884,0.730431079864502,-0.15701021254062653,0.5541894435882568,0.36594465374946594,-0.0,0.5358682870864868,0.8952803611755371,-0.32046663761138916,0.15008243918418884,0.36594465374946594,1.4901161193847656e-08,0.26441463828086853,0.8952803611755371,-0.3061159551143646,0.3787468373775482,0.730431079864502,-0.15701021254062653,0.3787468373775482,0.36594465374946594,1.4901161193847656e-08,0.26441463828086853,0.8952803611755371,-0.3061159551143646,0.3787468373775482,0.36594465374946594,0.015972383320331573,0.3787468373775482,0.7301744818687439,0.015866275876760483,0.15008243918418884,0.36594465374946594,0.015972383320331573,0.15008243918418884,0.7301744818687439,0.015866275876760483,0.26441463828086853,0.770918071269989,0.015866275876760483,0.26441463828086853,0.36594465374946594,0.015972383320331573,0.26441463828086853,0.8952803611755371,-0.3061159551143646,0.26441463828086853,0.36594465374946594,1.4901161193847656e-08,0.26441463828086853,0.7711746692657471,-0.15701021254062653,0.26441463828086853,0.7509961128234863,0.01588749699294567,0.26441460847854614,0.7302912473678589,-0.0528719425201416,0.26441463828086853,0.45477741956710815,-0.05318829044699669,0.26441463828086853,0.453829288482666,0.015951162204146385,0.17294886708259583,0.7383232116699219,0.015866275876760483,0.35588037967681885,0.7383232116699219,0.015866275876760483,0.35588037967681885,0.7249202132225037,0.01588749699294567,0.33301395177841187,0.7156234979629517,-0.0528719425201416,0.33301395177841187,0.45310497283935547,-0.05318829044699669,0.35588037967681885,0.4536029100418091,0.015951162204146385,0.17294886708259583,0.7249202132225037,0.01588749699294567,0.1958152949810028,0.7156235575675964,-0.0528719425201416,0.17294886708259583,0.4536029100418091,0.015951162204146385,0.1958152949810028,0.45311713218688965,-0.05318829044699669,0.26441463828086853,0.45405054092407227,0.009205498732626438,0.33301395177841187,0.45339617133140564,0.009205498732626438,0.3101475238800049,0.45366954803466797,0.009205498732626438,0.2872810661792755,0.4538731575012207,0.009205498732626438,0.24154818058013916,0.4538184404373169,0.009205498732626438,0.21868175268173218,0.45371243357658386,0.009205498732626438,0.1958152949810028,0.45339903235435486,0.009205498732626438,0.26441463828086853,0.45430493354797363,-0.009346922859549522,0.33301395177841187,0.4532942771911621,-0.009346922859549522,0.3101474940776825,0.45401811599731445,-0.009346922859549522,0.2872810661792755,0.4541897177696228,-0.009346922859549522,0.24154818058013916,0.45407211780548096,-0.009346922859549522,0.21868175268173218,0.454110324382782,-0.009346922859549522,0.1958152949810028,0.4533003568649292,-0.009346922859549522,0.3269098401069641,0.4560271203517914,-0.004054160788655281,0.3269098401069641,0.4560730755329132,0.004314220044761896,0.31659555435180664,0.4561963677406311,0.004314220044761896,0.31659555435180664,0.4563536047935486,-0.004054160788655281,0.30401116609573364,0.4565430283546448,-0.0040260907262563705,0.30401119589805603,0.45638349652290344,0.004463698714971542,0.29354727268218994,0.45647668838500977,0.004463698714971542,0.29354727268218994,0.45662152767181396,-0.0040260907262563705,0.28104761242866516,0.45671188831329346,-0.0039787860587239265,0.28104761242866516,0.4565693438053131,0.00437645148485899,0.2707495391368866,0.45664921402931213,0.00437645148485899,0.2707495391368866,0.45676377415657043,-0.0039787860587239265,0.25856563448905945,0.4567510187625885,-0.004409827291965485,0.25856563448905945,0.4566250145435333,0.004780808929353952,0.247237890958786,0.4565100371837616,0.004780808929353952,0.247237890958786,0.4566356837749481,-0.004409827291965485,0.23526614904403687,0.4565621018409729,-0.003972608596086502,0.23526614904403687,0.456447571516037,0.004404474515467882,0.22494113445281982,0.45639970898628235,0.004404474515467882,0.22494113445281982,0.4565793573856354,-0.003972608596086502,0.21231049299240112,0.4564184844493866,-0.0041223447769880295,0.21231049299240112,0.4562356173992157,0.004404684994369745,0.2018006443977356,0.45609158277511597,0.004404684994369745,0.2018006443977356,0.4560462236404419,-0.0041223447769880295,0.21097242832183838,0.5274276733398438,-0.003683101385831833,0.21097242832183838,0.5272448062896729,0.004843928385525942,0.20046257972717285,0.5271007418632507,0.004843928385525942,0.20046257972717285,0.5270553827285767,-0.003683101385831833,0.2351853847503662,0.5275810360908508,-0.0030159177258610725,0.2351853847503662,0.5274664759635925,0.005361165385693312,0.22486037015914917,0.5274186134338379,0.005361165385693312,0.22486037015914917,0.5275982618331909,-0.0030159177258610725,0.25801172852516174,0.527770459651947,-0.00366387702524662,0.25801172852516174,0.5276444554328918,0.005526759661734104,0.2466839849948883,0.5275294780731201,0.005526759661734104,0.2466839849948883,0.5276551246643066,-0.00366387702524662,0.28139618039131165,0.527731716632843,-0.0031404634937644005,0.28139618039131165,0.5275891423225403,0.005214774515479803,0.2710981070995331,0.5276690125465393,0.005214774515479803,0.2710981070995331,0.5277835726737976,-0.0031404634937644005,0.3044581413269043,0.5275598168373108,-0.0030494332313537598,0.3044581711292267,0.5274002552032471,0.0054403566755354404,0.2939942479133606,0.5274934768676758,0.0054403566755354404,0.2939942479133606,0.52763831615448,-0.0030494332313537598,0.32809770107269287,0.5270403623580933,-0.0036919256672263145,0.32809770107269287,0.5270863175392151,0.004676455166190863,0.3177834153175354,0.5272095799446106,0.004676455166190863,0.3177834153175354,0.5273668169975281,-0.0036919256672263145,0.5541894435882568,0.2888537049293518,2.9802322387695312e-08,0.26441463828086853,0.2888537049293518,1.816079020500183e-08,0.26441463828086853,0.2888537049293518,1.816079020500183e-08,0.0,0.2500981092453003,0.02977186255156994,0.5650084018707275,0.25011563301086426,0.025680791586637497,0.5541894435882568,0.2888537049293518,2.9802322387695312e-08,0.0,0.2500981092453003,-0.0008098483085632324,0.5541894435882568,0.2500981092453003,2.9802322387695312e-08,0.5650084018707275,0.28887122869491577,0.02568076178431511,1.0,0.0,-0.46331000328063965,0.8418057560920715,0.731292724609375,-0.46331241726875305,0.9988160133361816,0.36594465374946594,-0.46331241726875305,0.675562858581543,0.8952803611755371,-0.4776631295681,0.9990646839141846,0.2888537049293518,-0.46331241726875305,1.0251744985580444,0.28887122869491577,-0.452922523021698,1.0000001192092896,0.0,-0.9962208867073059,0.8429898619651794,0.730431079864502,-0.9962208867073059,0.8429898023605347,0.730431079864502,-0.6135652661323547,1.0,0.36594465374946594,-0.9962208867073059,0.6938840746879578,0.8952803611755371,-0.9962208867073059,1.0,0.36594465374946594,-0.61356520652771,0.6938840746879578,0.8952803611755371,-0.7278974652290344,0.8429898023605347,0.730431079864502,-0.8422296643257141,1.0,0.36594465374946594,-0.8422296047210693,0.6938840746879578,0.8952803611755371,-0.7278974652290344,1.015972375869751,0.36594465374946594,-0.8422296047210693,1.0158662796020508,0.7301744818687439,-0.8422296047210693,1.015972375869751,0.36594465374946594,-0.61356520652771,1.0158662796020508,0.7301744818687439,-0.61356520652771,1.0158662796020508,0.770918071269989,-0.7278974056243896,1.015972375869751,0.36594465374946594,-0.7278974056243896,0.6938840746879578,0.8952803611755371,-0.7278974652290344,1.0,0.36594465374946594,-0.7278974056243896,0.8429898023605347,0.7711746692657471,-0.7278974652290344,1.0158874988555908,0.7509961128234863,-0.7278974056243896,0.9471280574798584,0.7302912473678589,-0.7278974056243896,0.9468117356300354,0.45477741956710815,-0.7278974652290344,1.015951156616211,0.453829288482666,-0.7278974056243896,1.0158662796020508,0.7383232116699219,-0.6364316344261169,1.0158662796020508,0.7383232116699219,-0.8193631768226624,1.0158874988555908,0.7249202132225037,-0.8193631768226624,0.9471280574798584,0.7156234979629517,-0.7964967489242554,0.9468117356300354,0.45310497283935547,-0.7964967489242554,1.015951156616211,0.4536029100418091,-0.8193631768226624,1.0158874988555908,0.7249202132225037,-0.6364316344261169,0.9471280574798584,0.7156235575675964,-0.6592981219291687,1.015951156616211,0.4536029100418091,-0.6364316344261169,0.9468117356300354,0.45311713218688965,-0.6592981219291687,1.0092054605484009,0.45405054092407227,-0.7278974056243896,1.0092055797576904,0.45339617133140564,-0.7964967489242554,1.0092054605484009,0.45366954803466797,-0.7736303210258484,1.0092054605484009,0.4538731575012207,-0.7507638335227966,1.0092054605484009,0.4538184404373169,-0.7050309777259827,1.0092054605484009,0.45371243357658386,-0.6821645498275757,1.0092054605484009,0.45339903235435486,-0.6592980623245239,0.9906530976295471,0.45430493354797363,-0.7278974652290344,0.9906530976295471,0.4532942771911621,-0.7964967489242554,0.9906530976295471,0.45401811599731445,-0.7736303210258484,0.9906530976295471,0.4541897177696228,-0.7507638931274414,0.9906530976295471,0.45407211780548096,-0.7050309777259827,0.9906530976295471,0.454110324382782,-0.6821645498275757,0.9906530976295471,0.4533003568649292,-0.6592981219291687,0.9959458708763123,0.4560271203517914,-0.7903926372528076,1.0043141841888428,0.4560730755329132,-0.7903926372528076,1.0043141841888428,0.4561963677406311,-0.7800783514976501,0.9959458708763123,0.4563536047935486,-0.7800783514976501,0.9959739446640015,0.4565430283546448,-0.7674939632415771,1.0044636726379395,0.45638349652290344,-0.7674939632415771,1.0044636726379395,0.45647668838500977,-0.7570300698280334,0.9959739446640015,0.45662152767181396,-0.7570300698280334,0.9960212111473083,0.45671188831329346,-0.744530439376831,1.0043764114379883,0.4565693438053131,-0.7445303797721863,1.0043764114379883,0.45664921402931213,-0.7342323064804077,0.9960212111473083,0.45676377415657043,-0.7342323660850525,0.9955902099609375,0.4567510187625885,-0.7220484614372253,1.0047807693481445,0.4566250145435333,-0.7220484018325806,1.0047807693481445,0.4565100371837616,-0.7107206583023071,0.9955902099609375,0.4566356837749481,-0.7107207179069519,0.996027410030365,0.4565621018409729,-0.6987489461898804,1.0044045448303223,0.456447571516037,-0.6987489461898804,1.0044045448303223,0.45639970898628235,-0.6884239315986633,0.996027410030365,0.4565793573856354,-0.6884239315986633,0.9958776831626892,0.4564184844493866,-0.6757932901382446,1.0044046640396118,0.4562356173992157,-0.6757932901382446,1.0044046640396118,0.45609158277511597,-0.6652834415435791,0.9958776831626892,0.4560462236404419,-0.6652834415435791,0.9963169097900391,0.5274276733398438,-0.6744552254676819,1.0048439502716064,0.5272448062896729,-0.6744552254676819,1.0048439502716064,0.5271007418632507,-0.6639453768730164,0.9963169097900391,0.5270553827285767,-0.6639453768730164,0.9969841241836548,0.5275810360908508,-0.6986681818962097,1.0053611993789673,0.5274664759635925,-0.6986681818962097,1.0053611993789673,0.5274186134338379,-0.6883431673049927,0.9969841241836548,0.5275982618331909,-0.6883431673049927,0.9963361620903015,0.527770459651947,-0.7214945554733276,1.0055267810821533,0.5276444554328918,-0.7214944958686829,1.0055267810821533,0.5275294780731201,-0.7101667523384094,0.9963361620903015,0.5276551246643066,-0.7101668119430542,0.9968595504760742,0.527731716632843,-0.7448790073394775,1.005214810371399,0.5275891423225403,-0.7448789477348328,1.005214810371399,0.5276690125465393,-0.7345808744430542,0.9968595504760742,0.5277835726737976,-0.734580934047699,0.9969505667686462,0.5275598168373108,-0.7679409384727478,1.005440354347229,0.5274002552032471,-0.7679409384727478,1.005440354347229,0.5274934768676758,-0.7574770450592041,0.9969505667686462,0.52763831615448,-0.7574770450592041,0.9963080883026123,0.5270403623580933,-0.7915804982185364,1.0046764612197876,0.5270863175392151,-0.7915804982185364,1.0046764612197876,0.5272095799446106,-0.7812662124633789,0.9963080883026123,0.5273668169975281,-0.7812662124633789,1.0000001192092896,0.2888537049293518,-0.9962208867073059,1.0,0.2888537049293518,-0.7278974056243896,1.0,0.2888537049293518,-0.7278974056243896,1.0253000259399414,0.25011563301086426,-0.452922523021698,1.0305818319320679,0.2500981092453003,-0.9962208867073059,1.0000001192092896,0.2888537049293518,-0.9962208867073059,0.9991901516914368,0.2500981092453003,-0.46331241726875305,1.0000001192092896,0.2500981092453003,-0.9962208867073059,1.0305817127227783,0.2888537049293518,-0.9962208867073059,0.7022757530212402,0.2888537049293518,-0.1542235016822815,0.7021929621696472,0.36594465374946594,-0.1542235165834427,0.6499286890029907,0.7307178974151611,-0.2589694857597351,0.5823686122894287,0.8952803611755371,-0.37279289960861206,0.702317476272583,0.2500981092453003,-0.1542235016822815,0.7034947276115417,0.0,-0.15422269701957703,0.7181845903396606,0.28887122869491577,-0.133632630109787,0.7182263731956482,0.25011563301086426,-0.133632630109787,0.7637466192245483,0.7310588955879211,-0.3801819086074829,0.8781442046165466,0.36594465374946594,-0.3375692665576935,0.8783254027366638,0.2888537049293518,-0.3375692665576935,0.8784167766571045,0.2500981092453003,-0.3375692665576935,0.9002852439880371,0.28887122869491577,-0.32302939891815186,0.8793761134147644,0.0,-0.3375675082206726,0.6376497149467468,0.8952803611755371,-0.434999942779541,0.9003767371177673,0.25011563301086426,-0.32302939891815186,0.7085050344467163,0.7308933734893799,-0.32135140895843506,0.7928797006607056,0.2888537049293518,-0.24858234822750092,0.7927461862564087,0.36594465374946594,-0.2485823631286621,0.7929469347000122,0.2500981092453003,-0.24858234822750092,0.7940120100975037,0.0,-0.24858105182647705,0.6108190417289734,0.8952803611755371,-0.4048077464103699,0.811902642250061,0.28887122869491577,-0.23110561072826385,0.8119699954986572,0.25011563301086426,-0.23110561072826385,0.5541894435882568,0.2888537049293518,2.9802322387695312e-08,0.5541894435882568,0.2888537049293518,2.9802322387695312e-08,0.5541894435882568,0.2888537049293518,2.9802322387695312e-08,0.5541894435882568,0.2888537049293518,2.9802322387695312e-08,0.5541894435882568,0.36594465374946594,-0.0,0.5541894435882568,0.730431079864502,-0.15701019763946533,0.5358682870864868,0.8952803611755371,-0.32046663761138916,0.5358682870864868,0.8952803611755371,-0.32046663761138916,0.5650084018707275,0.25011563301086426,0.025680791586637497,0.5650084018707275,0.25011563301086426,0.025680791586637497,0.5650084018707275,0.25011563301086426,0.025680791586637497,0.5650084018707275,0.28887122869491577,0.02568076178431511,0.5650084018707275,0.28887122869491577,0.02568076178431511,0.5650084018707275,0.28887122869491577,0.02568076178431511,0.5650084018707275,0.28887122869491577,0.02568076178431511,0.5650084018707275,0.28887122869491577,0.02568076178431511,0.5650084018707275,0.28887122869491577,0.02568076178431511,0.5541894435882568,0.2500981092453003,2.9802322387695312e-08,0.5541894435882568,0.2500981092453003,2.9802322387695312e-08,0.5541894435882568,0.2500981092453003,2.9802322387695312e-08,0.5555499792098999,0.0,2.9802322387695312e-08,0.15008243918418884,0.730431079864502,-0.15701021254062653,0.15008243918418884,0.730431079864502,-0.15701021254062653,0.26441463828086853,0.7711746692657471,-0.15701021254062653,0.26441463828086853,0.7711746692657471,-0.15701021254062653,0.26441463828086853,0.7711746692657471,-0.15701021254062653,0.15008243918418884,0.36594465374946594,1.4901161193847656e-08,0.15008243918418884,0.36594465374946594,1.4901161193847656e-08,0.26441463828086853,0.36594465374946594,1.4901161193847656e-08,0.26441463828086853,0.8952803611755371,-0.3061159551143646,0.26441463828086853,0.8952803611755371,-0.3061159551143646,0.26441463828086853,0.8952803611755371,-0.3061159551143646,0.26441463828086853,0.8952803611755371,-0.3061159551143646,0.26441463828086853,0.8952803611755371,-0.3061159551143646,0.26441463828086853,0.8952803611755371,-0.3061159551143646,0.26441463828086853,0.8952803611755371,-0.3061159551143646,0.26441463828086853,0.770918071269989,0.015866275876760483,0.26441463828086853,0.770918071269989,0.015866275876760483,0.3787468373775482,0.730431079864502,-0.15701021254062653,0.3787468373775482,0.730431079864502,-0.15701021254062653,0.3787468373775482,0.7301744818687439,0.015866275876760483,0.3787468373775482,0.7301744818687439,0.015866275876760483,0.3787468373775482,0.36594465374946594,1.4901161193847656e-08,0.3787468373775482,0.36594465374946594,1.4901161193847656e-08,0.3787468373775482,0.36594465374946594,0.015972383320331573,0.3787468373775482,0.36594465374946594,0.015972383320331573,0.15008243918418884,0.36594465374946594,0.015972383320331573,0.15008243918418884,0.36594465374946594,0.015972383320331573,0.15008243918418884,0.7301744818687439,0.015866275876760483,0.15008243918418884,0.7301744818687439,0.015866275876760483,0.0,0.2500981092453003,-0.0008098483085632324,0.17294886708259583,0.7383232116699219,0.015866275876760483,0.35588037967681885,0.7383232116699219,0.015866275876760483,0.17294886708259583,0.7249202132225037,0.01588749699294567,0.17294886708259583,0.7249202132225037,0.01588749699294567,0.1958152949810028,0.7156235575675964,-0.0528719425201416,0.1958152949810028,0.7156235575675964,-0.0528719425201416,0.35588037967681885,0.7249202132225037,0.01588749699294567,0.35588037967681885,0.7249202132225037,0.01588749699294567,0.33301395177841187,0.7156234979629517,-0.0528719425201416,0.33301395177841187,0.7156234979629517,-0.0528719425201416,0.26441460847854614,0.7302912473678589,-0.0528719425201416,0.33301395177841187,0.45310497283935547,-0.05318829044699669,0.33301395177841187,0.45310497283935547,-0.05318829044699669,0.35588037967681885,0.4536029100418091,0.015951162204146385,0.35588037967681885,0.4536029100418091,0.015951162204146385,0.17294886708259583,0.4536029100418091,0.015951162204146385,0.17294886708259583,0.4536029100418091,0.015951162204146385,0.1958152949810028,0.45311713218688965,-0.05318829044699669,0.1958152949810028,0.45311713218688965,-0.05318829044699669,0.26441463828086853,0.453829288482666,0.015951162204146385,0.26441463828086853,0.36594465374946594,0.015972383320331573,0.21868175268173218,0.454110324382782,-0.009346922859549522,0.21868175268173218,0.454110324382782,-0.009346922859549522,0.21868175268173218,0.45371243357658386,0.009205498732626438,0.21868175268173218,0.45371243357658386,0.009205498732626438,0.21231049299240112,0.4564184844493866,-0.0041223447769880295,0.21231049299240112,0.4564184844493866,-0.0041223447769880295,0.21231049299240112,0.4564184844493866,-0.0041223447769880295,0.2872810661792755,0.4538731575012207,0.009205498732626438,0.2872810661792755,0.4538731575012207,0.009205498732626438,0.28104761242866516,0.4565693438053131,0.00437645148485899,0.28104761242866516,0.4565693438053131,0.00437645148485899,0.28104761242866516,0.4565693438053131,0.00437645148485899,0.29354727268218994,0.45647668838500977,0.004463698714971542,0.29354727268218994,0.45647668838500977,0.004463698714971542,0.29354727268218994,0.45647668838500977,0.004463698714971542,0.24154818058013916,0.4538184404373169,0.009205498732626438,0.24154818058013916,0.4538184404373169,0.009205498732626438,0.23526614904403687,0.456447571516037,0.004404474515467882,0.23526614904403687,0.456447571516037,0.004404474515467882,0.23526614904403687,0.456447571516037,0.004404474515467882,0.26441463828086853,0.45405054092407227,0.009205498732626438,0.26441463828086853,0.45405054092407227,0.009205498732626438,0.25856563448905945,0.4566250145435333,0.004780808929353952,0.25856563448905945,0.4566250145435333,0.004780808929353952,0.25856563448905945,0.4566250145435333,0.004780808929353952,0.3101474940776825,0.45401811599731445,-0.009346922859549522,0.3101474940776825,0.45401811599731445,-0.009346922859549522,0.3101475238800049,0.45366954803466797,0.009205498732626438,0.3101475238800049,0.45366954803466797,0.009205498732626438,0.3269098401069641,0.4560271203517914,-0.004054160788655281,0.3269098401069641,0.4560271203517914,-0.004054160788655281,0.3269098401069641,0.4560271203517914,-0.004054160788655281,0.3269098401069641,0.4560730755329132,0.004314220044761896,0.3269098401069641,0.4560730755329132,0.004314220044761896,0.3269098401069641,0.4560730755329132,0.004314220044761896,0.31659555435180664,0.4561963677406311,0.004314220044761896,0.31659555435180664,0.4561963677406311,0.004314220044761896,0.31659555435180664,0.4561963677406311,0.004314220044761896,0.31659555435180664,0.4563536047935486,-0.004054160788655281,0.31659555435180664,0.4563536047935486,-0.004054160788655281,0.31659555435180664,0.4563536047935486,-0.004054160788655281,0.30401116609573364,0.4565430283546448,-0.0040260907262563705,0.30401116609573364,0.4565430283546448,-0.0040260907262563705,0.30401116609573364,0.4565430283546448,-0.0040260907262563705,0.30401119589805603,0.45638349652290344,0.004463698714971542,0.30401119589805603,0.45638349652290344,0.004463698714971542,0.30401119589805603,0.45638349652290344,0.004463698714971542,0.2707495391368866,0.45664921402931213,0.00437645148485899,0.2707495391368866,0.45664921402931213,0.00437645148485899,0.2707495391368866,0.45664921402931213,0.00437645148485899,0.29354727268218994,0.45662152767181396,-0.0040260907262563705,0.29354727268218994,0.45662152767181396,-0.0040260907262563705,0.29354727268218994,0.45662152767181396,-0.0040260907262563705,0.2872810661792755,0.4541897177696228,-0.009346922859549522,0.2872810661792755,0.4541897177696228,-0.009346922859549522,0.28104761242866516,0.45671188831329346,-0.0039787860587239265,0.28104761242866516,0.45671188831329346,-0.0039787860587239265,0.28104761242866516,0.45671188831329346,-0.0039787860587239265,0.247237890958786,0.4565100371837616,0.004780808929353952,0.247237890958786,0.4565100371837616,0.004780808929353952,0.247237890958786,0.4565100371837616,0.004780808929353952,0.2707495391368866,0.45676377415657043,-0.0039787860587239265,0.2707495391368866,0.45676377415657043,-0.0039787860587239265,0.2707495391368866,0.45676377415657043,-0.0039787860587239265,0.26441463828086853,0.45430493354797363,-0.009346922859549522,0.26441463828086853,0.45430493354797363,-0.009346922859549522,0.25856563448905945,0.4567510187625885,-0.004409827291965485,0.25856563448905945,0.4567510187625885,-0.004409827291965485,0.25856563448905945,0.4567510187625885,-0.004409827291965485,0.247237890958786,0.4566356837749481,-0.004409827291965485,0.247237890958786,0.4566356837749481,-0.004409827291965485,0.247237890958786,0.4566356837749481,-0.004409827291965485,0.23526614904403687,0.4565621018409729,-0.003972608596086502,0.23526614904403687,0.4565621018409729,-0.003972608596086502,0.23526614904403687,0.4565621018409729,-0.003972608596086502,0.22494113445281982,0.45639970898628235,0.004404474515467882,0.22494113445281982,0.45639970898628235,0.004404474515467882,0.22494113445281982,0.45639970898628235,0.004404474515467882,0.24154818058013916,0.45407211780548096,-0.009346922859549522,0.24154818058013916,0.45407211780548096,-0.009346922859549522,0.22494113445281982,0.4565793573856354,-0.003972608596086502,0.22494113445281982,0.4565793573856354,-0.003972608596086502,0.22494113445281982,0.4565793573856354,-0.003972608596086502,0.2018006443977356,0.45609158277511597,0.004404684994369745,0.2018006443977356,0.45609158277511597,0.004404684994369745,0.2018006443977356,0.45609158277511597,0.004404684994369745,0.21231049299240112,0.4562356173992157,0.004404684994369745,0.21231049299240112,0.4562356173992157,0.004404684994369745,0.21231049299240112,0.4562356173992157,0.004404684994369745,0.2018006443977356,0.4560462236404419,-0.0041223447769880295,0.2018006443977356,0.4560462236404419,-0.0041223447769880295,0.2018006443977356,0.4560462236404419,-0.0041223447769880295,0.21097242832183838,0.5272448062896729,0.004843928385525942,0.21097242832183838,0.5272448062896729,0.004843928385525942,0.21097242832183838,0.5274276733398438,-0.003683101385831833,0.21097242832183838,0.5274276733398438,-0.003683101385831833,0.20046257972717285,0.5271007418632507,0.004843928385525942,0.20046257972717285,0.5271007418632507,0.004843928385525942,0.20046257972717285,0.5270553827285767,-0.003683101385831833,0.20046257972717285,0.5270553827285767,-0.003683101385831833,0.2351853847503662,0.5274664759635925,0.005361165385693312,0.2351853847503662,0.5274664759635925,0.005361165385693312,0.2351853847503662,0.5275810360908508,-0.0030159177258610725,0.2351853847503662,0.5275810360908508,-0.0030159177258610725,0.22486037015914917,0.5274186134338379,0.005361165385693312,0.22486037015914917,0.5274186134338379,0.005361165385693312,0.22486037015914917,0.5275982618331909,-0.0030159177258610725,0.22486037015914917,0.5275982618331909,-0.0030159177258610725,0.25801172852516174,0.5276444554328918,0.005526759661734104,0.25801172852516174,0.5276444554328918,0.005526759661734104,0.25801172852516174,0.527770459651947,-0.00366387702524662,0.25801172852516174,0.527770459651947,-0.00366387702524662,0.2466839849948883,0.5275294780731201,0.005526759661734104,0.2466839849948883,0.5275294780731201,0.005526759661734104,0.2466839849948883,0.5276551246643066,-0.00366387702524662,0.2466839849948883,0.5276551246643066,-0.00366387702524662,0.28139618039131165,0.5275891423225403,0.005214774515479803,0.28139618039131165,0.5275891423225403,0.005214774515479803,0.28139618039131165,0.527731716632843,-0.0031404634937644005,0.28139618039131165,0.527731716632843,-0.0031404634937644005,0.2710981070995331,0.5276690125465393,0.005214774515479803,0.2710981070995331,0.5276690125465393,0.005214774515479803,0.2710981070995331,0.5277835726737976,-0.0031404634937644005,0.2710981070995331,0.5277835726737976,-0.0031404634937644005,0.3044581711292267,0.5274002552032471,0.0054403566755354404,0.3044581711292267,0.5274002552032471,0.0054403566755354404,0.3044581413269043,0.5275598168373108,-0.0030494332313537598,0.3044581413269043,0.5275598168373108,-0.0030494332313537598,0.2939942479133606,0.5274934768676758,0.0054403566755354404,0.2939942479133606,0.5274934768676758,0.0054403566755354404,0.2939942479133606,0.52763831615448,-0.0030494332313537598,0.2939942479133606,0.52763831615448,-0.0030494332313537598,0.32809770107269287,0.5270863175392151,0.004676455166190863,0.32809770107269287,0.5270863175392151,0.004676455166190863,0.32809770107269287,0.5270403623580933,-0.0036919256672263145,0.32809770107269287,0.5270403623580933,-0.0036919256672263145,0.3177834153175354,0.5272095799446106,0.004676455166190863,0.3177834153175354,0.5272095799446106,0.004676455166190863,0.3177834153175354,0.5273668169975281,-0.0036919256672263145,0.3177834153175354,0.5273668169975281,-0.0036919256672263145,0.0,0.8952803611755371,-0.3061159551143646,0.0,0.2500981092453003,0.02977186255156994,0.0,0.2888537049293518,0.02964639477431774,0.26441463828086853,0.7509961128234863,0.01588749699294567,0.26441463828086853,0.45477741956710815,-0.05318829044699669,0.5541894435882568,0.2888537049293518,2.9802322387695312e-08,0.5541894435882568,0.2888537049293518,2.9802322387695312e-08,0.0,1.0,-0.9999999403953552,0.0,1.0,-0.9999999403953552,0.0,1.0,-0.9999999403953552,0.0,1.0,-0.9999999403953552,0.0,1.0,-0.9999999403953552,0.0,1.0,-0.9999999403953552,0.9988160133361816,0.36594465374946594,-0.46331241726875305,0.8418057560920715,0.731292724609375,-0.46331241726875305,0.9991901516914368,0.2500981092453003,-0.46331241726875305,0.9991901516914368,0.2500981092453003,-0.46331241726875305,0.9991901516914368,0.2500981092453003,-0.46331241726875305,0.9991901516914368,0.2500981092453003,-0.46331241726875305,1.0,0.0,-0.46331000328063965,0.675562858581543,0.8952803611755371,-0.4776631295681,0.675562858581543,0.8952803611755371,-0.4776631295681,0.9990646839141846,0.2888537049293518,-0.46331241726875305,0.9990646839141846,0.2888537049293518,-0.46331241726875305,0.9990646839141846,0.2888537049293518,-0.46331241726875305,1.0253000259399414,0.25011563301086426,-0.452922523021698,1.0253000259399414,0.25011563301086426,-0.452922523021698,1.0253000259399414,0.25011563301086426,-0.452922523021698,1.0253000259399414,0.25011563301086426,-0.452922523021698,1.0251744985580444,0.28887122869491577,-0.452922523021698,1.0251744985580444,0.28887122869491577,-0.452922523021698,0.8429898023605347,0.730431079864502,-0.6135652661323547,0.8429898023605347,0.730431079864502,-0.6135652661323547,0.8429898023605347,0.7711746692657471,-0.7278974652290344,0.8429898023605347,0.7711746692657471,-0.7278974652290344,0.8429898023605347,0.7711746692657471,-0.7278974652290344,1.0,0.36594465374946594,-0.61356520652771,1.0,0.36594465374946594,-0.61356520652771,1.0,0.36594465374946594,-0.7278974056243896,0.6938840746879578,0.8952803611755371,-0.7278974652290344,0.6938840746879578,0.8952803611755371,-0.7278974652290344,0.6938840746879578,0.8952803611755371,-0.7278974652290344,0.6938840746879578,0.8952803611755371,-0.7278974652290344,0.6938840746879578,0.8952803611755371,-0.7278974652290344,0.6938840746879578,0.8952803611755371,-0.9962208867073059,0.6938840746879578,0.8952803611755371,-0.7278974652290344,0.6938840746879578,0.8952803611755371,-0.7278974652290344,1.0158662796020508,0.770918071269989,-0.7278974056243896,1.0158662796020508,0.770918071269989,-0.7278974056243896,0.8429898023605347,0.730431079864502,-0.8422296643257141,0.8429898023605347,0.730431079864502,-0.8422296643257141,1.0158662796020508,0.7301744818687439,-0.8422296047210693,1.0158662796020508,0.7301744818687439,-0.8422296047210693,1.0,0.36594465374946594,-0.8422296047210693,1.0,0.36594465374946594,-0.8422296047210693,1.015972375869751,0.36594465374946594,-0.8422296047210693,1.015972375869751,0.36594465374946594,-0.8422296047210693,1.015972375869751,0.36594465374946594,-0.61356520652771,1.015972375869751,0.36594465374946594,-0.61356520652771,1.0158662796020508,0.7301744818687439,-0.61356520652771,1.0158662796020508,0.7301744818687439,-0.61356520652771,1.0158662796020508,0.7383232116699219,-0.6364316344261169,1.0158662796020508,0.7383232116699219,-0.8193631768226624,1.0158874988555908,0.7249202132225037,-0.6364316344261169,1.0158874988555908,0.7249202132225037,-0.6364316344261169,0.9471280574798584,0.7156235575675964,-0.6592981219291687,0.9471280574798584,0.7156235575675964,-0.6592981219291687,1.0158874988555908,0.7249202132225037,-0.8193631768226624,1.0158874988555908,0.7249202132225037,-0.8193631768226624,0.9471280574798584,0.7156234979629517,-0.7964967489242554,0.9471280574798584,0.7156234979629517,-0.7964967489242554,0.9471280574798584,0.7302912473678589,-0.7278974056243896,0.9468117356300354,0.45310497283935547,-0.7964967489242554,0.9468117356300354,0.45310497283935547,-0.7964967489242554,1.015951156616211,0.4536029100418091,-0.8193631768226624,1.015951156616211,0.4536029100418091,-0.8193631768226624,1.015951156616211,0.4536029100418091,-0.6364316344261169,1.015951156616211,0.4536029100418091,-0.6364316344261169,0.9468117356300354,0.45311713218688965,-0.6592981219291687,0.9468117356300354,0.45311713218688965,-0.6592981219291687,1.015951156616211,0.453829288482666,-0.7278974056243896,1.015972375869751,0.36594465374946594,-0.7278974056243896,0.9906530976295471,0.454110324382782,-0.6821645498275757,0.9906530976295471,0.454110324382782,-0.6821645498275757,1.0092054605484009,0.45371243357658386,-0.6821645498275757,1.0092054605484009,0.45371243357658386,-0.6821645498275757,0.9958776831626892,0.4564184844493866,-0.6757932901382446,0.9958776831626892,0.4564184844493866,-0.6757932901382446,0.9958776831626892,0.4564184844493866,-0.6757932901382446,1.0092054605484009,0.4538731575012207,-0.7507638335227966,1.0092054605484009,0.4538731575012207,-0.7507638335227966,1.0043764114379883,0.4565693438053131,-0.7445303797721863,1.0043764114379883,0.4565693438053131,-0.7445303797721863,1.0043764114379883,0.4565693438053131,-0.7445303797721863,1.0044636726379395,0.45647668838500977,-0.7570300698280334,1.0044636726379395,0.45647668838500977,-0.7570300698280334,1.0044636726379395,0.45647668838500977,-0.7570300698280334,1.0092054605484009,0.4538184404373169,-0.7050309777259827,1.0092054605484009,0.4538184404373169,-0.7050309777259827,1.0044045448303223,0.456447571516037,-0.6987489461898804,1.0044045448303223,0.456447571516037,-0.6987489461898804,1.0044045448303223,0.456447571516037,-0.6987489461898804,1.0092054605484009,0.45405054092407227,-0.7278974056243896,1.0092054605484009,0.45405054092407227,-0.7278974056243896,1.0047807693481445,0.4566250145435333,-0.7220484018325806,1.0047807693481445,0.4566250145435333,-0.7220484018325806,1.0047807693481445,0.4566250145435333,-0.7220484018325806,0.9906530976295471,0.45401811599731445,-0.7736303210258484,0.9906530976295471,0.45401811599731445,-0.7736303210258484,1.0092054605484009,0.45366954803466797,-0.7736303210258484,1.0092054605484009,0.45366954803466797,-0.7736303210258484,0.9959458708763123,0.4560271203517914,-0.7903926372528076,0.9959458708763123,0.4560271203517914,-0.7903926372528076,0.9959458708763123,0.4560271203517914,-0.7903926372528076,1.0043141841888428,0.4560730755329132,-0.7903926372528076,1.0043141841888428,0.4560730755329132,-0.7903926372528076,1.0043141841888428,0.4560730755329132,-0.7903926372528076,1.0043141841888428,0.4561963677406311,-0.7800783514976501,1.0043141841888428,0.4561963677406311,-0.7800783514976501,1.0043141841888428,0.4561963677406311,-0.7800783514976501,0.9959458708763123,0.4563536047935486,-0.7800783514976501,0.9959458708763123,0.4563536047935486,-0.7800783514976501,0.9959458708763123,0.4563536047935486,-0.7800783514976501,0.9959739446640015,0.4565430283546448,-0.7674939632415771,0.9959739446640015,0.4565430283546448,-0.7674939632415771,0.9959739446640015,0.4565430283546448,-0.7674939632415771,1.0044636726379395,0.45638349652290344,-0.7674939632415771,1.0044636726379395,0.45638349652290344,-0.7674939632415771,1.0044636726379395,0.45638349652290344,-0.7674939632415771,1.0043764114379883,0.45664921402931213,-0.7342323064804077,1.0043764114379883,0.45664921402931213,-0.7342323064804077,1.0043764114379883,0.45664921402931213,-0.7342323064804077,0.9959739446640015,0.45662152767181396,-0.7570300698280334,0.9959739446640015,0.45662152767181396,-0.7570300698280334,0.9959739446640015,0.45662152767181396,-0.7570300698280334,0.9906530976295471,0.4541897177696228,-0.7507638931274414,0.9906530976295471,0.4541897177696228,-0.7507638931274414,0.9960212111473083,0.45671188831329346,-0.744530439376831,0.9960212111473083,0.45671188831329346,-0.744530439376831,0.9960212111473083,0.45671188831329346,-0.744530439376831,1.0047807693481445,0.4565100371837616,-0.7107206583023071,1.0047807693481445,0.4565100371837616,-0.7107206583023071,1.0047807693481445,0.4565100371837616,-0.7107206583023071,0.9960212111473083,0.45676377415657043,-0.7342323660850525,0.9960212111473083,0.45676377415657043,-0.7342323660850525,0.9960212111473083,0.45676377415657043,-0.7342323660850525,0.9906530976295471,0.45430493354797363,-0.7278974652290344,0.9906530976295471,0.45430493354797363,-0.7278974652290344,0.9955902099609375,0.4567510187625885,-0.7220484614372253,0.9955902099609375,0.4567510187625885,-0.7220484614372253,0.9955902099609375,0.4567510187625885,-0.7220484614372253,0.9955902099609375,0.4566356837749481,-0.7107207179069519,0.9955902099609375,0.4566356837749481,-0.7107207179069519,0.9955902099609375,0.4566356837749481,-0.7107207179069519,0.996027410030365,0.4565621018409729,-0.6987489461898804,0.996027410030365,0.4565621018409729,-0.6987489461898804,0.996027410030365,0.4565621018409729,-0.6987489461898804,1.0044045448303223,0.45639970898628235,-0.6884239315986633,1.0044045448303223,0.45639970898628235,-0.6884239315986633,1.0044045448303223,0.45639970898628235,-0.6884239315986633,0.9906530976295471,0.45407211780548096,-0.7050309777259827,0.9906530976295471,0.45407211780548096,-0.7050309777259827,0.996027410030365,0.4565793573856354,-0.6884239315986633,0.996027410030365,0.4565793573856354,-0.6884239315986633,0.996027410030365,0.4565793573856354,-0.6884239315986633,1.0044046640396118,0.45609158277511597,-0.6652834415435791,1.0044046640396118,0.45609158277511597,-0.6652834415435791,1.0044046640396118,0.45609158277511597,-0.6652834415435791,1.0044046640396118,0.4562356173992157,-0.6757932901382446,1.0044046640396118,0.4562356173992157,-0.6757932901382446,1.0044046640396118,0.4562356173992157,-0.6757932901382446,0.9958776831626892,0.4560462236404419,-0.6652834415435791,0.9958776831626892,0.4560462236404419,-0.6652834415435791,0.9958776831626892,0.4560462236404419,-0.6652834415435791,1.0048439502716064,0.5272448062896729,-0.6744552254676819,1.0048439502716064,0.5272448062896729,-0.6744552254676819,0.9963169097900391,0.5274276733398438,-0.6744552254676819,0.9963169097900391,0.5274276733398438,-0.6744552254676819,1.0048439502716064,0.5271007418632507,-0.6639453768730164,1.0048439502716064,0.5271007418632507,-0.6639453768730164,0.9963169097900391,0.5270553827285767,-0.6639453768730164,0.9963169097900391,0.5270553827285767,-0.6639453768730164,1.0053611993789673,0.5274664759635925,-0.6986681818962097,1.0053611993789673,0.5274664759635925,-0.6986681818962097,0.9969841241836548,0.5275810360908508,-0.6986681818962097,0.9969841241836548,0.5275810360908508,-0.6986681818962097,1.0053611993789673,0.5274186134338379,-0.6883431673049927,1.0053611993789673,0.5274186134338379,-0.6883431673049927,0.9969841241836548,0.5275982618331909,-0.6883431673049927,0.9969841241836548,0.5275982618331909,-0.6883431673049927,1.0055267810821533,0.5276444554328918,-0.7214944958686829,1.0055267810821533,0.5276444554328918,-0.7214944958686829,0.9963361620903015,0.527770459651947,-0.7214945554733276,0.9963361620903015,0.527770459651947,-0.7214945554733276,1.0055267810821533,0.5275294780731201,-0.7101667523384094,1.0055267810821533,0.5275294780731201,-0.7101667523384094,0.9963361620903015,0.5276551246643066,-0.7101668119430542,0.9963361620903015,0.5276551246643066,-0.7101668119430542,1.005214810371399,0.5275891423225403,-0.7448789477348328,1.005214810371399,0.5275891423225403,-0.7448789477348328,0.9968595504760742,0.527731716632843,-0.7448790073394775,0.9968595504760742,0.527731716632843,-0.7448790073394775,1.005214810371399,0.5276690125465393,-0.7345808744430542,1.005214810371399,0.5276690125465393,-0.7345808744430542,0.9968595504760742,0.5277835726737976,-0.734580934047699,0.9968595504760742,0.5277835726737976,-0.734580934047699,1.005440354347229,0.5274002552032471,-0.7679409384727478,1.005440354347229,0.5274002552032471,-0.7679409384727478,0.9969505667686462,0.5275598168373108,-0.7679409384727478,0.9969505667686462,0.5275598168373108,-0.7679409384727478,1.005440354347229,0.5274934768676758,-0.7574770450592041,1.005440354347229,0.5274934768676758,-0.7574770450592041,0.9969505667686462,0.52763831615448,-0.7574770450592041,0.9969505667686462,0.52763831615448,-0.7574770450592041,1.0046764612197876,0.5270863175392151,-0.7915804982185364,1.0046764612197876,0.5270863175392151,-0.7915804982185364,0.9963080883026123,0.5270403623580933,-0.7915804982185364,0.9963080883026123,0.5270403623580933,-0.7915804982185364,1.0046764612197876,0.5272095799446106,-0.7812662124633789,1.0046764612197876,0.5272095799446106,-0.7812662124633789,0.9963080883026123,0.5273668169975281,-0.7812662124633789,0.9963080883026123,0.5273668169975281,-0.7812662124633789,1.0,0.2888537049293518,-0.7278974056243896,1.0,0.2888537049293518,-0.7278974056243896,1.0,0.2888537049293518,-0.7278974056243896,1.0,0.2888537049293518,-0.7278974056243896,1.0,0.2888537049293518,-0.7278974056243896,1.0,0.2888537049293518,-0.7278974056243896,1.0,0.2888537049293518,-0.7278974056243896,1.0,0.2888537049293518,-0.7278974056243896,1.0000001192092896,0.2888537049293518,-0.9962208867073059,1.0305818319320679,0.2500981092453003,-0.9962208867073059,1.0305817127227783,0.2888537049293518,-0.9962208867073059,1.0305817127227783,0.2888537049293518,-0.9962208867073059,1.0305817127227783,0.2888537049293518,-0.9962208867073059,1.0158874988555908,0.7509961128234863,-0.7278974056243896,0.9468117356300354,0.45477741956710815,-0.7278974652290344,1.0000001192092896,0.2888537049293518,-0.9962208867073059,1.0000001192092896,0.2888537049293518,-0.9962208867073059,1.0000001192092896,0.2888537049293518,-0.9962208867073059,0.8783254027366638,0.2888537049293518,-0.3375692665576935,0.6376497149467468,0.8952803611755371,-0.434999942779541,0.9002852439880371,0.28887122869491577,-0.32302939891815186,0.8784167766571045,0.2500981092453003,-0.3375692665576935,0.9003767371177673,0.25011563301086426,-0.32302939891815186,0.7928797006607056,0.2888537049293518,-0.24858234822750092,0.7022757530212402,0.2888537049293518,-0.1542235016822815,0.7929469347000122,0.2500981092453003,-0.24858234822750092,0.702317476272583,0.2500981092453003,-0.1542235016822815,0.6108190417289734,0.8952803611755371,-0.4048077464103699,0.5823686122894287,0.8952803611755371,-0.37279289960861206,0.811902642250061,0.28887122869491577,-0.23110561072826385,0.7181845903396606,0.28887122869491577,-0.133632630109787,0.8119699954986572,0.25011563301086426,-0.23110561072826385,0.7182263731956482,0.25011563301086426,-0.133632630109787],"normals":[-0.0007019257172942162,0.00158696249127388,0.999969482421875,0.0,0.9887996912002563,0.14920499920845032,-0.0034485915675759315,0.5408795475959778,0.8410596251487732,-0.005706961266696453,0.20087282359600067,0.9795831441879272,-0.0007019257172942162,0.670430600643158,0.7419354915618896,-0.0036317026242613792,0.7055879235267639,0.7085787653923035,0.007110812701284885,0.0016174810007214546,0.999969482421875,-0.0007019257172942162,0.00158696249127388,0.999969482421875,0.01144444104284048,0.5491805672645569,0.8355967998504639,-0.054445020854473114,0.600238025188446,0.7979369759559631,0.0,0.20197150111198425,0.9793694615364075,0.02313303016126156,0.6926786303520203,0.7208471894264221,-0.0048829615116119385,0.13281655311584473,0.9911190867424011,-0.1576281040906906,0.7200537323951721,0.6757408380508423,0.06277657300233841,0.6119266152381897,0.7884151935577393,0.0,0.1343119591474533,0.9909359812736511,0.16467787325382233,0.7272560596466064,0.6662800908088684,1.0,0.0,-0.0,0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.0,-1.0,-0.0,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.0,-1.0,-0.0,-0.2641682028770447,0.7412946224212646,0.616992712020874,0.0,0.0,1.0,-0.2641682028770447,0.7412946224212646,0.616992712020874,0.0,0.0012512588873505592,0.999969482421875,0.0,-0.9676808714866638,0.252052366733551,0.0,-0.0011597033590078354,0.999969482421875,0.0,0.0002136295661330223,0.999969482421875,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.33567309379577637,0.9419537782669067,0.0013733329251408577,-0.23917356133460999,-0.939603865146637,0.24475844204425812,-0.23917356133460999,-0.939603865146637,0.24475844204425812,0.020264290273189545,0.999755859375,-0.006653035059571266,-0.00555436871945858,0.9998779296875,-0.012787255458533764,0.23917356133460999,-0.939603865146637,0.24475844204425812,0.23917356133460999,-0.939603865146637,0.24475844204425812,0.005493331700563431,0.9998779296875,-0.012543107382953167,-0.020966216921806335,0.999725341796875,-0.007812738418579102,-0.0011597033590078354,0.983062207698822,0.1831720918416977,0.061372723430395126,0.9974364638328552,0.03662221133708954,0.011200292967259884,0.9810785055160522,0.19312113523483276,0.008514664135873318,0.983336865901947,0.1814935803413391,-0.0056764427572488785,0.9848933219909668,0.17300942540168762,-0.01184118166565895,0.9787896275520325,0.20438246428966522,-0.062990203499794,0.9972533583641052,0.03827021270990372,-0.002533036284148693,0.9904171824455261,-0.13788262009620667,0.06414990872144699,0.9962767362594604,-0.05740531533956528,0.02072206884622574,0.9894101023674011,-0.143589586019516,0.0064699240028858185,0.9910580515861511,-0.13318277895450592,-0.0029602954164147377,0.9907223582267761,-0.1356852948665619,-0.018799401819705963,0.9895321726799011,-0.1429792195558548,-0.06598101556301117,0.9960936307907104,-0.058381907641887665,0.999847412109375,-0.01672414317727089,9.155552834272385e-05,0.999847412109375,-0.01672414317727089,9.155552834272385e-05,0.010528885759413242,0.8826563358306885,0.4698629677295685,-0.35319072008132935,0.9353618025779724,0.01754814386367798,0.39320048689842224,0.9192480444908142,0.017242956906557083,0.39320048689842224,0.9192480444908142,0.017242956906557083,0.007751701399683952,0.8721579909324646,0.48912015557289124,-0.3733939528465271,0.9275185465812683,0.01580858789384365,0.004547257907688618,0.9071016311645508,-0.4208807647228241,0.3866389989852905,0.922086238861084,0.0157170332968235,-0.3711661100387573,0.9284645915031433,0.012726218439638615,-0.3711661100387573,0.9284645915031433,0.012726218439638615,-0.00906399730592966,0.8916898369789124,-0.4525284469127655,-0.008697775192558765,0.8592486381530762,0.5114597082138062,-0.008697775192558765,0.8592486381530762,0.5114597082138062,-0.999969482421875,-0.007782219909131527,-9.155552834272385e-05,0.999969482421875,0.0011291848495602608,-0.0,-0.004028443247079849,0.8748435974121094,0.4843592643737793,6.103701889514923e-05,-0.013458662666380405,0.999908447265625,-0.3815424144268036,0.9241309762001038,0.01980651170015335,0.3550218343734741,0.9346293807029724,0.020020142197608948,0.3550218343734741,0.9346293807029724,0.020020142197608948,-0.012024292722344398,0.8784447908401489,0.4776451885700226,-0.0318308062851429,0.8992888927459717,-0.4361400306224823,0.99981689453125,0.018829919397830963,0.00039674062281847,0.99981689453125,0.018829919397830963,0.00039674062281847,6.103701889514923e-05,-0.006164738908410072,0.999969482421875,-0.99981689453125,-0.018829919397830963,9.155552834272385e-05,0.999969482421875,0.0011291848495602608,-0.0,0.999969482421875,0.0011291848495602608,-0.0,6.103701889514923e-05,-0.013458662666380405,0.999908447265625,-0.999969482421875,-0.0011291848495602608,-0.0,0.999969482421875,0.007782219909131527,9.155552834272385e-05,0.999969482421875,0.007782219909131527,9.155552834272385e-05,9.155552834272385e-05,-0.010498367249965668,0.99993896484375,-0.999969482421875,-0.007782219909131527,-9.155552834272385e-05,0.999969482421875,-0.0048829615116119385,-6.103701889514923e-05,0.999969482421875,-0.0048829615116119385,-6.103701889514923e-05,-6.103701889514923e-05,-0.011780144646763802,0.999908447265625,-0.999969482421875,0.0048829615116119385,6.103701889514923e-05,0.999969482421875,-0.006286812946200371,-9.155552834272385e-05,0.999969482421875,-0.006286812946200371,-9.155552834272385e-05,-0.00012207403779029846,-0.013733329251408577,0.9998779296875,-0.999969482421875,0.006286812946200371,9.155552834272385e-05,0.999847412109375,-0.01672414317727089,9.155552834272385e-05,0.999847412109375,-0.01672414317727089,9.155552834272385e-05,-3.0518509447574615e-05,-0.005096591077744961,0.999969482421875,-0.999847412109375,0.01669362559914589,0.00030518509447574615,0.0,0.0,1.0,-0.0009460737928748131,0.026703696697950363,0.9996337890625,0.0,0.8165227174758911,0.5772881507873535,0.007110812701284885,0.0016174810007214546,0.999969482421875,-0.5129856467247009,-0.8306222558021545,0.21649830043315887,0.886745810508728,0.4622028172016144,-0.0,-0.0007019257172942162,0.00158696249127388,0.999969482421875,0.9114658236503601,0.4113284647464752,-0.0,-0.921536922454834,0.0,0.3882259726524353,0.999969482421875,0.0016174810007214546,0.0007324442267417908,0.8321787118911743,0.5540940761566162,0.0198370311409235,0.9795831441879272,0.20087282359600067,0.005706961266696453,0.7148045301437378,0.6985076665878296,0.03329569473862648,0.999969482421875,-0.0021668141707777977,0.005096591077744961,0.20300912857055664,0.8350169658660889,-0.5113681554794312,0.999969482421875,0.0016174810007214546,0.0007324442267417908,0.8413342833518982,0.5404828190803528,-0.0,0.7861873507499695,0.6140018701553345,0.06970427930355072,0.9793694615364075,0.20197150111198425,-0.0,0.7416303157806396,0.670796811580658,-0.0,0.9911190867424011,0.13281655311584473,0.0048829615116119385,0.6635029315948486,0.7290261387825012,0.16812646389007568,0.7974181175231934,0.6011536121368408,-0.051911983639001846,0.9909359812736511,0.1343119591474533,-0.0,0.6756187677383423,0.7202368378639221,-0.15732291340827942,0.0,0.0,-1.0,0.0013733329251408577,0.9419537782669067,-0.33567309379577637,0.0,-1.0,-0.0,0.0013733329251408577,0.9419537782669067,0.33567309379577637,0.0013733329251408577,0.9419537782669067,-0.33567309379577637,0.0,-1.0,-0.0,0.616992712020874,0.7412946224212646,0.2641682028770447,1.0,0.0,-0.0,0.616992712020874,0.7412946224212646,0.2641682028770447,0.999969482421875,0.0012512588873505592,-0.0,0.252052366733551,-0.9676808714866638,-0.0,0.999969482421875,-0.0011597033590078354,-0.0,0.999969482421875,0.0002136295661330223,-0.0,0.0013733329251408577,0.9419537782669067,0.33567309379577637,0.0013733329251408577,0.9419537782669067,-0.33567309379577637,0.24475844204425812,-0.939603865146637,0.23917356133460999,0.24475844204425812,-0.939603865146637,0.23917356133460999,-0.006653035059571266,0.999755859375,-0.020264290273189545,-0.012787255458533764,0.9998779296875,0.00555436871945858,0.24475844204425812,-0.939603865146637,-0.23917356133460999,0.24475844204425812,-0.939603865146637,-0.23917356133460999,-0.012543107382953167,0.9998779296875,-0.005493331700563431,-0.007812738418579102,0.999725341796875,0.020966216921806335,0.1831720918416977,0.983062207698822,0.0011597033590078354,0.03662221133708954,0.9974364638328552,-0.061372723430395126,0.19312113523483276,0.9811090230941772,-0.01116977445781231,0.1814935803413391,0.983336865901947,-0.008514664135873318,0.17300942540168762,0.9848933219909668,0.0056764427572488785,0.20438246428966522,0.9787896275520325,0.01184118166565895,0.03827021270990372,0.9972533583641052,0.062990203499794,-0.13788262009620667,0.9904171824455261,0.002533036284148693,-0.05740531533956528,0.9962767362594604,-0.06414990872144699,-0.143589586019516,0.9894101023674011,-0.02072206884622574,-0.13318277895450592,0.9910580515861511,-0.0064699240028858185,-0.1356852948665619,0.9907223582267761,0.0029602954164147377,-0.1429792195558548,0.9895321726799011,0.018799401819705963,-0.058381907641887665,0.9960936307907104,0.06598101556301117,9.155552834272385e-05,-0.01672414317727089,-0.999847412109375,9.155552834272385e-05,-0.01672414317727089,-0.999847412109375,0.4698629677295685,0.8826563358306885,-0.010528885759413242,0.01754814386367798,0.9353618025779724,0.35319072008132935,0.017242956906557083,0.9192785620689392,-0.39320048689842224,0.017242956906557083,0.9192785620689392,-0.39320048689842224,0.48912015557289124,0.8721579909324646,-0.007751701399683952,0.01580858789384365,0.9275185465812683,0.3733939528465271,-0.4208807647228241,0.9070711135864258,-0.004547257907688618,0.0157170332968235,0.922086238861084,-0.3866389989852905,0.012726218439638615,0.9284645915031433,0.3711661100387573,0.012726218439638615,0.9284645915031433,0.3711661100387573,-0.4525284469127655,0.8916898369789124,0.00906399730592966,0.5114597082138062,0.8592486381530762,0.008697775192558765,0.5114597082138062,0.8592486381530762,0.008697775192558765,-9.155552834272385e-05,-0.007782219909131527,0.999969482421875,0.0,0.0011291848495602608,-0.999969482421875,0.4843897819519043,0.8748130798339844,0.004028443247079849,0.999908447265625,-0.013458662666380405,-6.103701889514923e-05,0.01980651170015335,0.9241309762001038,0.3815424144268036,0.020020142197608948,0.9346293807029724,-0.3550218343734741,0.020020142197608948,0.9346293807029724,-0.3550218343734741,0.4776451885700226,0.8784447908401489,0.012024292722344398,-0.4361400306224823,0.8992888927459717,0.0318308062851429,0.00039674062281847,0.018829919397830963,-0.99981689453125,0.00039674062281847,0.018829919397830963,-0.99981689453125,0.999969482421875,-0.006164738908410072,-6.103701889514923e-05,9.155552834272385e-05,-0.018829919397830963,0.99981689453125,0.0,0.0011291848495602608,-0.999969482421875,0.0,0.0011291848495602608,-0.999969482421875,0.999908447265625,-0.013458662666380405,-6.103701889514923e-05,0.0,-0.0011291848495602608,0.999969482421875,9.155552834272385e-05,0.007782219909131527,-0.999969482421875,9.155552834272385e-05,0.007782219909131527,-0.999969482421875,0.99993896484375,-0.010498367249965668,-9.155552834272385e-05,-9.155552834272385e-05,-0.007782219909131527,0.999969482421875,-6.103701889514923e-05,-0.0048829615116119385,-0.999969482421875,-6.103701889514923e-05,-0.0048829615116119385,-0.999969482421875,0.999908447265625,-0.011780144646763802,6.103701889514923e-05,3.0518509447574615e-05,0.0048829615116119385,0.999969482421875,-9.155552834272385e-05,-0.006286812946200371,-0.999969482421875,-9.155552834272385e-05,-0.006286812946200371,-0.999969482421875,0.9998779296875,-0.013733329251408577,0.00012207403779029846,9.155552834272385e-05,0.006286812946200371,0.999969482421875,9.155552834272385e-05,-0.01672414317727089,-0.999847412109375,9.155552834272385e-05,-0.01672414317727089,-0.999847412109375,0.999969482421875,-0.005096591077744961,3.0518509447574615e-05,0.00030518509447574615,0.01669362559914589,0.999847412109375,1.0,0.0,-0.0,0.999969482421875,-0.00039674062281847,0.0009460737928748131,1.0,0.0,-0.0,0.36970123648643494,0.00119022186845541,-0.9291360378265381,0.99993896484375,0.0016174810007214546,0.009826960042119026,0.999969482421875,0.0,0.0014954069629311562,0.999969482421875,0.0015259254723787308,0.00079348124563694,0.999969482421875,0.00079348124563694,0.0011291848495602608,0.99993896484375,0.0016174810007214546,0.009826960042119026,0.7213965058326721,0.0006714072078466415,0.6924955248832703,0.7150486707687378,0.14609210193157196,0.6835840940475464,0.6485488414764404,0.45646533370018005,0.6090579032897949,0.5819269418716431,0.6101260185241699,0.5376140475273132,0.7213965058326721,0.0034485915675759315,0.6924650073051453,0.7213965058326721,0.0034485915675759315,0.6924650073051453,-0.0004882961511611938,0.999969482421875,-0.00045777764171361923,0.7207861542701721,0.0007019257172942162,0.6931058764457703,0.6451002359390259,0.46549883484840393,0.6058839559555054,0.7146824598312378,0.14960172772407532,0.6832484006881714,0.7213965058326721,0.001739555038511753,0.6924955248832703,0.00045777764171361923,-0.999969482421875,0.00045777764171361923,-0.00045777764171361923,0.999969482421875,-0.00045777764171361923,0.7213965058326721,0.0027161473408341408,0.6924650073051453,0.5761284232139587,0.6202276945114136,0.5323038697242737,0.00045777764171361923,-0.999969482421875,0.00045777764171361923,0.6467482447624207,0.461195707321167,0.6074098944664001,-0.0004882961511611938,0.999969482421875,-0.00045777764171361923,0.7148655652999878,0.14792321622371674,0.6834009885787964,0.7213965058326721,0.0030518509447574615,0.6924650073051453,0.7213965058326721,0.0030518509447574615,0.6924650073051453,0.09118930995464325,0.9925229549407959,0.08102664351463318,-0.0004882961511611938,0.999969482421875,-0.00045777764171361923,0.7207861542701721,0.0012207403779029846,0.6931058764457703,0.886745810508728,0.4622028172016144,-0.0,-0.921536922454834,0.0,0.3882259726524353,0.7213965058326721,0.0003662221133708954,0.6924955248832703,-0.0004882961511611938,0.999969482421875,-0.00045777764171361923,0.7164830565452576,0.13040558993816376,0.6852626204490662,0.6632893085479736,0.4111453592777252,0.6252632141113281,0.5840327143669128,0.6064332723617554,0.539536714553833,0.05722220614552498,0.9924924373626709,0.10779137909412384,0.921536922454834,0.0,-0.3882259726524353,0.007110812701284885,0.0016174810007214546,0.999969482421875,0.7207861542701721,0.0003662221133708954,0.6931058764457703,0.0,1.0,-0.0001831110566854477,0.007110812701284885,0.0016174810007214546,0.999969482421875,0.0,0.999969482421875,-0.0006714072078466415,0.7207861542701721,0.0003662221133708954,0.6931058764457703,0.921536922454834,0.0,-0.3882259726524353,-0.0004882961511611938,0.999969482421875,-0.00045777764171361923,-0.0007019257172942162,0.00158696249127388,0.999969482421875,-0.3402813673019409,-0.9292275905609131,0.143803209066391,0.7213965058326721,0.0036317026242613792,0.6924650073051453,0.7213965058326721,0.0036317026242613792,0.6924650073051453,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,-1.0,0.0,-0.0,0.2641682028770447,0.7412946224212646,0.616992712020874,0.33567309379577637,0.9419537782669067,0.0013733329251408577,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.0,-1.0,-0.0,-0.999969482421875,0.0,-0.0,0.0,-1.0,-0.0,0.269142746925354,0.9112827181816101,-0.3115634620189667,0.0,0.9887996912002563,0.14920499920845032,0.2641682028770447,0.7412946224212646,0.616992712020874,0.269142746925354,0.9112827181816101,-0.3115634620189667,0.269142746925354,0.9112827181816101,-0.3115634620189667,0.269142746925354,0.9112827181816101,-0.3115634620189667,0.007721182890236378,0.9891964197158813,0.14633625745773315,0.0,0.0012512588873505592,0.999969482421875,-0.33567309379577637,0.9419537782669067,0.0013733329251408577,0.33567309379577637,0.9419537782669067,0.0013733329251408577,1.0,0.0,-0.0,0.0004882961511611938,0.0006408886983990669,0.999969482421875,1.0,0.0,-0.0,0.999969482421875,0.0,-0.0,0.0,-1.0,-0.0,6.103701889514923e-05,0.0002441480755805969,0.999969482421875,0.0,-1.0,-0.0,-6.103701889514923e-05,0.0002441480755805969,1.0,-1.0,0.0,-0.0,-0.0004882961511611938,0.0006408886983990669,0.999969482421875,-1.0,0.0,-0.0,0.0,-1.0,0.00030518509447574615,-0.00045777764171361923,0.0013733329251408577,0.999969482421875,0.00045777764171361923,0.0013733329251408577,0.999969482421875,-0.00045777764171361923,0.0009460737928748131,0.999969482421875,0.9491561651229858,-0.00012207403779029846,0.31476789712905884,0.9491561651229858,-0.00012207403779029846,0.31476789712905884,0.00012207403779029846,-0.0011597033590078354,0.999969482421875,-0.9491561651229858,-0.00012207403779029846,0.31476789712905884,0.00045777764171361923,0.0009460737928748131,0.999969482421875,-0.9491561651229858,-0.00012207403779029846,0.31476789712905884,-0.00012207403779029846,-0.0011597033590078354,0.999969482421875,0.0,-0.0011597033590078354,0.999969482421875,-0.9491561651229858,-0.00012207403779029846,0.31476789712905884,-0.00012207403779029846,-0.0011597033590078354,0.999969482421875,-0.9491561651229858,-0.00012207403779029846,0.31476789712905884,0.00027466658502817154,0.0002441480755805969,0.999969482421875,-0.00027466658502817154,0.0002441480755805969,0.999969482421875,0.9491561651229858,-0.00012207403779029846,0.31476789712905884,0.9491561651229858,-0.00012207403779029846,0.31476789712905884,0.00012207403779029846,-0.0011597033590078354,0.999969482421875,-0.00079348124563694,0.99957275390625,0.02868739888072014,0.0,0.0002136295661330223,1.0,-0.3815424144268036,0.9241309762001038,0.01980651170015335,0.3550218343734741,0.9346293807029724,0.020020142197608948,-0.3815424144268036,0.9241309762001038,0.01980651170015335,0.3550218343734741,0.9346293807029724,0.020020142197608948,-0.0318308062851429,0.8992888927459717,-0.4361400306224823,0.99981689453125,0.018829919397830963,0.00039674062281847,-0.0002136295661330223,0.006164738908410072,-0.999969482421875,0.3866389989852905,0.922086238861084,0.0157170332968235,-0.3733939528465271,0.9275185465812683,0.01580858789384365,-6.103701889514923e-05,-0.011780144646763802,0.999908447265625,0.999969482421875,-0.0048829615116119385,-6.103701889514923e-05,0.006775109097361565,0.8767967820167542,0.48075807094573975,-0.3733939528465271,0.9275185465812683,0.01580858789384365,-0.00012207403779029846,-0.013733329251408577,0.9998779296875,-0.999969482421875,0.006286812946200371,9.155552834272385e-05,-0.4196905493736267,0.9075594544410706,0.012390514835715294,0.37778863310813904,0.9257789850234985,0.01263466291129589,0.999969482421875,0.0011291848495602608,-0.0,6.103701889514923e-05,-0.013458662666380405,0.999908447265625,0.37778863310813904,0.9257789850234985,0.01263466291129589,-0.3711661100387573,0.9284645915031433,0.012726218439638615,0.39481794834136963,0.9186681509017944,0.012573625892400742,0.39481794834136963,0.9186681509017944,0.012573625892400742,0.999969482421875,0.007782219909131527,9.155552834272385e-05,9.155552834272385e-05,-0.010498367249965668,0.99993896484375,0.39320048689842224,0.9192480444908142,0.017242956906557083,-0.35319072008132935,0.9353618025779724,0.01754814386367798,0.39320048689842224,0.9192480444908142,0.017242956906557083,-0.35319072008132935,0.9353618025779724,0.01754814386367798,0.00015259254723787308,0.005096591077744961,-0.999969482421875,0.02850428782403469,0.9012115597724915,-0.43241676688194275,0.4049806296825409,0.9143040180206299,-0.005005035549402237,0.010528885759413242,0.8826563358306885,0.4698629677295685,0.4049806296825409,0.9143040180206299,-0.005005035549402237,-3.0518509447574615e-05,-0.005096591077744961,0.999969482421875,-0.35319072008132935,0.9353618025779724,0.01754814386367798,-3.0518509447574615e-05,-0.005096591077744961,0.999969482421875,-0.999847412109375,0.01669362559914589,0.00030518509447574615,0.00015259254723787308,0.005096591077744961,-0.999969482421875,-0.999847412109375,0.01669362559914589,0.00030518509447574615,0.02850428782403469,0.9012115597724915,-0.43241676688194275,0.006775109097361565,0.9064302444458008,-0.4222846031188965,0.999969482421875,-0.006286812946200371,-9.155552834272385e-05,9.155552834272385e-05,0.013733329251408577,-0.9998779296875,0.007751701399683952,0.8721579909324646,0.48912015557289124,0.999969482421875,-0.006286812946200371,-9.155552834272385e-05,-0.00012207403779029846,-0.013733329251408577,0.9998779296875,-6.103701889514923e-05,-0.011780144646763802,0.999908447265625,0.006775109097361565,0.8767967820167542,0.48075807094573975,-0.999969482421875,0.0048829615116119385,6.103701889514923e-05,0.006775109097361565,0.9064302444458008,-0.4222846031188965,-0.999969482421875,0.006286812946200371,9.155552834272385e-05,9.155552834272385e-05,0.013733329251408577,-0.9998779296875,-0.3733939528465271,0.9275185465812683,0.01580858789384365,0.3866389989852905,0.922086238861084,0.0157170332968235,0.3866389989852905,0.922086238861084,0.0157170332968235,0.999969482421875,-0.0048829615116119385,-6.103701889514923e-05,3.0518509447574615e-05,0.011780144646763802,-0.999908447265625,-0.999969482421875,-0.007782219909131527,-9.155552834272385e-05,9.155552834272385e-05,-0.010498367249965668,0.99993896484375,-0.4196905493736267,0.9075594544410706,0.012390514835715294,0.004547257907688618,0.9071016311645508,-0.4208807647228241,-0.999969482421875,0.0048829615116119385,6.103701889514923e-05,3.0518509447574615e-05,0.011780144646763802,-0.999908447265625,-0.3711661100387573,0.9284645915031433,0.012726218439638615,0.39481794834136963,0.9186681509017944,0.012573625892400742,0.39481794834136963,0.9186681509017944,0.012573625892400742,0.999969482421875,0.007782219909131527,9.155552834272385e-05,-9.155552834272385e-05,0.010498367249965668,-0.99993896484375,-0.00906399730592966,0.8916898369789124,-0.4525284469127655,-0.4196905493736267,0.9075594544410706,0.012390514835715294,-9.155552834272385e-05,0.010498367249965668,-0.99993896484375,0.0014954069629311562,0.9080172181129456,-0.4188970625400543,0.37778863310813904,0.9257789850234985,0.01263466291129589,0.0,0.013458662666380405,-0.999908447265625,-0.3815424144268036,0.9241309762001038,0.01980651170015335,-0.004028443247079849,0.8748435974121094,0.4843592643737793,-0.999969482421875,-0.0011291848495602608,-0.0,-0.4196905493736267,0.9075594544410706,0.012390514835715294,0.37778863310813904,0.9257789850234985,0.01263466291129589,0.0014954069629311562,0.9080172181129456,-0.4188970625400543,-0.999969482421875,-0.0011291848495602608,-0.0,0.0,0.013458662666380405,-0.999908447265625,-0.99981689453125,-0.018829919397830963,9.155552834272385e-05,6.103701889514923e-05,-0.006164738908410072,0.999969482421875,-0.41346475481987,0.9104892015457153,-0.004821924492716789,-0.012024292722344398,0.8784447908401489,0.4776451885700226,0.99981689453125,0.018829919397830963,0.00039674062281847,6.103701889514923e-05,-0.006164738908410072,0.999969482421875,-0.99981689453125,-0.018829919397830963,9.155552834272385e-05,-0.41346475481987,0.9104892015457153,-0.004821924492716789,-0.0002136295661330223,0.006164738908410072,-0.999969482421875,6.103701889514923e-05,-0.006164738908410072,0.999969482421875,-0.02453688159584999,0.999664306640625,0.008056886494159698,-0.0002136295661330223,0.006164738908410072,-0.999969482421875,-0.02453688159584999,0.999664306640625,0.008056886494159698,-0.99981689453125,-0.018829919397830963,9.155552834272385e-05,-0.02453688159584999,0.999664306640625,0.008056886494159698,-0.0002136295661330223,0.006164738908410072,-0.999969482421875,-0.02453688159584999,0.999664306640625,0.008056886494159698,6.103701889514923e-05,-0.013458662666380405,0.999908447265625,-0.0014648884534835815,0.99981689453125,0.01754814386367798,0.0,0.013458662666380405,-0.999908447265625,-0.0014648884534835815,0.99981689453125,0.01754814386367798,-0.999969482421875,-0.0011291848495602608,-0.0,-0.0014648884534835815,0.99981689453125,0.01754814386367798,0.0,0.013458662666380405,-0.999908447265625,-0.0014648884534835815,0.99981689453125,0.01754814386367798,9.155552834272385e-05,-0.010498367249965668,0.99993896484375,-0.010162663646042347,0.999847412109375,0.013672292232513428,-9.155552834272385e-05,0.010498367249965668,-0.99993896484375,-0.010162663646042347,0.999847412109375,0.013672292232513428,-0.999969482421875,-0.007782219909131527,-9.155552834272385e-05,-0.010162663646042347,0.999847412109375,0.013672292232513428,-9.155552834272385e-05,0.010498367249965668,-0.99993896484375,-0.010162663646042347,0.999847412109375,0.013672292232513428,-6.103701889514923e-05,-0.011780144646763802,0.999908447265625,0.006378368474543095,0.999847412109375,0.015381328761577606,3.0518509447574615e-05,0.011780144646763802,-0.999908447265625,0.006378368474543095,0.999847412109375,0.015381328761577606,-0.999969482421875,0.0048829615116119385,6.103701889514923e-05,0.006378368474543095,0.999847412109375,0.015381328761577606,3.0518509447574615e-05,0.011780144646763802,-0.999908447265625,0.006378368474543095,0.999847412109375,0.015381328761577606,-0.00012207403779029846,-0.013733329251408577,0.9998779296875,0.008178960531949997,0.999786376953125,0.017914365977048874,9.155552834272385e-05,0.013733329251408577,-0.9998779296875,0.008178960531949997,0.999786376953125,0.017914365977048874,-0.999969482421875,0.006286812946200371,9.155552834272385e-05,0.008178960531949997,0.999786376953125,0.017914365977048874,9.155552834272385e-05,0.013733329251408577,-0.9998779296875,0.008178960531949997,0.999786376953125,0.017914365977048874,-3.0518509447574615e-05,-0.005096591077744961,0.999969482421875,0.021790215745568275,0.999725341796875,0.0066225165501236916,0.00015259254723787308,0.005096591077744961,-0.999969482421875,0.021790215745568275,0.999725341796875,0.0066225165501236916,-0.999847412109375,0.01669362559914589,0.00030518509447574615,0.021790215745568275,0.999725341796875,0.0066225165501236916,0.00015259254723787308,0.005096591077744961,-0.999969482421875,0.021790215745568275,0.999725341796875,0.0066225165501236916,0.0,0.9887996912002563,0.14920499920845032,0.0,-0.999969482421875,0.00030518509447574615,0.0,1.0,-0.0001831110566854477,0.0,-0.9676808714866638,0.252052366733551,-3.0518509447574615e-05,0.999969482421875,0.0021973326802253723,0.921536922454834,0.0,-0.3882259726524353,0.0,0.999969482421875,-0.0006714072078466415,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.079439677298069,0.9935300946235657,0.08105716109275818,0.14920499920845032,0.9887996912002563,-0.0,0.0,0.7070833444595337,-0.7070833444595337,0.0,0.7070833444595337,-0.7070833444595337,0.7159642577171326,0.1359599530696869,0.6847438216209412,0.6583147644996643,0.42603838443756104,0.6205023527145386,0.36970123648643494,0.00119022186845541,-0.9291360378265381,0.00045777764171361923,-0.999969482421875,0.00045777764171361923,0.7213965058326721,0.002533036284148693,0.6924650073051453,-0.5597400069236755,-0.8279976844787598,-0.032959990203380585,0.7213965058326721,0.002533036284148693,0.6924650073051453,0.574297308921814,0.6233710646629333,0.5306253433227539,0.11270485818386078,0.9921872615814209,0.05310220643877983,0.13736380636692047,0.9279152750968933,-0.34650716185569763,0.8774986863136292,0.2537003755569458,-0.40693381428718567,0.7213965058326721,0.00198370311409235,0.6924955248832703,0.99993896484375,0.0016174810007214546,0.009826960042119026,0.00045777764171361923,-0.999969482421875,0.00045777764171361923,0.7207861542701721,0.0020142216235399246,0.6931058764457703,-0.5597400069236755,-0.8279976844787598,-0.032959990203380585,0.99993896484375,0.0016174810007214546,0.009826960042119026,0.7207861542701721,0.0020142216235399246,0.6931058764457703,0.0013733329251408577,0.9419537782669067,0.33567309379577637,0.0,0.0,1.0,0.616992712020874,0.7412946224212646,-0.2641682028770447,0.0013733329251408577,0.9419537782669067,-0.33567309379577637,0.0013733329251408577,0.9419537782669067,0.33567309379577637,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.5153355598449707,0.6649067401885986,-0.5406048893928528,0.14511550962924957,0.9893490672111511,0.010620441287755966,0.616992712020874,0.7412946224212646,-0.2641682028770447,0.5153355598449707,0.6649067401885986,-0.5406048893928528,0.5153355598449707,0.6649067401885986,-0.5406048893928528,0.14920499920845032,0.9887996912002563,-0.0,0.14920499920845032,0.9887996912002563,-0.0,0.5153355598449707,0.6649067401885986,-0.5406048893928528,0.999969482421875,0.0012512588873505592,-0.0,0.0013733329251408577,0.9419537782669067,0.33567309379577637,0.0013733329251408577,0.9419537782669067,-0.33567309379577637,0.0,0.0,-1.0,0.999969482421875,0.0006408886983990669,-0.0004882961511611938,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,-1.0,-0.0,1.0,0.0002441480755805969,-6.103701889514923e-05,0.0,-1.0,-0.0,1.0,0.0002441480755805969,6.103701889514923e-05,0.0,0.0,1.0,0.999969482421875,0.0006408886983990669,0.0004882961511611938,0.0,0.0,1.0,0.999969482421875,0.0013733329251408577,0.00045777764171361923,0.999969482421875,0.0013733329251408577,-0.00045777764171361923,0.999969482421875,0.0009460737928748131,0.00045777764171361923,0.31476789712905884,-0.00012207403779029846,-0.9491561651229858,0.31476789712905884,-0.00012207403779029846,-0.9491561651229858,0.999969482421875,-0.0011597033590078354,-0.00012207403779029846,0.31476789712905884,-0.00012207403779029846,0.9491561651229858,0.999969482421875,0.0009460737928748131,-0.00045777764171361923,0.31476789712905884,-0.00012207403779029846,0.9491561651229858,0.999969482421875,-0.0011597033590078354,0.00012207403779029846,0.999969482421875,-0.0011597033590078354,-0.0,0.31476789712905884,-0.00012207403779029846,0.9491561651229858,0.999969482421875,-0.0011597033590078354,0.00012207403779029846,0.31476789712905884,-0.00012207403779029846,0.9491561651229858,0.999969482421875,0.0002441480755805969,-0.00027466658502817154,0.999969482421875,0.0002441480755805969,0.00027466658502817154,0.31476789712905884,-0.00012207403779029846,-0.9491561651229858,0.31476789712905884,-0.00012207403779029846,-0.9491561651229858,0.999969482421875,-0.0011597033590078354,-0.00012207403779029846,0.02868739888072014,0.99957275390625,0.00079348124563694,0.999969482421875,0.0002136295661330223,-0.0,0.01980651170015335,0.9241309762001038,0.3815424144268036,0.020020142197608948,0.9346293807029724,-0.3550218343734741,0.01980651170015335,0.9241309762001038,0.3815424144268036,0.020020142197608948,0.9346293807029724,-0.3550218343734741,-0.4361400306224823,0.8992888927459717,0.0318308062851429,0.00039674062281847,0.018829919397830963,-0.99981689453125,-0.999969482421875,0.006164738908410072,0.0002136295661330223,0.0157170332968235,0.922086238861084,-0.3866389989852905,0.01580858789384365,0.9275185465812683,0.3733939528465271,0.999908447265625,-0.011780144646763802,6.103701889514923e-05,-6.103701889514923e-05,-0.0048829615116119385,-0.999969482421875,0.48075807094573975,0.8767967820167542,-0.006775109097361565,0.01580858789384365,0.9275185465812683,0.3733939528465271,0.9998779296875,-0.013733329251408577,0.00012207403779029846,9.155552834272385e-05,0.006286812946200371,0.999969482421875,0.012390514835715294,0.9075594544410706,0.4196905493736267,0.01263466291129589,0.9257789850234985,-0.37778863310813904,0.0,0.0011291848495602608,-0.999969482421875,0.999908447265625,-0.013458662666380405,-6.103701889514923e-05,0.01263466291129589,0.9257789850234985,-0.37778863310813904,0.012726218439638615,0.9284645915031433,0.3711661100387573,0.012573625892400742,0.9186681509017944,-0.39481794834136963,0.012573625892400742,0.9186681509017944,-0.39481794834136963,9.155552834272385e-05,0.007782219909131527,-0.999969482421875,0.99993896484375,-0.010498367249965668,-9.155552834272385e-05,0.017242956906557083,0.9192785620689392,-0.39320048689842224,0.01754814386367798,0.9353618025779724,0.35319072008132935,0.017242956906557083,0.9192785620689392,-0.39320048689842224,0.01754814386367798,0.9353618025779724,0.35319072008132935,-0.999969482421875,0.005096591077744961,-0.00015259254723787308,-0.43241676688194275,0.9012115597724915,-0.02850428782403469,-0.005005035549402237,0.9143040180206299,-0.4049806296825409,0.4698629677295685,0.8826563358306885,-0.010528885759413242,-0.005005035549402237,0.9143040180206299,-0.4049806296825409,0.999969482421875,-0.005096591077744961,3.0518509447574615e-05,0.01754814386367798,0.9353618025779724,0.35319072008132935,0.999969482421875,-0.005096591077744961,3.0518509447574615e-05,0.00030518509447574615,0.01669362559914589,0.999847412109375,-0.999969482421875,0.005096591077744961,-0.00015259254723787308,0.00030518509447574615,0.01669362559914589,0.999847412109375,-0.43241676688194275,0.9012115597724915,-0.02850428782403469,-0.4222846031188965,0.9064302444458008,-0.006775109097361565,-9.155552834272385e-05,-0.006286812946200371,-0.999969482421875,-0.9998779296875,0.013733329251408577,-9.155552834272385e-05,0.48912015557289124,0.8721579909324646,-0.007751701399683952,-9.155552834272385e-05,-0.006286812946200371,-0.999969482421875,0.9998779296875,-0.013733329251408577,0.00012207403779029846,0.999908447265625,-0.011780144646763802,6.103701889514923e-05,0.48075807094573975,0.8767967820167542,-0.006775109097361565,3.0518509447574615e-05,0.0048829615116119385,0.999969482421875,-0.4222846031188965,0.9064302444458008,-0.006775109097361565,9.155552834272385e-05,0.006286812946200371,0.999969482421875,-0.9998779296875,0.013733329251408577,-9.155552834272385e-05,0.01580858789384365,0.9275185465812683,0.3733939528465271,0.0157170332968235,0.922086238861084,-0.3866389989852905,0.0157170332968235,0.922086238861084,-0.3866389989852905,-6.103701889514923e-05,-0.0048829615116119385,-0.999969482421875,-0.999908447265625,0.011780144646763802,-3.0518509447574615e-05,-9.155552834272385e-05,-0.007782219909131527,0.999969482421875,0.99993896484375,-0.010498367249965668,-9.155552834272385e-05,0.012390514835715294,0.9075594544410706,0.4196905493736267,-0.4208807647228241,0.9070711135864258,-0.004547257907688618,3.0518509447574615e-05,0.0048829615116119385,0.999969482421875,-0.999908447265625,0.011780144646763802,-3.0518509447574615e-05,0.012726218439638615,0.9284645915031433,0.3711661100387573,0.012573625892400742,0.9186681509017944,-0.39481794834136963,0.012573625892400742,0.9186681509017944,-0.39481794834136963,9.155552834272385e-05,0.007782219909131527,-0.999969482421875,-0.99993896484375,0.010498367249965668,9.155552834272385e-05,-0.4525284469127655,0.8916898369789124,0.00906399730592966,0.012390514835715294,0.9075594544410706,0.4196905493736267,-0.99993896484375,0.010498367249965668,9.155552834272385e-05,-0.4188970625400543,0.9080172181129456,-0.0014954069629311562,0.01263466291129589,0.9257789850234985,-0.37778863310813904,-0.999908447265625,0.013458662666380405,-0.0,0.01980651170015335,0.9241309762001038,0.3815424144268036,0.4843897819519043,0.8748130798339844,0.004028443247079849,0.0,-0.0011291848495602608,0.999969482421875,0.012390514835715294,0.9075594544410706,0.4196905493736267,0.01263466291129589,0.9257789850234985,-0.37778863310813904,-0.4188970625400543,0.9080172181129456,-0.0014954069629311562,0.0,-0.0011291848495602608,0.999969482421875,-0.999908447265625,0.013458662666380405,-0.0,9.155552834272385e-05,-0.018829919397830963,0.99981689453125,0.999969482421875,-0.006164738908410072,-6.103701889514923e-05,-0.004821924492716789,0.9104892015457153,0.41346475481987,0.4776451885700226,0.8784447908401489,0.012024292722344398,0.00039674062281847,0.018829919397830963,-0.99981689453125,0.999969482421875,-0.006164738908410072,-6.103701889514923e-05,9.155552834272385e-05,-0.018829919397830963,0.99981689453125,-0.004821924492716789,0.9104892015457153,0.41346475481987,-0.999969482421875,0.006164738908410072,0.0002136295661330223,0.999969482421875,-0.006164738908410072,-6.103701889514923e-05,0.008056886494159698,0.999664306640625,0.02453688159584999,-0.999969482421875,0.006164738908410072,0.0002136295661330223,0.008056886494159698,0.999664306640625,0.02453688159584999,9.155552834272385e-05,-0.018829919397830963,0.99981689453125,0.008056886494159698,0.999664306640625,0.02453688159584999,-0.999969482421875,0.006164738908410072,0.0002136295661330223,0.008056886494159698,0.999664306640625,0.02453688159584999,0.999908447265625,-0.013458662666380405,-6.103701889514923e-05,0.01754814386367798,0.99981689453125,0.0014648884534835815,-0.999908447265625,0.013458662666380405,-0.0,0.01754814386367798,0.99981689453125,0.0014648884534835815,0.0,-0.0011291848495602608,0.999969482421875,0.01754814386367798,0.99981689453125,0.0014648884534835815,-0.999908447265625,0.013458662666380405,-0.0,0.01754814386367798,0.99981689453125,0.0014648884534835815,0.99993896484375,-0.010498367249965668,-9.155552834272385e-05,0.013672292232513428,0.999847412109375,0.010162663646042347,-0.99993896484375,0.010498367249965668,9.155552834272385e-05,0.013672292232513428,0.999847412109375,0.010162663646042347,-9.155552834272385e-05,-0.007782219909131527,0.999969482421875,0.013672292232513428,0.999847412109375,0.010162663646042347,-0.99993896484375,0.010498367249965668,9.155552834272385e-05,0.013672292232513428,0.999847412109375,0.010162663646042347,0.999908447265625,-0.011780144646763802,6.103701889514923e-05,0.015381328761577606,0.999847412109375,-0.006378368474543095,-0.999908447265625,0.011780144646763802,-3.0518509447574615e-05,0.015381328761577606,0.999847412109375,-0.006378368474543095,3.0518509447574615e-05,0.0048829615116119385,0.999969482421875,0.015381328761577606,0.999847412109375,-0.006378368474543095,-0.999908447265625,0.011780144646763802,-3.0518509447574615e-05,0.015381328761577606,0.999847412109375,-0.006378368474543095,0.9998779296875,-0.013733329251408577,0.00012207403779029846,0.017914365977048874,0.999786376953125,-0.008178960531949997,-0.9998779296875,0.013733329251408577,-9.155552834272385e-05,0.017914365977048874,0.999786376953125,-0.008178960531949997,9.155552834272385e-05,0.006286812946200371,0.999969482421875,0.017914365977048874,0.999786376953125,-0.008178960531949997,-0.9998779296875,0.013733329251408577,-9.155552834272385e-05,0.017914365977048874,0.999786376953125,-0.008178960531949997,0.999969482421875,-0.005096591077744961,3.0518509447574615e-05,0.0066225165501236916,0.999725341796875,-0.021790215745568275,-0.999969482421875,0.005096591077744961,-0.00015259254723787308,0.0066225165501236916,0.999725341796875,-0.021790215745568275,0.00030518509447574615,0.01669362559914589,0.999847412109375,0.0066225165501236916,0.999725341796875,-0.021790215745568275,-0.999969482421875,0.005096591077744961,-0.00015259254723787308,0.0066225165501236916,0.999725341796875,-0.021790215745568275,-0.00039674062281847,0.999969482421875,-0.0,0.7872859835624695,0.22739341855049133,-0.5730765461921692,0.7872859835624695,0.22739341855049133,-0.5730765461921692,0.7872859835624695,0.22739341855049133,-0.5730765461921692,0.7872859835624695,0.22739341855049133,-0.5730765461921692,0.7872859835624695,0.22739341855049133,-0.5730765461921692,0.7872859835624695,0.22739341855049133,-0.5730765461921692,0.0,0.999969482421875,-0.0,0.6940519213676453,0.20047609508037567,-0.6914273500442505,-0.5597400069236755,-0.8279976844787598,-0.032959990203380585,0.7047944664955139,0.1975463181734085,-0.6812952160835266,0.0,1.0,-0.0,-0.00039674062281847,0.999969482421875,-0.0,0.252052366733551,-0.9676808714866638,-0.0,0.0021973326802253723,0.999969482421875,3.0518509447574615e-05,-0.5597400069236755,-0.8279976844787598,-0.032959990203380585,0.0,1.0,-0.0,0.6940519213676453,0.20047609508037567,-0.6914273500442505,-0.00045777764171361923,0.999969482421875,-0.00045777764171361923,0.09118930995464325,0.9925229549407959,0.08102664351463318,0.7207861542701721,0.001739555038511753,0.6931058764457703,0.7213965058326721,0.0027161473408341408,0.6924650073051453,0.7207861542701721,0.001739555038511753,0.6931058764457703,0.7213965058326721,0.0012207403779029846,0.6924955248832703,-0.0004882961511611938,0.999969482421875,-0.00045777764171361923,0.0004882961511611938,-0.999969482421875,0.00045777764171361923,0.0004882961511611938,-0.999969482421875,0.00045777764171361923,0.5789055824279785,0.6154057383537292,0.5348674058914185,0.09118930995464325,0.9925229549407959,0.08102664351463318,0.7207861542701721,0.0012207403779029846,0.6931058764457703,0.7207861542701721,0.0006714072078466415,0.6931058764457703,0.0004882961511611938,-0.999969482421875,0.00045777764171361923,0.0004882961511611938,-0.999969482421875,0.00045777764171361923],"indices":[4,9,2,9,4,13,16,8,14,8,16,11,9,3,2,3,9,12,276,14,268,14,276,16,13,25,9,25,13,23,30,20,266,296,26,298,26,296,281,45,315,46,460,33,27,33,460,32,36,27,37,27,36,460,31,269,283,269,31,21,44,315,45,40,315,44,18,31,283,43,315,40,35,41,48,35,48,34,8,15,14,15,8,10,302,307,304,307,302,309,42,315,43,41,315,42,285,310,303,310,285,289,6,254,105,254,6,257,263,458,106,458,263,295,46,315,38,39,53,38,35,315,41,22,288,273,17,284,287,284,17,286,293,296,298,19,22,271,53,46,38,12,24,103,22,273,271,317,392,319,392,317,73,320,74,318,74,320,75,344,58,342,58,344,59,43,361,42,361,43,60,42,349,41,349,42,56,22,290,288,343,352,345,352,343,57,370,329,325,329,370,61,50,378,47,378,50,62,47,386,51,386,47,66,49,367,50,367,49,358,44,67,40,67,44,68,381,64,337,64,381,65,51,397,52,397,51,389,46,403,45,403,46,76,52,77,53,77,52,321,324,372,371,372,324,63,338,383,382,383,338,339,404,78,322,78,404,79,401,409,405,409,401,80,406,413,400,413,406,81,323,415,408,415,323,411,334,82,70,82,334,83,72,417,335,417,72,84,398,421,394,421,398,85,391,423,399,423,391,419,340,86,384,86,340,87,376,425,341,425,376,88,69,429,375,429,69,89,385,431,388,431,385,427,327,90,373,90,327,91,364,433,326,433,364,92,379,437,366,437,379,93,374,439,380,439,374,435,362,94,359,94,362,95,330,441,363,441,330,96,368,445,331,445,368,97,360,447,369,447,360,443,55,98,54,98,55,99,353,449,351,449,353,100,356,453,354,453,356,101,346,455,355,455,346,451,456,450,454,450,456,452,448,442,446,442,448,444,416,410,414,410,416,412,424,418,422,418,424,420,432,426,430,426,432,428,440,434,438,434,440,436,311,316,291,316,311,29,15,102,104,102,15,10,24,104,103,104,24,15,298,291,293,291,298,311,104,459,5,459,104,256,108,7,0,7,108,262,300,312,299,312,300,313,294,272,267,272,294,292,306,314,301,314,306,28,281,303,26,303,281,297,282,266,270,266,282,30,34,49,461,49,34,48,461,49,50,461,50,47,461,47,51,461,51,52,461,53,39,53,461,52,305,28,306,28,305,308,3,103,5,103,3,12,297,285,303,29,289,316,289,29,310,48,357,49,357,48,347,40,328,43,328,40,365,53,402,46,402,53,407,45,71,44,71,45,393,395,377,332,377,395,387,333,390,396,390,333,336,41,348,48,348,41,350,463,258,103,464,277,274,465,279,278,1,275,457,114,119,112,119,114,123,126,118,124,118,126,121,119,113,112,113,119,122,498,124,490,124,498,126,123,135,119,135,123,133,140,130,488,518,136,520,136,518,504,155,537,156,692,143,137,143,692,142,146,137,147,137,146,692,141,491,506,491,141,131,154,537,155,150,537,154,128,141,506,153,537,150,145,151,158,145,158,144,118,125,124,125,118,120,524,529,526,529,524,531,152,537,153,151,537,152,508,532,525,532,508,512,486,216,482,216,486,220,684,689,680,156,537,148,149,163,148,145,537,151,132,511,495,127,507,510,507,127,509,516,518,520,129,132,493,163,156,148,122,134,213,132,495,493,539,614,541,614,539,183,542,184,540,184,542,185,566,168,564,168,566,169,153,583,152,583,153,170,152,571,151,571,152,166,132,513,511,565,574,567,574,565,167,592,551,547,551,592,171,160,600,157,600,160,172,157,608,161,608,157,176,159,589,160,589,159,580,154,177,150,177,154,178,603,174,559,174,603,175,161,619,162,619,161,611,156,625,155,625,156,186,162,187,163,187,162,543,546,594,593,594,546,173,560,605,604,605,560,561,626,188,544,188,626,189,623,631,627,631,623,190,628,635,622,635,628,191,545,637,630,637,545,633,556,192,180,192,556,193,182,639,557,639,182,194,620,643,616,643,620,195,613,645,621,645,613,641,562,196,606,196,562,197,598,647,563,647,598,198,179,651,597,651,179,199,607,653,610,653,607,649,549,200,595,200,549,201,586,655,548,655,586,202,601,659,588,659,601,203,596,661,602,661,596,657,584,204,581,204,584,205,552,663,585,663,552,206,590,667,553,667,590,207,582,669,591,669,582,665,165,208,164,208,165,209,575,671,573,671,575,210,578,675,576,675,578,211,568,677,577,677,568,673,678,672,676,672,678,674,670,664,668,664,670,666,638,632,636,632,638,634,646,640,644,640,646,642,654,648,652,648,654,650,662,656,660,656,662,658,533,538,514,538,533,139,125,212,214,212,125,120,134,214,213,214,134,125,218,217,219,520,514,516,514,520,533,679,116,479,116,679,691,218,117,111,117,218,219,522,534,521,534,522,535,517,494,489,494,517,515,528,536,523,536,528,138,504,525,136,525,504,519,505,488,492,488,505,140,144,159,693,159,144,158,693,159,160,693,160,157,693,157,161,693,161,162,693,163,149,163,693,162,527,138,528,138,527,530,475,688,694,688,475,485,683,681,480,113,213,115,213,113,122,519,508,525,139,512,538,512,139,532,158,579,159,579,158,569,150,550,153,550,150,587,163,624,156,624,163,629,155,181,154,181,155,615,617,599,554,599,617,609,555,612,618,612,555,558,151,570,158,570,151,572,687,685,682,685,687,696,695,690,686,230,471,470,471,230,229,229,477,471,477,229,235,253,260,462,468,499,496,467,501,502,469,503,500,466,497,478,231,470,481,470,231,230,109,107,245,472,116,479,116,472,215,246,106,263,106,246,110,232,483,473,483,232,236,238,227,703,227,238,243,240,226,225,226,240,241,244,709,708,709,244,228,228,259,709,259,228,255,239,229,230,229,239,237,474,234,700,234,474,476,237,235,229,235,237,706,247,222,221,222,247,249,704,236,232,236,704,710,703,261,248,261,703,227,698,707,466,707,698,242,249,223,222,223,249,250,702,230,231,230,702,239,250,224,223,224,250,251,479,233,697,233,479,116,484,699,487,699,484,701,466,707,252,263,711,705,711,263,106,466,252,280,478,698,466,225,265,264,265,225,226,697,243,238,243,697,233,700,241,240,241,700,234,701,708,699,708,701,244,222,237,239,237,222,223,223,706,237,706,223,224,705,710,704,710,705,711,221,239,702,239,221,222]}
var roofTopMeshBuffer={"positions":[1.0,0.0,-0.0,0.0,0.0,-0.0,1.0,0.0,-1.0,0.0,0.0,-1.0,0.5,0.0,-0.0,0.5,0.0,-1.0,0.0,0.0,-0.5,1.0,0.0,-0.5,0.5,0.0,-0.5,0.25,0.0,-0.0,0.25,0.0,-1.0,0.0,0.0,-0.25,1.0,0.0,-0.75,0.75,0.0,-0.0,0.75,0.0,-1.0,0.0,0.0,-0.75,1.0,0.0,-0.25,0.5,0.0,-0.25,0.5,0.0,-0.75,0.75,0.0,-0.5,0.25,0.0,-0.5,0.25,0.0,-0.25,0.75,0.0,-0.25,0.75,0.0,-0.75,0.25,0.0,-0.75,0.5,0.1703355312347412,-0.5,0.5,0.1703355312347412,-0.25,0.75,0.1703355312347412,-0.5,0.75,0.1703355312347412,-0.25,0.0,0.20992708206176758,-0.5,0.0,0.20992708206176758,-0.75,0.25,0.20992708206176758,-0.5,0.25,0.20992708206176758,-0.75,1.0,0.36970996856689453,-1.0,1.0,0.36970996856689453,-0.75,0.75,0.36970996856689453,-1.0,0.75,0.36970996856689453,-0.75,0.5,0.0,-0.5,0.5,0.0,-0.5,0.5,0.0,-0.25,0.5,0.0,-0.25,0.75,0.0,-0.5,0.75,0.0,-0.5,0.0,0.0,-0.5,0.0,0.0,-0.5,0.25,0.0,-0.5,0.25,0.0,-0.5,0.75,0.0,-0.25,0.75,0.0,-0.25,0.75,0.0,-1.0,0.75,0.0,-1.0,0.75,0.0,-0.75,0.75,0.0,-0.75,1.0,0.0,-0.75,1.0,0.0,-0.75,0.25,0.0,-0.75,0.25,0.0,-0.75,0.0,0.0,-0.75,0.0,0.0,-0.75,0.5,0.1703355312347412,-0.5,0.5,0.1703355312347412,-0.5,0.5,0.1703355312347412,-0.25,0.5,0.1703355312347412,-0.25,0.75,0.1703355312347412,-0.5,0.75,0.1703355312347412,-0.5,0.75,0.1703355312347412,-0.25,0.75,0.1703355312347412,-0.25,0.0,0.20992708206176758,-0.5,0.0,0.20992708206176758,-0.5,0.0,0.20992708206176758,-0.75,0.0,0.20992708206176758,-0.75,0.25,0.20992708206176758,-0.5,0.25,0.20992708206176758,-0.5,0.25,0.20992708206176758,-0.75,0.25,0.20992708206176758,-0.75,1.0,0.36970996856689453,-1.0,1.0,0.36970996856689453,-1.0,1.0,0.36970996856689453,-0.75,1.0,0.36970996856689453,-0.75,0.75,0.36970996856689453,-1.0,0.75,0.36970996856689453,-1.0,0.75,0.36970996856689453,-0.75,0.75,0.36970996856689453,-0.75,1.0,0.0,-1.0],"normals":[0.0,1.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0],"indices":[21,1,11,1,21,9,22,4,17,4,22,13,23,8,18,8,23,19,69,55,73,55,69,58,17,9,21,9,17,4,8,21,20,21,8,17,20,11,6,11,20,21,13,16,0,16,13,22,7,22,19,22,7,16,39,65,47,65,39,61,53,19,23,19,53,7,35,83,75,83,35,14,49,18,5,18,49,23,18,20,24,20,18,8,5,24,10,24,5,18,10,15,3,15,10,24,27,26,25,26,27,28,62,37,59,37,62,40,48,63,41,63,48,66,42,60,38,60,42,64,32,29,30,29,32,31,74,45,71,45,74,56,57,67,43,67,57,70,72,44,68,44,72,46,33,36,79,36,33,34,12,76,2,76,12,77,81,50,80,50,81,51,52,78,54,78,52,82]}
var windowMeshBuffer={"positions":[0.3850385546684265,0.1554308533668518,2.1420419216156006e-08,0.3850385546684265,0.2857142984867096,1.277242400732348e-08,0.3850385546684265,0.855372428894043,-8.514949634275126e-09,0.2421814203262329,0.1554308533668518,2.1420419216156006e-08,0.2421814203262329,0.2857142984867096,1.277242400732348e-08,0.2421814203262329,0.8571428060531616,-2.1287373641598606e-08,0.09932425618171692,0.1554308533668518,2.1420419216156006e-08,0.09932425618171692,0.2857142984867096,1.277242400732348e-08,0.09932425618171692,0.855372428894043,-8.514949634275126e-09,0.3850385546684265,0.2857142984867096,-0.037611223757267,0.3850385546684265,0.855372428894043,-0.03761124610900879,0.2421814203262329,0.2857142984867096,-0.037611223757267,0.2421814203262329,0.855372428894043,-0.03761124610900879,0.09932425618171692,0.2857142984867096,-0.037611223757267,0.09932425618171692,0.855372428894043,-0.03761124610900879,0.3850385546684265,0.23993588984012604,1.5501029793085763e-08,0.2421814203262329,0.23993588984012604,1.5501029793085763e-08,0.10269150137901306,0.23993588984012604,1.5501029793085763e-08,0.3850385546684265,0.2857142984867096,0.056812629103660583,0.2421814203262329,0.2857142984867096,0.056812629103660583,0.09932425618171692,0.2857142984867096,0.056812629103660583,0.3850385546684265,0.23993588984012604,0.05681263282895088,0.2421814203262329,0.23993588984012604,0.05681263282895088,0.09932425618171692,0.23993588984012604,0.05681263282895088,0.3850385546684265,0.2857142984867096,0.08102740347385406,0.2421814203262329,0.2857142984867096,0.08102740347385406,0.09932425618171692,0.2857142984867096,0.08102740347385406,0.3850385546684265,0.23993588984012604,0.08102740347385406,0.2421814203262329,0.23993588984012604,0.08102740347385406,0.09932425618171692,0.23993588984012604,0.08102740347385406,0.2709529995918274,0.2857142984867096,0.056812629103660583,0.30373722314834595,0.2857142984867096,0.056812629103660583,0.33945149183273315,0.2857142984867096,0.056812629103660583,0.1483619511127472,0.2857142984867096,0.056812629103660583,0.1819036900997162,0.2857142984867096,0.056812629103660583,0.21280810236930847,0.2857142984867096,0.056812629103660583,0.2709529995918274,0.2857142984867096,0.08102740347385406,0.30373722314834595,0.2857142984867096,0.08102740347385406,0.33945149183273315,0.2857142984867096,0.08102740347385406,0.1483619511127472,0.2857142984867096,0.08102740347385406,0.1819036900997162,0.2857142984867096,0.08102740347385406,0.21280810236930847,0.2857142984867096,0.08102740347385406,0.3850385546684265,0.2857142984867096,0.06286632269620895,0.3850385546684265,0.2857142984867096,0.0749737098813057,0.2421814203262329,0.2857142984867096,0.0749737098813057,0.2274632751941681,0.2857142984867096,0.0749737098813057,0.2421814203262329,0.2857142984867096,0.06286632269620895,0.09932425618171692,0.2857142984867096,0.06286632269620895,0.09932425618171692,0.2857142984867096,0.0749737098813057,0.35617098212242126,0.2857142984867096,0.056812629103660583,0.2709529995918274,0.2857142984867096,0.06286632269620895,0.2709529995918274,0.2857142984867096,0.0749737098813057,0.2274632751941681,0.2857142984867096,0.06286632269620895,0.30373722314834595,0.2857142984867096,0.06286632269620895,0.30373722314834595,0.2857142984867096,0.0749737098813057,0.19500800967216492,0.2857142984867096,0.0749737098813057,0.33945149183273315,0.2857142984867096,0.06286632269620895,0.33945149183273315,0.2857142984867096,0.0749737098813057,0.1483619511127472,0.2857142984867096,0.06286632269620895,0.1483619511127472,0.2857142984867096,0.0749737098813057,0.35617098212242126,0.2857142984867096,0.08102740347385406,0.1819036900997162,0.2857142984867096,0.06286632269620895,0.1819036900997162,0.2857142984867096,0.0749737098813057,0.35617098212242126,0.2857142984867096,0.06286632269620895,0.21280810236930847,0.2857142984867096,0.06286632269620895,0.21280810236930847,0.2857142984867096,0.0749737098813057,0.35617098212242126,0.2857142984867096,0.0749737098813057,0.19500800967216492,0.2857142984867096,0.06286632269620895,0.2561263144016266,0.2857142984867096,0.0749737098813057,0.2561263144016266,0.2857142984867096,0.06286632269620895,0.2561263144016266,0.2857142984867096,0.08102740347385406,0.16276124119758606,0.2857142984867096,0.08102740347385406,0.16276124119758606,0.2857142984867096,0.06286632269620895,0.2845686078071594,0.2857142984867096,0.056812629103660583,0.2845686078071594,0.2857142984867096,0.08102740347385406,0.2845686078071594,0.2857142984867096,0.06286632269620895,0.2845686078071594,0.2857142984867096,0.0749737098813057,0.16276124119758606,0.2857142984867096,0.0749737098813057,0.16276124119758606,0.2857142984867096,0.056812629103660583,0.2561263144016266,0.2857142984867096,0.056812629103660583,0.31780147552490234,0.2857142984867096,0.0749737098813057,0.31780147552490234,0.2857142984867096,0.06286632269620895,0.31780147552490234,0.2857142984867096,0.08102740347385406,0.31780147552490234,0.2857142984867096,0.056812629103660583,0.19500800967216492,0.2857142984867096,0.056812629103660583,0.19500800967216492,0.2857142984867096,0.08102740347385406,0.2274632751941681,0.2857142984867096,0.056812629103660583,0.2274632751941681,0.2857142984867096,0.08102740347385406,0.13309261202812195,0.2857142984867096,0.0749737098813057,0.13309261202812195,0.2857142984867096,0.06286632269620895,0.13309261202812195,0.2857142984867096,0.08102740347385406,0.13309261202812195,0.2857142984867096,0.056812629103660583,0.3716433644294739,0.2857142984867096,0.0749737098813057,0.3716433644294739,0.2857142984867096,0.06286632269620895,0.3716433644294739,0.2857142984867096,0.08102740347385406,0.3716433644294739,0.2857142984867096,0.056812629103660583,0.12320995330810547,0.2857142984867096,0.056812629103660583,0.12320995330810547,0.2857142984867096,0.08102740347385406,0.12320995330810547,0.2857142984867096,0.06286632269620895,0.12320995330810547,0.2857142984867096,0.0749737098813057,0.2561263144016266,0.4466831088066101,0.06286632269620895,0.16276124119758606,0.4466831088066101,0.06286632269620895,0.2845686078071594,0.4466831088066101,0.06286632269620895,0.2845686078071594,0.4466831088066101,0.0749737098813057,0.3850385546684265,0.4466831088066101,0.06286632269620895,0.3850385546684265,0.4466831088066101,0.0749737098813057,0.2421814203262329,0.4466831088066101,0.0749737098813057,0.2274632751941681,0.4466831088066101,0.0749737098813057,0.2421814203262329,0.4466831088066101,0.06286632269620895,0.09932425618171692,0.4466831088066101,0.06286632269620895,0.09932425618171692,0.4466831088066101,0.0749737098813057,0.2709529995918274,0.4466831088066101,0.06286632269620895,0.10905048251152039,0.2857142984867096,0.0749737098813057,0.10905048251152039,0.2857142984867096,0.06286632269620895,0.10905048251152039,0.2857142984867096,0.08102740347385406,0.10905048251152039,0.2857142984867096,0.056812629103660583,0.3850385546684265,0.4466831088066101,0.037555888295173645,0.3711901307106018,0.4466831088066101,0.03819965198636055,0.3850385546684265,0.4466831088066101,0.0185551717877388,0.3707258701324463,0.4466831088066101,0.019134750589728355,0.10905048251152039,0.4466831088066101,0.0749737098813057,0.10905048251152039,0.4466831088066101,0.06286632269620895,0.3850385546684265,0.31848421692848206,0.06286632269620895,0.3702598810195923,0.2857142984867096,1.277242400732348e-08,0.16276124119758606,0.4466831088066101,0.0749737098813057,0.31780147552490234,0.4466831088066101,0.0749737098813057,0.31780147552490234,0.4466831088066101,0.06286632269620895,0.13309261202812195,0.4466831088066101,0.0749737098813057,0.33945149183273315,0.4466831088066101,0.0749737098813057,0.1483619511127472,0.4466831088066101,0.06286632269620895,0.1483619511127472,0.4466831088066101,0.0749737098813057,0.1819036900997162,0.4466831088066101,0.06286632269620895,0.1819036900997162,0.4466831088066101,0.0749737098813057,0.35617098212242126,0.4466831088066101,0.06286632269620895,0.21280810236930847,0.4466831088066101,0.06286632269620895,0.13309261202812195,0.4466831088066101,0.06286632269620895,0.3716433644294739,0.4466831088066101,0.0749737098813057,0.3716433644294739,0.4466831088066101,0.06286632269620895,0.12320995330810547,0.4466831088066101,0.06286632269620895,0.12320995330810547,0.4466831088066101,0.0749737098813057,0.3850385546684265,0.2857142984867096,0.037555888295173645,0.3711901307106018,0.2857142984867096,0.03819965198636055,0.3850385546684265,0.2857142984867096,0.0185551717877388,0.3707258701324463,0.2857142984867096,0.019134750589728355,0.21280810236930847,0.4466831088066101,0.0749737098813057,0.35617098212242126,0.4466831088066101,0.0749737098813057,0.19500800967216492,0.4466831088066101,0.06286632269620895,0.2561263144016266,0.4466831088066101,0.0749737098813057,0.33945149183273315,0.4466831088066101,0.06286632269620895,0.19500800967216492,0.4466831088066101,0.0749737098813057,0.30373722314834595,0.4466831088066101,0.0749737098813057,0.30373722314834595,0.4466831088066101,0.06286632269620895,0.2274632751941681,0.4466831088066101,0.06286632269620895,0.2709529995918274,0.4466831088066101,0.0749737098813057,0.10998693108558655,0.2857142984867096,1.277242400732348e-08,0.09932425618171692,0.2857142984867096,0.023136256262660027,0.10962086915969849,0.2857142984867096,0.022208839654922485,0.10937252640724182,0.2857142984867096,0.0372750423848629,0.09932425618171692,0.2857142984867096,0.03906894475221634,0.09932425618171692,0.4466831088066101,0.023136256262660027,0.10962086915969849,0.4466831088066101,0.022208839654922485,0.10937252640724182,0.4466831088066101,0.0372750423848629,0.09932425618171692,0.4466831088066101,0.03906894475221634,0.3850385546684265,0.20397022366523743,1.862645149230957e-08,0.2421814203262329,0.20397022366523743,1.862645149230957e-08,0.10100787878036499,0.20397022366523743,1.862645149230957e-08,0.2421814203262329,0.20397022366523743,0.030000001192092896,0.3850385546684265,0.20397022366523743,0.030000001192092896,0.10100787878036499,0.20397022366523743,0.030000001192092896,0.09932425618171692,0.1554308533668518,0.030000001192092896,0.2421814203262329,0.1554308533668518,0.030000001192092896,0.3850385546684265,0.1554308533668518,0.030000001192092896,0.9006757736206055,0.0,2.9802322387695312e-08,0.7578185796737671,0.0,2.9802322387695312e-08,0.6149614453315735,0.0,2.9802322387695312e-08,0.9006757736206055,1.0,-2.9802322387695312e-08,0.7578185796737671,1.0,-2.9802322387695312e-08,0.6149614453315735,1.0,-2.9802322387695312e-08,0.6149614453315735,0.1554308533668518,2.1420419216156006e-08,0.6149614453315735,0.2857142984867096,1.277242400732348e-08,0.6149614453315735,0.855372428894043,-8.514949634275126e-09,0.7578185796737671,0.1554308533668518,2.1420419216156006e-08,0.7578185796737671,0.2857142984867096,1.277242400732348e-08,0.7578185796737671,0.8571428060531616,-2.1287373641598606e-08,0.9006757736206055,0.1554308533668518,2.1420419216156006e-08,0.9006757736206055,0.2857142984867096,1.277242400732348e-08,0.9006757736206055,0.855372428894043,-8.514949634275126e-09,0.6149614453315735,0.2857142984867096,-0.037611223757267,0.6149614453315735,0.855372428894043,-0.03761124610900879,0.7578185796737671,0.2857142984867096,-0.037611223757267,0.7578185796737671,0.855372428894043,-0.03761124610900879,0.9006757736206055,0.2857142984867096,-0.037611223757267,0.9006757736206055,0.855372428894043,-0.03761124610900879,0.6149614453315735,0.23993588984012604,1.5501029793085763e-08,0.7578185796737671,0.23993588984012604,1.5501029793085763e-08,0.8973084688186646,0.23993588984012604,1.5501029793085763e-08,0.6149614453315735,0.2857142984867096,0.056812629103660583,0.7578185796737671,0.2857142984867096,0.056812629103660583,0.9006757736206055,0.2857142984867096,0.056812629103660583,0.6149614453315735,0.23993588984012604,0.05681263282895088,0.7578185796737671,0.23993588984012604,0.05681263282895088,0.9006757736206055,0.23993588984012604,0.05681263282895088,0.6149614453315735,0.2857142984867096,0.08102740347385406,0.7578185796737671,0.2857142984867096,0.08102740347385406,0.9006757736206055,0.2857142984867096,0.08102740347385406,0.6149614453315735,0.23993588984012604,0.08102740347385406,0.7578185796737671,0.23993588984012604,0.08102740347385406,0.9006757736206055,0.23993588984012604,0.08102740347385406,0.7290470004081726,0.2857142984867096,0.056812629103660583,0.696262776851654,0.2857142984867096,0.056812629103660583,0.6605485081672668,0.2857142984867096,0.056812629103660583,0.8516380786895752,0.2857142984867096,0.056812629103660583,0.8180962800979614,0.2857142984867096,0.056812629103660583,0.7871918678283691,0.2857142984867096,0.056812629103660583,0.7290470004081726,0.2857142984867096,0.08102740347385406,0.696262776851654,0.2857142984867096,0.08102740347385406,0.6605485081672668,0.2857142984867096,0.08102740347385406,0.8516380786895752,0.2857142984867096,0.08102740347385406,0.8180962800979614,0.2857142984867096,0.08102740347385406,0.7871918678283691,0.2857142984867096,0.08102740347385406,0.6149614453315735,0.2857142984867096,0.06286632269620895,0.6149614453315735,0.2857142984867096,0.0749737098813057,0.7578185796737671,0.2857142984867096,0.0749737098813057,0.7725367546081543,0.2857142984867096,0.0749737098813057,0.7578185796737671,0.2857142984867096,0.06286632269620895,0.9006757736206055,0.2857142984867096,0.06286632269620895,0.9006757736206055,0.2857142984867096,0.0749737098813057,0.6438289880752563,0.2857142984867096,0.056812629103660583,0.7290470004081726,0.2857142984867096,0.06286632269620895,0.7290470004081726,0.2857142984867096,0.0749737098813057,0.7725367546081543,0.2857142984867096,0.06286632269620895,0.696262776851654,0.2857142984867096,0.06286632269620895,0.696262776851654,0.2857142984867096,0.0749737098813057,0.8049919605255127,0.2857142984867096,0.0749737098813057,0.6605485081672668,0.2857142984867096,0.06286632269620895,0.6605485081672668,0.2857142984867096,0.0749737098813057,0.8516380786895752,0.2857142984867096,0.06286632269620895,0.8516380786895752,0.2857142984867096,0.0749737098813057,0.6438289880752563,0.2857142984867096,0.08102740347385406,0.8180962800979614,0.2857142984867096,0.06286632269620895,0.8180962800979614,0.2857142984867096,0.0749737098813057,0.6438289880752563,0.2857142984867096,0.06286632269620895,0.7871918678283691,0.2857142984867096,0.06286632269620895,0.7871918678283691,0.2857142984867096,0.0749737098813057,0.6438289880752563,0.2857142984867096,0.0749737098813057,0.8049919605255127,0.2857142984867096,0.06286632269620895,0.7438737154006958,0.2857142984867096,0.0749737098813057,0.7438737154006958,0.2857142984867096,0.06286632269620895,0.7438737154006958,0.2857142984867096,0.08102740347385406,0.8372387886047363,0.2857142984867096,0.08102740347385406,0.8372387886047363,0.2857142984867096,0.06286632269620895,0.7154313921928406,0.2857142984867096,0.056812629103660583,0.7154313921928406,0.2857142984867096,0.08102740347385406,0.7154313921928406,0.2857142984867096,0.06286632269620895,0.7154313921928406,0.2857142984867096,0.0749737098813057,0.8372387886047363,0.2857142984867096,0.0749737098813057,0.8372387886047363,0.2857142984867096,0.056812629103660583,0.7438737154006958,0.2857142984867096,0.056812629103660583,0.6821985244750977,0.2857142984867096,0.0749737098813057,0.6821985244750977,0.2857142984867096,0.06286632269620895,0.6821985244750977,0.2857142984867096,0.08102740347385406,0.6821985244750977,0.2857142984867096,0.056812629103660583,0.8049919605255127,0.2857142984867096,0.056812629103660583,0.8049919605255127,0.2857142984867096,0.08102740347385406,0.7725367546081543,0.2857142984867096,0.056812629103660583,0.7725367546081543,0.2857142984867096,0.08102740347385406,0.8669073581695557,0.2857142984867096,0.0749737098813057,0.8669073581695557,0.2857142984867096,0.06286632269620895,0.8669073581695557,0.2857142984867096,0.08102740347385406,0.8669073581695557,0.2857142984867096,0.056812629103660583,0.6283566355705261,0.2857142984867096,0.0749737098813057,0.6283566355705261,0.2857142984867096,0.06286632269620895,0.6283566355705261,0.2857142984867096,0.08102740347385406,0.6283566355705261,0.2857142984867096,0.056812629103660583,0.8767900466918945,0.2857142984867096,0.056812629103660583,0.8767900466918945,0.2857142984867096,0.08102740347385406,0.8767900466918945,0.2857142984867096,0.06286632269620895,0.8767900466918945,0.2857142984867096,0.0749737098813057,0.7438737154006958,0.4466831088066101,0.06286632269620895,0.8372387886047363,0.4466831088066101,0.06286632269620895,0.7154313921928406,0.4466831088066101,0.06286632269620895,0.7154313921928406,0.4466831088066101,0.0749737098813057,0.6149614453315735,0.4466831088066101,0.06286632269620895,0.6149614453315735,0.4466831088066101,0.0749737098813057,0.7578185796737671,0.4466831088066101,0.0749737098813057,0.7725367546081543,0.4466831088066101,0.0749737098813057,0.7578185796737671,0.4466831088066101,0.06286632269620895,0.9006757736206055,0.4466831088066101,0.06286632269620895,0.9006757736206055,0.4466831088066101,0.0749737098813057,0.7290470004081726,0.4466831088066101,0.06286632269620895,0.8909494876861572,0.2857142984867096,0.0749737098813057,0.8909494876861572,0.2857142984867096,0.06286632269620895,0.8909494876861572,0.2857142984867096,0.08102740347385406,0.8909494876861572,0.2857142984867096,0.056812629103660583,0.6149614453315735,0.4466831088066101,0.037555888295173645,0.6288098692893982,0.4466831088066101,0.03819965198636055,0.6149614453315735,0.4466831088066101,0.0185551717877388,0.6292741298675537,0.4466831088066101,0.019134750589728355,0.8909494876861572,0.4466831088066101,0.0749737098813057,0.8909494876861572,0.4466831088066101,0.06286632269620895,0.6149614453315735,0.31848421692848206,0.06286632269620895,0.6297401189804077,0.2857142984867096,1.277242400732348e-08,0.8372387886047363,0.4466831088066101,0.0749737098813057,0.6821985244750977,0.4466831088066101,0.0749737098813057,0.6821985244750977,0.4466831088066101,0.06286632269620895,0.8669073581695557,0.4466831088066101,0.0749737098813057,0.6605485081672668,0.4466831088066101,0.0749737098813057,0.8516380786895752,0.4466831088066101,0.06286632269620895,0.8516380786895752,0.4466831088066101,0.0749737098813057,0.8180962800979614,0.4466831088066101,0.06286632269620895,0.8180962800979614,0.4466831088066101,0.0749737098813057,0.6438289880752563,0.4466831088066101,0.06286632269620895,0.7871918678283691,0.4466831088066101,0.06286632269620895,0.8669073581695557,0.4466831088066101,0.06286632269620895,0.6283566355705261,0.4466831088066101,0.0749737098813057,0.6283566355705261,0.4466831088066101,0.06286632269620895,0.8767900466918945,0.4466831088066101,0.06286632269620895,0.8767900466918945,0.4466831088066101,0.0749737098813057,0.6149614453315735,0.2857142984867096,0.037555888295173645,0.6288098692893982,0.2857142984867096,0.03819965198636055,0.6149614453315735,0.2857142984867096,0.0185551717877388,0.6292741298675537,0.2857142984867096,0.019134750589728355,0.7871918678283691,0.4466831088066101,0.0749737098813057,0.6438289880752563,0.4466831088066101,0.0749737098813057,0.8049919605255127,0.4466831088066101,0.06286632269620895,0.7438737154006958,0.4466831088066101,0.0749737098813057,0.6605485081672668,0.4466831088066101,0.06286632269620895,0.8049919605255127,0.4466831088066101,0.0749737098813057,0.696262776851654,0.4466831088066101,0.0749737098813057,0.696262776851654,0.4466831088066101,0.06286632269620895,0.7725367546081543,0.4466831088066101,0.06286632269620895,0.7290470004081726,0.4466831088066101,0.0749737098813057,0.8900130987167358,0.2857142984867096,1.277242400732348e-08,0.9006757736206055,0.2857142984867096,0.023136256262660027,0.8903791308403015,0.2857142984867096,0.022208839654922485,0.8906275033950806,0.2857142984867096,0.0372750423848629,0.9006757736206055,0.2857142984867096,0.03906894475221634,0.9006757736206055,0.4466831088066101,0.023136256262660027,0.8903791308403015,0.4466831088066101,0.022208839654922485,0.8906275033950806,0.4466831088066101,0.0372750423848629,0.9006757736206055,0.4466831088066101,0.03906894475221634,0.9999999403953552,0.0,2.9802322387695312e-08,0.9999999403953552,1.0,-2.9802322387695312e-08,0.9999999403953552,0.1554308533668518,2.1420419216156006e-08,0.9999999403953552,0.2857142984867096,1.30385160446167e-08,0.9999999403953552,0.855372428894043,-8.381903171539307e-09,0.9999999403953552,0.23993587493896484,1.5832483768463135e-08,0.5,0.0,2.9802322387695312e-08,0.5,1.0,-2.9802322387695312e-08,0.09932425618171692,0.0,2.9802322387695312e-08,0.2421814203262329,0.0,2.9802322387695312e-08,0.3850385546684265,0.0,2.9802322387695312e-08,0.09932425618171692,1.0,-2.9802322387695312e-08,0.2421814203262329,1.0,-2.9802322387695312e-08,0.3850385546684265,1.0,-2.9802322387695312e-08,0.5,0.8553725481033325,-8.514950522453546e-09,0.5,0.2857142984867096,1.277242400732348e-08,0.5,0.1554308533668518,2.1420419216156006e-08,0.3850385546684265,0.1554308533668518,2.1420419216156006e-08,0.2421814203262329,0.1554308533668518,2.1420419216156006e-08,0.09932425618171692,0.1554308533668518,2.1420419216156006e-08,0.5,0.23993588984012604,1.5501029793085763e-08,0.0,0.0,2.9802322387695312e-08,0.0,1.0,-2.9802322387695312e-08,0.0,0.1554308533668518,2.1420419216156006e-08,0.0,0.2857142984867096,1.277242400732348e-08,0.0,0.855372428894043,-8.514949634275126e-09,0.0016835927963256836,0.23993588984012604,1.5501029793085763e-08,0.6149614453315735,0.20397022366523743,1.862645149230957e-08,0.7578185796737671,0.20397022366523743,1.862645149230957e-08,0.898992121219635,0.20397022366523743,1.862645149230957e-08,0.5,0.20397022366523743,1.862645149230957e-08,0.9999999403953552,0.20397022366523743,1.862645149230957e-08,0.3850385546684265,0.20397022366523743,1.862645149230957e-08,0.10100787878036499,0.20397022366523743,1.862645149230957e-08,0.0008417963981628418,0.20397022366523743,1.862645149230957e-08,0.3850385546684265,0.20397022366523743,0.030000001192092896,0.9999999403953552,0.20397022366523743,0.030000001192092896,0.5,0.20397022366523743,0.030000001192092896,0.0008417963981628418,0.20397022366523743,0.030000001192092896,0.10100787878036499,0.20397022366523743,0.030000001192092896,0.898992121219635,0.20397022366523743,0.030000001192092896,0.7578185796737671,0.20397022366523743,0.030000001192092896,0.6149614453315735,0.20397022366523743,0.030000001192092896,0.0,0.1554308533668518,0.030000001192092896,0.09932425618171692,0.1554308533668518,0.030000001192092896,0.3850385546684265,0.1554308533668518,0.030000001192092896,0.5,0.1554308533668518,0.030000001192092896,0.9999999403953552,0.1554308533668518,0.030000001192092896,0.9006757736206055,0.1554308533668518,0.030000001192092896,0.7578185796737671,0.1554308533668518,0.030000001192092896,0.6149614453315735,0.1554308533668518,0.030000001192092896,0.2421814203262329,0.8571428060531616,-2.1287373641598606e-08,0.3850385546684265,0.855372428894043,-8.514949634275126e-09,0.3850385546684265,0.855372428894043,-8.514949634275126e-09,0.3850385546684265,0.2857142984867096,1.277242400732348e-08,0.3850385546684265,0.2857142984867096,1.277242400732348e-08,0.3850385546684265,0.2857142984867096,1.277242400732348e-08,0.09932425618171692,0.855372428894043,-0.03761124610900879,0.09932425618171692,0.855372428894043,-0.03761124610900879,0.09932425618171692,0.855372428894043,-8.514949634275126e-09,0.09932425618171692,0.855372428894043,-8.514949634275126e-09,0.09932425618171692,0.2857142984867096,1.277242400732348e-08,0.09932425618171692,0.2857142984867096,1.277242400732348e-08,0.09932425618171692,0.2857142984867096,1.277242400732348e-08,0.3850385546684265,0.855372428894043,-0.03761124610900879,0.3850385546684265,0.855372428894043,-0.03761124610900879,0.3850385546684265,0.2857142984867096,-0.037611223757267,0.3850385546684265,0.2857142984867096,-0.037611223757267,0.09932425618171692,0.2857142984867096,-0.037611223757267,0.09932425618171692,0.2857142984867096,-0.037611223757267,0.2421814203262329,0.2857142984867096,-0.037611223757267,0.2421814203262329,0.855372428894043,-0.03761124610900879,0.3850385546684265,0.23993588984012604,1.5501029793085763e-08,0.3850385546684265,0.23993588984012604,1.5501029793085763e-08,0.3850385546684265,0.23993588984012604,1.5501029793085763e-08,0.09932425618171692,0.23993588984012604,0.05681263282895088,0.10269150137901306,0.23993588984012604,1.5501029793085763e-08,0.10269150137901306,0.23993588984012604,1.5501029793085763e-08,0.10269150137901306,0.23993588984012604,1.5501029793085763e-08,0.09932425618171692,0.2857142984867096,0.03906894475221634,0.09932425618171692,0.2857142984867096,0.03906894475221634,0.09932425618171692,0.2857142984867096,0.056812629103660583,0.2421814203262329,0.23993588984012604,1.5501029793085763e-08,0.3850385546684265,0.23993588984012604,0.08102740347385406,0.3850385546684265,0.23993588984012604,0.08102740347385406,0.3850385546684265,0.23993588984012604,0.05681263282895088,0.3850385546684265,0.2857142984867096,0.037555888295173645,0.3850385546684265,0.2857142984867096,0.037555888295173645,0.3850385546684265,0.2857142984867096,0.056812629103660583,0.3716433644294739,0.2857142984867096,0.08102740347385406,0.3850385546684265,0.2857142984867096,0.08102740347385406,0.3850385546684265,0.2857142984867096,0.08102740347385406,0.2274632751941681,0.2857142984867096,0.08102740347385406,0.2421814203262329,0.2857142984867096,0.08102740347385406,0.09932425618171692,0.23993588984012604,0.08102740347385406,0.09932425618171692,0.23993588984012604,0.08102740347385406,0.09932425618171692,0.2857142984867096,0.08102740347385406,0.09932425618171692,0.2857142984867096,0.08102740347385406,0.2421814203262329,0.23993588984012604,0.08102740347385406,0.3716433644294739,0.2857142984867096,0.06286632269620895,0.3716433644294739,0.2857142984867096,0.06286632269620895,0.3850385546684265,0.2857142984867096,0.06286632269620895,0.3850385546684265,0.2857142984867096,0.06286632269620895,0.2561263144016266,0.2857142984867096,0.08102740347385406,0.2845686078071594,0.2857142984867096,0.08102740347385406,0.2709529995918274,0.2857142984867096,0.08102740347385406,0.31780147552490234,0.2857142984867096,0.08102740347385406,0.30373722314834595,0.2857142984867096,0.08102740347385406,0.10905048251152039,0.2857142984867096,0.08102740347385406,0.16276124119758606,0.2857142984867096,0.08102740347385406,0.1483619511127472,0.2857142984867096,0.08102740347385406,0.19500800967216492,0.2857142984867096,0.08102740347385406,0.1819036900997162,0.2857142984867096,0.08102740347385406,0.09932425618171692,0.2857142984867096,0.06286632269620895,0.09932425618171692,0.2857142984867096,0.06286632269620895,0.35617098212242126,0.2857142984867096,0.08102740347385406,0.33945149183273315,0.2857142984867096,0.08102740347385406,0.2709529995918274,0.2857142984867096,0.0749737098813057,0.2709529995918274,0.2857142984867096,0.0749737098813057,0.2709529995918274,0.2857142984867096,0.06286632269620895,0.2709529995918274,0.2857142984867096,0.06286632269620895,0.30373722314834595,0.2857142984867096,0.0749737098813057,0.30373722314834595,0.2857142984867096,0.0749737098813057,0.30373722314834595,0.2857142984867096,0.06286632269620895,0.30373722314834595,0.2857142984867096,0.06286632269620895,0.33945149183273315,0.2857142984867096,0.0749737098813057,0.33945149183273315,0.2857142984867096,0.0749737098813057,0.33945149183273315,0.2857142984867096,0.06286632269620895,0.33945149183273315,0.2857142984867096,0.06286632269620895,0.2561263144016266,0.2857142984867096,0.06286632269620895,0.2561263144016266,0.2857142984867096,0.06286632269620895,0.2421814203262329,0.2857142984867096,0.06286632269620895,0.2421814203262329,0.2857142984867096,0.06286632269620895,0.2274632751941681,0.2857142984867096,0.0749737098813057,0.2274632751941681,0.2857142984867096,0.0749737098813057,0.21280810236930847,0.2857142984867096,0.0749737098813057,0.21280810236930847,0.2857142984867096,0.0749737098813057,0.2845686078071594,0.2857142984867096,0.06286632269620895,0.2845686078071594,0.2857142984867096,0.06286632269620895,0.2845686078071594,0.2857142984867096,0.0749737098813057,0.2845686078071594,0.2857142984867096,0.0749737098813057,0.2561263144016266,0.2857142984867096,0.0749737098813057,0.2561263144016266,0.2857142984867096,0.0749737098813057,0.2421814203262329,0.2857142984867096,0.0749737098813057,0.2421814203262329,0.2857142984867096,0.0749737098813057,0.31780147552490234,0.2857142984867096,0.06286632269620895,0.31780147552490234,0.2857142984867096,0.06286632269620895,0.31780147552490234,0.2857142984867096,0.0749737098813057,0.31780147552490234,0.2857142984867096,0.0749737098813057,0.35617098212242126,0.2857142984867096,0.06286632269620895,0.35617098212242126,0.2857142984867096,0.06286632269620895,0.35617098212242126,0.2857142984867096,0.0749737098813057,0.35617098212242126,0.2857142984867096,0.0749737098813057,0.1483619511127472,0.2857142984867096,0.0749737098813057,0.1483619511127472,0.2857142984867096,0.0749737098813057,0.1483619511127472,0.2857142984867096,0.06286632269620895,0.1483619511127472,0.2857142984867096,0.06286632269620895,0.1819036900997162,0.2857142984867096,0.0749737098813057,0.1819036900997162,0.2857142984867096,0.0749737098813057,0.1819036900997162,0.2857142984867096,0.06286632269620895,0.1819036900997162,0.2857142984867096,0.06286632269620895,0.21280810236930847,0.2857142984867096,0.06286632269620895,0.21280810236930847,0.2857142984867096,0.06286632269620895,0.10905048251152039,0.2857142984867096,0.06286632269620895,0.10905048251152039,0.2857142984867096,0.06286632269620895,0.10905048251152039,0.2857142984867096,0.0749737098813057,0.10905048251152039,0.2857142984867096,0.0749737098813057,0.09932425618171692,0.2857142984867096,0.0749737098813057,0.09932425618171692,0.2857142984867096,0.0749737098813057,0.3716433644294739,0.2857142984867096,0.0749737098813057,0.3716433644294739,0.2857142984867096,0.0749737098813057,0.3850385546684265,0.2857142984867096,0.0749737098813057,0.3850385546684265,0.2857142984867096,0.0749737098813057,0.16276124119758606,0.2857142984867096,0.06286632269620895,0.16276124119758606,0.2857142984867096,0.06286632269620895,0.16276124119758606,0.2857142984867096,0.0749737098813057,0.16276124119758606,0.2857142984867096,0.0749737098813057,0.19500800967216492,0.2857142984867096,0.06286632269620895,0.19500800967216492,0.2857142984867096,0.06286632269620895,0.19500800967216492,0.2857142984867096,0.0749737098813057,0.19500800967216492,0.2857142984867096,0.0749737098813057,0.2274632751941681,0.2857142984867096,0.06286632269620895,0.2274632751941681,0.2857142984867096,0.06286632269620895,0.21280810236930847,0.2857142984867096,0.08102740347385406,0.13309261202812195,0.2857142984867096,0.06286632269620895,0.13309261202812195,0.2857142984867096,0.06286632269620895,0.13309261202812195,0.2857142984867096,0.0749737098813057,0.13309261202812195,0.2857142984867096,0.0749737098813057,0.13309261202812195,0.2857142984867096,0.08102740347385406,0.12320995330810547,0.2857142984867096,0.08102740347385406,0.12320995330810547,0.2857142984867096,0.06286632269620895,0.12320995330810547,0.2857142984867096,0.06286632269620895,0.12320995330810547,0.2857142984867096,0.0749737098813057,0.12320995330810547,0.2857142984867096,0.0749737098813057,0.31780147552490234,0.4466831088066101,0.06286632269620895,0.31780147552490234,0.4466831088066101,0.06286632269620895,0.31780147552490234,0.4466831088066101,0.0749737098813057,0.31780147552490234,0.4466831088066101,0.0749737098813057,0.3716433644294739,0.4466831088066101,0.06286632269620895,0.3716433644294739,0.4466831088066101,0.06286632269620895,0.3850385546684265,0.4466831088066101,0.06286632269620895,0.3850385546684265,0.4466831088066101,0.06286632269620895,0.3850385546684265,0.4466831088066101,0.0749737098813057,0.3850385546684265,0.4466831088066101,0.0749737098813057,0.09932425618171692,0.4466831088066101,0.0749737098813057,0.09932425618171692,0.4466831088066101,0.0749737098813057,0.09932425618171692,0.4466831088066101,0.06286632269620895,0.09932425618171692,0.4466831088066101,0.06286632269620895,0.2709529995918274,0.4466831088066101,0.0749737098813057,0.2709529995918274,0.4466831088066101,0.0749737098813057,0.2709529995918274,0.4466831088066101,0.06286632269620895,0.2709529995918274,0.4466831088066101,0.06286632269620895,0.30373722314834595,0.4466831088066101,0.0749737098813057,0.30373722314834595,0.4466831088066101,0.0749737098813057,0.30373722314834595,0.4466831088066101,0.06286632269620895,0.30373722314834595,0.4466831088066101,0.06286632269620895,0.33945149183273315,0.4466831088066101,0.0749737098813057,0.33945149183273315,0.4466831088066101,0.0749737098813057,0.33945149183273315,0.4466831088066101,0.06286632269620895,0.33945149183273315,0.4466831088066101,0.06286632269620895,0.2274632751941681,0.4466831088066101,0.0749737098813057,0.2274632751941681,0.4466831088066101,0.0749737098813057,0.21280810236930847,0.4466831088066101,0.0749737098813057,0.21280810236930847,0.4466831088066101,0.0749737098813057,0.2561263144016266,0.4466831088066101,0.06286632269620895,0.2561263144016266,0.4466831088066101,0.06286632269620895,0.2421814203262329,0.4466831088066101,0.06286632269620895,0.2421814203262329,0.4466831088066101,0.06286632269620895,0.2845686078071594,0.4466831088066101,0.06286632269620895,0.2845686078071594,0.4466831088066101,0.06286632269620895,0.3716433644294739,0.4466831088066101,0.0749737098813057,0.3716433644294739,0.4466831088066101,0.0749737098813057,0.16276124119758606,0.4466831088066101,0.06286632269620895,0.16276124119758606,0.4466831088066101,0.06286632269620895,0.1483619511127472,0.4466831088066101,0.06286632269620895,0.1483619511127472,0.4466831088066101,0.06286632269620895,0.16276124119758606,0.4466831088066101,0.0749737098813057,0.16276124119758606,0.4466831088066101,0.0749737098813057,0.1483619511127472,0.4466831088066101,0.0749737098813057,0.1483619511127472,0.4466831088066101,0.0749737098813057,0.19500800967216492,0.4466831088066101,0.06286632269620895,0.19500800967216492,0.4466831088066101,0.06286632269620895,0.1819036900997162,0.4466831088066101,0.06286632269620895,0.1819036900997162,0.4466831088066101,0.06286632269620895,0.2274632751941681,0.4466831088066101,0.06286632269620895,0.2274632751941681,0.4466831088066101,0.06286632269620895,0.19500800967216492,0.4466831088066101,0.0749737098813057,0.19500800967216492,0.4466831088066101,0.0749737098813057,0.1819036900997162,0.4466831088066101,0.0749737098813057,0.1819036900997162,0.4466831088066101,0.0749737098813057,0.21280810236930847,0.4466831088066101,0.06286632269620895,0.21280810236930847,0.4466831088066101,0.06286632269620895,0.2421814203262329,0.4466831088066101,0.0749737098813057,0.2421814203262329,0.4466831088066101,0.0749737098813057,0.10905048251152039,0.4466831088066101,0.0749737098813057,0.10905048251152039,0.4466831088066101,0.0749737098813057,0.13309261202812195,0.4466831088066101,0.06286632269620895,0.13309261202812195,0.4466831088066101,0.06286632269620895,0.13309261202812195,0.4466831088066101,0.0749737098813057,0.13309261202812195,0.4466831088066101,0.0749737098813057,0.12320995330810547,0.4466831088066101,0.06286632269620895,0.12320995330810547,0.4466831088066101,0.06286632269620895,0.12320995330810547,0.4466831088066101,0.0749737098813057,0.12320995330810547,0.4466831088066101,0.0749737098813057,0.10905048251152039,0.4466831088066101,0.06286632269620895,0.10905048251152039,0.4466831088066101,0.06286632269620895,0.2845686078071594,0.4466831088066101,0.0749737098813057,0.2845686078071594,0.4466831088066101,0.0749737098813057,0.2561263144016266,0.4466831088066101,0.0749737098813057,0.2561263144016266,0.4466831088066101,0.0749737098813057,0.35617098212242126,0.4466831088066101,0.06286632269620895,0.35617098212242126,0.4466831088066101,0.06286632269620895,0.35617098212242126,0.4466831088066101,0.0749737098813057,0.35617098212242126,0.4466831088066101,0.0749737098813057,0.3850385546684265,0.31848421692848206,0.06286632269620895,0.3850385546684265,0.2857142984867096,0.0185551717877388,0.3850385546684265,0.2857142984867096,0.0185551717877388,0.3711901307106018,0.2857142984867096,0.03819965198636055,0.3711901307106018,0.2857142984867096,0.03819965198636055,0.3707258701324463,0.2857142984867096,0.019134750589728355,0.3707258701324463,0.2857142984867096,0.019134750589728355,0.3711901307106018,0.4466831088066101,0.03819965198636055,0.3711901307106018,0.4466831088066101,0.03819965198636055,0.3850385546684265,0.4466831088066101,0.037555888295173645,0.3850385546684265,0.4466831088066101,0.037555888295173645,0.3850385546684265,0.4466831088066101,0.0185551717877388,0.3850385546684265,0.4466831088066101,0.0185551717877388,0.3707258701324463,0.4466831088066101,0.019134750589728355,0.3707258701324463,0.4466831088066101,0.019134750589728355,0.09932425618171692,0.2857142984867096,0.023136256262660027,0.09932425618171692,0.2857142984867096,0.023136256262660027,0.10962086915969849,0.2857142984867096,0.022208839654922485,0.10962086915969849,0.2857142984867096,0.022208839654922485,0.10937252640724182,0.2857142984867096,0.0372750423848629,0.10937252640724182,0.2857142984867096,0.0372750423848629,0.10962086915969849,0.4466831088066101,0.022208839654922485,0.10962086915969849,0.4466831088066101,0.022208839654922485,0.09932425618171692,0.4466831088066101,0.023136256262660027,0.09932425618171692,0.4466831088066101,0.023136256262660027,0.10937252640724182,0.4466831088066101,0.0372750423848629,0.10937252640724182,0.4466831088066101,0.0372750423848629,0.09932425618171692,0.4466831088066101,0.03906894475221634,0.09932425618171692,0.4466831088066101,0.03906894475221634,0.3850385546684265,0.20397022366523743,1.862645149230957e-08,0.2421814203262329,0.20397022366523743,1.862645149230957e-08,0.10100787878036499,0.20397022366523743,1.862645149230957e-08,0.09932425618171692,0.1554308533668518,0.030000001192092896,0.2421814203262329,0.1554308533668518,0.030000001192092896,0.3850385546684265,0.1554308533668518,0.030000001192092896,0.2421814203262329,0.20397022366523743,0.030000001192092896,0.10100787878036499,0.20397022366523743,0.030000001192092896,0.3850385546684265,0.20397022366523743,0.030000001192092896,0.7578185796737671,0.8571428060531616,-2.1287373641598606e-08,0.6149614453315735,0.855372428894043,-8.514949634275126e-09,0.6149614453315735,0.855372428894043,-8.514949634275126e-09,0.6149614453315735,0.2857142984867096,1.277242400732348e-08,0.6149614453315735,0.2857142984867096,1.277242400732348e-08,0.6149614453315735,0.2857142984867096,1.277242400732348e-08,0.9006757736206055,0.855372428894043,-0.03761124610900879,0.9006757736206055,0.855372428894043,-0.03761124610900879,0.9006757736206055,0.855372428894043,-8.514949634275126e-09,0.9006757736206055,0.855372428894043,-8.514949634275126e-09,0.9006757736206055,0.2857142984867096,1.277242400732348e-08,0.9006757736206055,0.2857142984867096,1.277242400732348e-08,0.9006757736206055,0.2857142984867096,1.277242400732348e-08,0.6149614453315735,0.1554308533668518,2.1420419216156006e-08,0.5,0.1554308533668518,2.1420419216156006e-08,0.7578185796737671,0.1554308533668518,2.1420419216156006e-08,0.6149614453315735,0.855372428894043,-0.03761124610900879,0.6149614453315735,0.855372428894043,-0.03761124610900879,0.9006757736206055,0.1554308533668518,2.1420419216156006e-08,0.9999999403953552,0.1554308533668518,2.1420419216156006e-08,0.6149614453315735,0.2857142984867096,-0.037611223757267,0.6149614453315735,0.2857142984867096,-0.037611223757267,0.9006757736206055,0.2857142984867096,-0.037611223757267,0.9006757736206055,0.2857142984867096,-0.037611223757267,0.7578185796737671,0.2857142984867096,-0.037611223757267,0.7578185796737671,0.855372428894043,-0.03761124610900879,0.6149614453315735,0.23993588984012604,1.5501029793085763e-08,0.6149614453315735,0.23993588984012604,1.5501029793085763e-08,0.9006757736206055,0.23993588984012604,0.05681263282895088,0.8973084688186646,0.23993588984012604,1.5501029793085763e-08,0.8973084688186646,0.23993588984012604,1.5501029793085763e-08,0.9006757736206055,0.2857142984867096,0.03906894475221634,0.9006757736206055,0.2857142984867096,0.03906894475221634,0.9006757736206055,0.2857142984867096,0.056812629103660583,0.7578185796737671,0.23993588984012604,1.5501029793085763e-08,0.6149614453315735,0.23993588984012604,0.08102740347385406,0.6149614453315735,0.23993588984012604,0.08102740347385406,0.6149614453315735,0.23993588984012604,0.05681263282895088,0.6149614453315735,0.2857142984867096,0.037555888295173645,0.6149614453315735,0.2857142984867096,0.037555888295173645,0.6149614453315735,0.2857142984867096,0.056812629103660583,0.6283566355705261,0.2857142984867096,0.08102740347385406,0.6149614453315735,0.2857142984867096,0.08102740347385406,0.6149614453315735,0.2857142984867096,0.08102740347385406,0.7725367546081543,0.2857142984867096,0.08102740347385406,0.7578185796737671,0.2857142984867096,0.08102740347385406,0.9006757736206055,0.23993588984012604,0.08102740347385406,0.9006757736206055,0.23993588984012604,0.08102740347385406,0.9006757736206055,0.2857142984867096,0.08102740347385406,0.9006757736206055,0.2857142984867096,0.08102740347385406,0.7578185796737671,0.23993588984012604,0.08102740347385406,0.6283566355705261,0.2857142984867096,0.06286632269620895,0.6283566355705261,0.2857142984867096,0.06286632269620895,0.6149614453315735,0.2857142984867096,0.06286632269620895,0.6149614453315735,0.2857142984867096,0.06286632269620895,0.7438737154006958,0.2857142984867096,0.08102740347385406,0.7154313921928406,0.2857142984867096,0.08102740347385406,0.7290470004081726,0.2857142984867096,0.08102740347385406,0.6821985244750977,0.2857142984867096,0.08102740347385406,0.696262776851654,0.2857142984867096,0.08102740347385406,0.8909494876861572,0.2857142984867096,0.08102740347385406,0.8372387886047363,0.2857142984867096,0.08102740347385406,0.8516380786895752,0.2857142984867096,0.08102740347385406,0.8049919605255127,0.2857142984867096,0.08102740347385406,0.8180962800979614,0.2857142984867096,0.08102740347385406,0.9006757736206055,0.2857142984867096,0.06286632269620895,0.9006757736206055,0.2857142984867096,0.06286632269620895,0.6438289880752563,0.2857142984867096,0.08102740347385406,0.6605485081672668,0.2857142984867096,0.08102740347385406,0.7290470004081726,0.2857142984867096,0.0749737098813057,0.7290470004081726,0.2857142984867096,0.0749737098813057,0.7290470004081726,0.2857142984867096,0.06286632269620895,0.7290470004081726,0.2857142984867096,0.06286632269620895,0.696262776851654,0.2857142984867096,0.0749737098813057,0.696262776851654,0.2857142984867096,0.0749737098813057,0.696262776851654,0.2857142984867096,0.06286632269620895,0.696262776851654,0.2857142984867096,0.06286632269620895,0.6605485081672668,0.2857142984867096,0.0749737098813057,0.6605485081672668,0.2857142984867096,0.0749737098813057,0.6605485081672668,0.2857142984867096,0.06286632269620895,0.6605485081672668,0.2857142984867096,0.06286632269620895,0.7438737154006958,0.2857142984867096,0.06286632269620895,0.7438737154006958,0.2857142984867096,0.06286632269620895,0.7578185796737671,0.2857142984867096,0.06286632269620895,0.7578185796737671,0.2857142984867096,0.06286632269620895,0.7725367546081543,0.2857142984867096,0.0749737098813057,0.7725367546081543,0.2857142984867096,0.0749737098813057,0.7871918678283691,0.2857142984867096,0.0749737098813057,0.7871918678283691,0.2857142984867096,0.0749737098813057,0.7154313921928406,0.2857142984867096,0.06286632269620895,0.7154313921928406,0.2857142984867096,0.06286632269620895,0.7154313921928406,0.2857142984867096,0.0749737098813057,0.7154313921928406,0.2857142984867096,0.0749737098813057,0.7438737154006958,0.2857142984867096,0.0749737098813057,0.7438737154006958,0.2857142984867096,0.0749737098813057,0.7578185796737671,0.2857142984867096,0.0749737098813057,0.7578185796737671,0.2857142984867096,0.0749737098813057,0.6821985244750977,0.2857142984867096,0.06286632269620895,0.6821985244750977,0.2857142984867096,0.06286632269620895,0.6821985244750977,0.2857142984867096,0.0749737098813057,0.6821985244750977,0.2857142984867096,0.0749737098813057,0.6438289880752563,0.2857142984867096,0.06286632269620895,0.6438289880752563,0.2857142984867096,0.06286632269620895,0.6438289880752563,0.2857142984867096,0.0749737098813057,0.6438289880752563,0.2857142984867096,0.0749737098813057,0.8516380786895752,0.2857142984867096,0.0749737098813057,0.8516380786895752,0.2857142984867096,0.0749737098813057,0.8516380786895752,0.2857142984867096,0.06286632269620895,0.8516380786895752,0.2857142984867096,0.06286632269620895,0.8180962800979614,0.2857142984867096,0.0749737098813057,0.8180962800979614,0.2857142984867096,0.0749737098813057,0.8180962800979614,0.2857142984867096,0.06286632269620895,0.8180962800979614,0.2857142984867096,0.06286632269620895,0.7871918678283691,0.2857142984867096,0.06286632269620895,0.7871918678283691,0.2857142984867096,0.06286632269620895,0.8909494876861572,0.2857142984867096,0.06286632269620895,0.8909494876861572,0.2857142984867096,0.06286632269620895,0.8909494876861572,0.2857142984867096,0.0749737098813057,0.8909494876861572,0.2857142984867096,0.0749737098813057,0.9006757736206055,0.2857142984867096,0.0749737098813057,0.9006757736206055,0.2857142984867096,0.0749737098813057,0.6283566355705261,0.2857142984867096,0.0749737098813057,0.6283566355705261,0.2857142984867096,0.0749737098813057,0.6149614453315735,0.2857142984867096,0.0749737098813057,0.6149614453315735,0.2857142984867096,0.0749737098813057,0.8372387886047363,0.2857142984867096,0.06286632269620895,0.8372387886047363,0.2857142984867096,0.06286632269620895,0.8372387886047363,0.2857142984867096,0.0749737098813057,0.8372387886047363,0.2857142984867096,0.0749737098813057,0.8049919605255127,0.2857142984867096,0.06286632269620895,0.8049919605255127,0.2857142984867096,0.06286632269620895,0.8049919605255127,0.2857142984867096,0.0749737098813057,0.8049919605255127,0.2857142984867096,0.0749737098813057,0.7725367546081543,0.2857142984867096,0.06286632269620895,0.7725367546081543,0.2857142984867096,0.06286632269620895,0.7871918678283691,0.2857142984867096,0.08102740347385406,0.8669073581695557,0.2857142984867096,0.06286632269620895,0.8669073581695557,0.2857142984867096,0.06286632269620895,0.8669073581695557,0.2857142984867096,0.0749737098813057,0.8669073581695557,0.2857142984867096,0.0749737098813057,0.8669073581695557,0.2857142984867096,0.08102740347385406,0.8767900466918945,0.2857142984867096,0.08102740347385406,0.8767900466918945,0.2857142984867096,0.06286632269620895,0.8767900466918945,0.2857142984867096,0.06286632269620895,0.8767900466918945,0.2857142984867096,0.0749737098813057,0.8767900466918945,0.2857142984867096,0.0749737098813057,0.6821985244750977,0.4466831088066101,0.06286632269620895,0.6821985244750977,0.4466831088066101,0.06286632269620895,0.6821985244750977,0.4466831088066101,0.0749737098813057,0.6821985244750977,0.4466831088066101,0.0749737098813057,0.6283566355705261,0.4466831088066101,0.06286632269620895,0.6283566355705261,0.4466831088066101,0.06286632269620895,0.6149614453315735,0.4466831088066101,0.06286632269620895,0.6149614453315735,0.4466831088066101,0.06286632269620895,0.6149614453315735,0.4466831088066101,0.0749737098813057,0.6149614453315735,0.4466831088066101,0.0749737098813057,0.9006757736206055,0.4466831088066101,0.0749737098813057,0.9006757736206055,0.4466831088066101,0.0749737098813057,0.9006757736206055,0.4466831088066101,0.06286632269620895,0.9006757736206055,0.4466831088066101,0.06286632269620895,0.7290470004081726,0.4466831088066101,0.0749737098813057,0.7290470004081726,0.4466831088066101,0.0749737098813057,0.7290470004081726,0.4466831088066101,0.06286632269620895,0.7290470004081726,0.4466831088066101,0.06286632269620895,0.696262776851654,0.4466831088066101,0.0749737098813057,0.696262776851654,0.4466831088066101,0.0749737098813057,0.696262776851654,0.4466831088066101,0.06286632269620895,0.696262776851654,0.4466831088066101,0.06286632269620895,0.6605485081672668,0.4466831088066101,0.0749737098813057,0.6605485081672668,0.4466831088066101,0.0749737098813057,0.6605485081672668,0.4466831088066101,0.06286632269620895,0.6605485081672668,0.4466831088066101,0.06286632269620895,0.7725367546081543,0.4466831088066101,0.0749737098813057,0.7725367546081543,0.4466831088066101,0.0749737098813057,0.7871918678283691,0.4466831088066101,0.0749737098813057,0.7871918678283691,0.4466831088066101,0.0749737098813057,0.7438737154006958,0.4466831088066101,0.06286632269620895,0.7438737154006958,0.4466831088066101,0.06286632269620895,0.7578185796737671,0.4466831088066101,0.06286632269620895,0.7578185796737671,0.4466831088066101,0.06286632269620895,0.7154313921928406,0.4466831088066101,0.06286632269620895,0.7154313921928406,0.4466831088066101,0.06286632269620895,0.6283566355705261,0.4466831088066101,0.0749737098813057,0.6283566355705261,0.4466831088066101,0.0749737098813057,0.8372387886047363,0.4466831088066101,0.06286632269620895,0.8372387886047363,0.4466831088066101,0.06286632269620895,0.8516380786895752,0.4466831088066101,0.06286632269620895,0.8516380786895752,0.4466831088066101,0.06286632269620895,0.8372387886047363,0.4466831088066101,0.0749737098813057,0.8372387886047363,0.4466831088066101,0.0749737098813057,0.8516380786895752,0.4466831088066101,0.0749737098813057,0.8516380786895752,0.4466831088066101,0.0749737098813057,0.8049919605255127,0.4466831088066101,0.06286632269620895,0.8049919605255127,0.4466831088066101,0.06286632269620895,0.8180962800979614,0.4466831088066101,0.06286632269620895,0.8180962800979614,0.4466831088066101,0.06286632269620895,0.7725367546081543,0.4466831088066101,0.06286632269620895,0.7725367546081543,0.4466831088066101,0.06286632269620895,0.8049919605255127,0.4466831088066101,0.0749737098813057,0.8049919605255127,0.4466831088066101,0.0749737098813057,0.8180962800979614,0.4466831088066101,0.0749737098813057,0.8180962800979614,0.4466831088066101,0.0749737098813057,0.7871918678283691,0.4466831088066101,0.06286632269620895,0.7871918678283691,0.4466831088066101,0.06286632269620895,0.7578185796737671,0.4466831088066101,0.0749737098813057,0.7578185796737671,0.4466831088066101,0.0749737098813057,0.8909494876861572,0.4466831088066101,0.0749737098813057,0.8909494876861572,0.4466831088066101,0.0749737098813057,0.8669073581695557,0.4466831088066101,0.06286632269620895,0.8669073581695557,0.4466831088066101,0.06286632269620895,0.8669073581695557,0.4466831088066101,0.0749737098813057,0.8669073581695557,0.4466831088066101,0.0749737098813057,0.8767900466918945,0.4466831088066101,0.06286632269620895,0.8767900466918945,0.4466831088066101,0.06286632269620895,0.8767900466918945,0.4466831088066101,0.0749737098813057,0.8767900466918945,0.4466831088066101,0.0749737098813057,0.8909494876861572,0.4466831088066101,0.06286632269620895,0.8909494876861572,0.4466831088066101,0.06286632269620895,0.7154313921928406,0.4466831088066101,0.0749737098813057,0.7154313921928406,0.4466831088066101,0.0749737098813057,0.7438737154006958,0.4466831088066101,0.0749737098813057,0.7438737154006958,0.4466831088066101,0.0749737098813057,0.6438289880752563,0.4466831088066101,0.06286632269620895,0.6438289880752563,0.4466831088066101,0.06286632269620895,0.6438289880752563,0.4466831088066101,0.0749737098813057,0.6438289880752563,0.4466831088066101,0.0749737098813057,0.6149614453315735,0.31848421692848206,0.06286632269620895,0.6149614453315735,0.2857142984867096,0.0185551717877388,0.6149614453315735,0.2857142984867096,0.0185551717877388,0.6288098692893982,0.2857142984867096,0.03819965198636055,0.6288098692893982,0.2857142984867096,0.03819965198636055,0.6292741298675537,0.2857142984867096,0.019134750589728355,0.6292741298675537,0.2857142984867096,0.019134750589728355,0.6288098692893982,0.4466831088066101,0.03819965198636055,0.6288098692893982,0.4466831088066101,0.03819965198636055,0.6149614453315735,0.4466831088066101,0.037555888295173645,0.6149614453315735,0.4466831088066101,0.037555888295173645,0.6149614453315735,0.4466831088066101,0.0185551717877388,0.6149614453315735,0.4466831088066101,0.0185551717877388,0.6292741298675537,0.4466831088066101,0.019134750589728355,0.6292741298675537,0.4466831088066101,0.019134750589728355,0.9006757736206055,0.2857142984867096,0.023136256262660027,0.9006757736206055,0.2857142984867096,0.023136256262660027,0.8903791308403015,0.2857142984867096,0.022208839654922485,0.8903791308403015,0.2857142984867096,0.022208839654922485,0.8906275033950806,0.2857142984867096,0.0372750423848629,0.8906275033950806,0.2857142984867096,0.0372750423848629,0.8903791308403015,0.4466831088066101,0.022208839654922485,0.8903791308403015,0.4466831088066101,0.022208839654922485,0.9006757736206055,0.4466831088066101,0.023136256262660027,0.9006757736206055,0.4466831088066101,0.023136256262660027,0.8906275033950806,0.4466831088066101,0.0372750423848629,0.8906275033950806,0.4466831088066101,0.0372750423848629,0.9006757736206055,0.4466831088066101,0.03906894475221634,0.9006757736206055,0.4466831088066101,0.03906894475221634,0.3850385546684265,0.1554308533668518,2.1420419216156006e-08,0.0,0.1554308533668518,2.1420419216156006e-08,0.09932425618171692,0.1554308533668518,2.1420419216156006e-08,0.6149614453315735,0.20397022366523743,1.862645149230957e-08,0.5,0.20397022366523743,1.862645149230957e-08,0.7578185796737671,0.20397022366523743,1.862645149230957e-08,0.898992121219635,0.20397022366523743,1.862645149230957e-08,0.9999999403953552,0.20397022366523743,1.862645149230957e-08,0.3850385546684265,0.20397022366523743,1.862645149230957e-08,0.10100787878036499,0.20397022366523743,1.862645149230957e-08,0.0008417963981628418,0.20397022366523743,1.862645149230957e-08,0.0,0.1554308533668518,0.030000001192092896,0.09932425618171692,0.1554308533668518,0.030000001192092896,0.898992121219635,0.20397022366523743,0.030000001192092896,0.7578185796737671,0.20397022366523743,0.030000001192092896,0.6149614453315735,0.20397022366523743,0.030000001192092896,0.5,0.20397022366523743,0.030000001192092896,0.3850385546684265,0.1554308533668518,0.030000001192092896,0.5,0.1554308533668518,0.030000001192092896,0.9006757736206055,0.1554308533668518,0.030000001192092896,0.7578185796737671,0.1554308533668518,0.030000001192092896,0.6149614453315735,0.1554308533668518,0.030000001192092896,0.9999999403953552,0.1554308533668518,0.030000001192092896,0.10100787878036499,0.20397022366523743,0.030000001192092896,0.0008417963981628418,0.20397022366523743,0.030000001192092896,0.3850385546684265,0.20397022366523743,0.030000001192092896,0.9999999403953552,0.20397022366523743,0.030000001192092896],"normals":[0.0,-1.0,-0.0,-1.0,0.0,-0.0,-0.006164738908410072,-0.99969482421875,0.023499252274632454,0.0,-1.0,-0.0,0.004516739398241043,0.999969482421875,-0.0040894802659749985,0.0,-0.99969482421875,0.023499252274632454,0.0,-1.0,-0.0,1.0,0.0,-0.0,0.006164738908410072,-0.99969482421875,0.023499252274632454,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.006164738908410072,-0.99969482421875,0.023499252274632454,0.9998779296875,-0.00033570360392332077,-0.01461836602538824,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.0020447401329874992,0.999969482421875,-0.00119022186845541,-0.99951171875,-0.02224799245595932,-0.02148503065109253,0.99969482421875,-0.00277718435972929,-0.024231696501374245,0.0,-1.0,-0.0,0.0,-0.999969482421875,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.002136295661330223,0.999969482421875,-0.0016479995101690292,0.002136295661330223,0.999969482421875,-0.0016479995101690292,0.002136295661330223,0.999969482421875,-0.0016479995101690292,0.0019531846046447754,0.999969482421875,-0.0007019257172942162,0.0019531846046447754,0.999969482421875,-0.0007019257172942162,0.0019531846046447754,0.999969482421875,-0.0007019257172942162,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,1.0,-0.0,0.0,1.0,-0.0,0.99957275390625,-0.004547257907688618,-0.028748435899615288,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-0.999969482421875,-0.004211554303765297,-0.006103701889514923,-0.999969482421875,-0.004211554303765297,-0.006103701889514923,0.002136295661330223,0.999969482421875,-0.0016479995101690292,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,1.0,-0.0,0.002136295661330223,0.999969482421875,-0.0016479995101690292,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0019531846046447754,0.999969482421875,-0.0007019257172942162,0.002136295661330223,0.999969482421875,-0.0016479995101690292,0.0,1.0,-0.0,0.0,0.0,-1.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.002136295661330223,0.999969482421875,-0.0016479995101690292,0.0019531846046447754,0.999969482421875,-0.0007019257172942162,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0019531846046447754,0.999969482421875,-0.0007019257172942162,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0019531846046447754,0.999969482421875,-0.0007019257172942162,0.0,1.0,-0.0,0.0,1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.001037629321217537,0.999969482421875,-0.00079348124563694,0.0019531846046447754,0.999969482421875,-0.0007019257172942162,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.99981689453125,-0.0031434064731001854,-0.018616290763020515,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0009460737928748131,0.999969482421875,-0.00033570360392332077,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.99981689453125,-0.0031434064731001854,-0.018616290763020515,0.00357066560536623,0.999969482421875,-0.004394665360450745,0.0,1.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.99993896484375,-0.0002136295661330223,-0.009735404513776302,0.0028382213786244392,0.999969482421875,-0.0021973326802253723,0.99993896484375,-0.0002136295661330223,-0.009735404513776302,0.002868739888072014,0.999969482421875,-0.0021973326802253723,0.0,1.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0034485915675759315,0.999969482421875,-0.0025940733030438423,-0.999420166015625,-0.02542191743850708,-0.022553179413080215,0.0025635547935962677,0.999969482421875,-0.0009460737928748131,0.0027161473408341408,0.999969482421875,-0.0010071108117699623,-0.999420166015625,-0.02542191743850708,-0.022553179413080215,0.0,1.0,-0.0,0.0,0.999969482421875,-0.0,0.0,0.999969482421875,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.004577776417136192,0.999908447265625,-0.011810663156211376,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-0.006164738908410072,-0.99969482421875,0.023499252274632454,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,-0.006164738908410072,-0.99969482421875,0.023499252274632454,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-0.999969482421875,-0.0,0.0,1.0,-0.0,0.0018921475857496262,0.999969482421875,-0.005096591077744961,0.9973143935203552,-0.02066102996468544,-0.06982634961605072,-0.999114990234375,-0.0025940733030438423,-0.041810356080532074,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0019226660951972008,0.999969482421875,-0.004730368964374065,0.0019226660951972008,0.999969482421875,-0.004730368964374065,0.0019226660951972008,0.999969482421875,-0.004730368964374065,0.0018921475857496262,0.999969482421875,-0.0054322946816682816,0.0018921475857496262,0.999969482421875,-0.0054322946816682816,0.0018921475857496262,0.999969482421875,-0.0054322946816682816,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0,1.0,-0.0,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0,1.0,-0.0,0.0,1.0,-0.0,-0.9987182021141052,-0.004669331945478916,-0.04989776387810707,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.9986571669578552,-0.003326517529785633,-0.05142368748784065,0.9986571669578552,-0.003326517529785633,-0.05142368748784065,0.0019226660951972008,0.999969482421875,-0.004730368964374065,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0,1.0,-0.0,0.0019226660951972008,0.999969482421875,-0.004730368964374065,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0018921475857496262,0.999969482421875,-0.0054322946816682816,0.0019226660951972008,0.999969482421875,-0.004730368964374065,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0019226660951972008,0.999969482421875,-0.004730368964374065,0.0018921475857496262,0.999969482421875,-0.0054322946816682816,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0018921475857496262,0.999969482421875,-0.0054322946816682816,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0018921475857496262,0.999969482421875,-0.0054322946816682816,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0009460737928748131,0.999969482421875,-0.0023194067180156708,0.0018921475857496262,0.999969482421875,-0.0054322946816682816,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,-0.99945068359375,-0.00357066560536623,-0.0320139154791832,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0009155552834272385,0.999969482421875,-0.002685628831386566,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-0.99945068359375,-0.00357066560536623,-0.0320139154791832,0.0036317026242613792,0.99993896484375,-0.008178960531949997,0.0,1.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-0.999847412109375,0.0,-0.016510512679815292,0.0025635547935962677,0.999969482421875,-0.006286812946200371,-0.999847412109375,0.0,-0.016510512679815292,0.0025940733030438423,0.999969482421875,-0.006317331455647945,0.0,1.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0036011841148138046,0.99993896484375,-0.010406811721622944,0.9988097548484802,-0.024262215942144394,-0.041688285768032074,0.0024414807558059692,0.999969482421875,-0.007110812701284885,0.002624591812491417,0.99993896484375,-0.007568590342998505,0.9988097548484802,-0.024262215942144394,-0.041688285768032074,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.999969482421875,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.999969482421875,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.002471999265253544,0.999969482421875,-0.00357066560536623,0.9998779296875,-0.00033570360392332077,-0.01461836602538824,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.002471999265253544,0.999969482421875,-0.002227851189672947,-0.9986876845359802,-0.03811761736869812,-0.033814508467912674,0.0,0.0,1.0,0.0,0.0,1.0,-0.006164738908410072,-0.99969482421875,0.023499252274632454,0.0,0.0,1.0,0.004943998530507088,0.99993896484375,-0.00714133121073246,0.004943998530507088,0.999969482421875,-0.0044862208887934685,1.0,0.0,-0.0,0.004943998530507088,0.999969482421875,-0.0058290353044867516,0.0,-0.99969482421875,0.023499252274632454,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,-0.99951171875,-0.02224799245595932,-0.02148503065109253,-0.9986876845359802,-0.03811761736869812,-0.033814508467912674,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.17572557926177979,0.0,0.9844050407409668,0.0,1.0,-0.0,0.0,-1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.9993896484375,-0.005249183624982834,-0.033814508467912674,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.046418651938438416,0.0,0.9989013075828552,0.99969482421875,-0.00277718435972929,-0.024231696501374245,0.0,1.0,-0.0,0.9993896484375,-0.005249183624982834,-0.033814508467912674,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,-1.0,-0.0,-0.999908447265625,-0.00634784996509552,-0.009155552834272385,-0.999908447265625,-0.00634784996509552,-0.009155552834272385,0.0,1.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.01675466075539589,-0.002868739888072014,-0.999847412109375,-1.0,0.0,-0.0,0.99957275390625,-0.004547257907688618,-0.028748435899615288,0.01675466075539589,-0.002868739888072014,-0.999847412109375,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.004028443247079849,-0.0012207403779029846,0.999969482421875,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.01675466075539589,-0.002868739888072014,-0.999847412109375,-1.0,0.0,-0.0,0.99981689453125,-0.0031434064731001854,-0.018616290763020515,0.01675466075539589,-0.002868739888072014,-0.999847412109375,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.01675466075539589,-0.002868739888072014,-0.999847412109375,-0.04043702408671379,0.0,-0.999176025390625,0.0,0.999969482421875,-0.0,-0.99969482421875,0.0,0.024323251098394394,0.046418651938438416,0.0,0.9989013075828552,-0.04043702408671379,0.0,-0.999176025390625,-0.99969482421875,0.0,0.024323251098394394,-0.99969482421875,0.0,0.024323251098394394,0.046418651938438416,0.0,0.9989013075828552,0.046418651938438416,0.0,0.9989013075828552,1.0,0.0,-0.0,-0.04043702408671379,0.0,-0.999176025390625,1.0,0.0,-0.0,-0.04043702408671379,0.0,-0.999176025390625,-0.99969482421875,0.0,0.024323251098394394,0.0,1.0,-0.0,-0.08969389647245407,0.0,-0.9959410429000854,0.999847412109375,0.0,0.016479995101690292,-0.08969389647245407,0.0,-0.9959410429000854,0.17572557926177979,0.0,0.9844050407409668,0.999847412109375,0.0,0.016479995101690292,0.999847412109375,0.0,0.016479995101690292,-0.08969389647245407,0.0,-0.9959410429000854,-1.0,0.0,-0.0,-0.08969389647245407,0.0,-0.9959410429000854,0.17572557926177979,0.0,0.9844050407409668,0.999847412109375,0.0,0.016479995101690292,0.17572557926177979,0.0,0.9844050407409668,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,-0.99969482421875,0.023499252274632454,1.0,0.0,-0.0,0.006164738908410072,-0.99969482421875,0.023499252274632454,0.0,0.0,1.0,0.0026551103219389915,0.999969482421875,-0.005767998285591602,-0.999664306640625,0.0,-0.024750512093305588,0.0,0.0,1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0026551103219389915,0.99993896484375,-0.0076601458713412285,0.9973754286766052,-0.03634754568338394,-0.06250190734863281,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.006164738908410072,-0.99969482421875,0.023499252274632454,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0,0.0,1.0,0.005310220643877983,0.999908447265625,-0.01156651508063078,0.005310220643877983,0.999847412109375,-0.015350810252130032,-1.0,0.0,-0.0,0.005310220643877983,0.9998779296875,-0.013458662666380405,0.0,-0.99969482421875,0.023499252274632454,-0.999664306640625,0.0,-0.024750512093305588,0.0,-1.0,-0.0,0.9973143935203552,-0.02066102996468544,-0.06982634961605072,0.9973754286766052,-0.03634754568338394,-0.06250190734863281,0.0,0.0,1.0,0.0,1.0,-0.0,-0.17572557926177979,0.0,0.9844050407409668,0.0,1.0,-0.0,0.0,-1.0,-0.0,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,-0.9982299208641052,-0.005218665115535259,-0.05883968621492386,0.0,-1.0,-0.0,0.0,1.0,-0.0,-0.046418651938438416,0.0,0.9989013075828552,-0.999114990234375,-0.0025940733030438423,-0.041810356080532074,0.0,1.0,-0.0,-0.9982299208641052,-0.005218665115535259,-0.05883968621492386,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,-1.0,-0.0,0.9969786405563354,-0.004974517039954662,-0.07712027430534363,0.9969786405563354,-0.004974517039954662,-0.07712027430534363,0.0,1.0,-0.0,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.012878810986876488,-0.0025025177747011185,-0.999908447265625,1.0,0.0,-0.0,-0.9987182021141052,-0.004669331945478916,-0.04989776387810707,0.012878810986876488,-0.0025025177747011185,-0.999908447265625,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-1.0,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0036927396431565285,-0.0023499252274632454,0.999969482421875,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.012878810986876488,-0.0025025177747011185,-0.999908447265625,1.0,0.0,-0.0,-0.99945068359375,-0.00357066560536623,-0.0320139154791832,0.012878810986876488,-0.0025025177747011185,-0.999908447265625,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,1.0,-0.0,-1.0,0.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,1.0,-0.0,1.0,0.0,-0.0,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,0.0,-1.0,1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,1.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.0,0.0,-1.0,0.0,0.0,1.0,-1.0,0.0,-0.0,0.012878810986876488,-0.0025025177747011185,-0.999908447265625,0.04043702408671379,0.0,-0.999176025390625,0.0,0.999969482421875,-0.0,0.99969482421875,0.0,0.024323251098394394,-0.046418651938438416,0.0,0.9989013075828552,0.04043702408671379,0.0,-0.999176025390625,0.99969482421875,0.0,0.024323251098394394,0.99969482421875,0.0,0.024323251098394394,-0.046418651938438416,0.0,0.9989013075828552,-0.046418651938438416,0.0,0.9989013075828552,-1.0,0.0,-0.0,0.04043702408671379,0.0,-0.999176025390625,-1.0,0.0,-0.0,0.04043702408671379,0.0,-0.999176025390625,0.99969482421875,0.0,0.024323251098394394,0.0,1.0,-0.0,0.08969389647245407,0.0,-0.9959410429000854,-0.999847412109375,0.0,0.016479995101690292,0.08969389647245407,0.0,-0.9959410429000854,-0.17572557926177979,0.0,0.9844050407409668,-0.999847412109375,0.0,0.016479995101690292,-0.999847412109375,0.0,0.016479995101690292,0.08969389647245407,0.0,-0.9959410429000854,1.0,0.0,-0.0,0.08969389647245407,0.0,-0.9959410429000854,-0.17572557926177979,0.0,0.9844050407409668,-0.999847412109375,0.0,0.016479995101690292,-0.17572557926177979,0.0,0.9844050407409668,1.0,0.0,-0.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,-1.0,-0.0,0.0,-1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0],"indices":[393,9,10,9,393,1,423,23,22,23,423,17,416,158,20,416,155,158,416,403,155,417,403,416,8,412,14,412,8,5,407,12,405,12,407,11,5,406,412,406,5,2,11,398,12,398,11,13,411,402,409,4,402,411,4,154,402,7,399,410,399,7,400,408,4,411,395,4,408,395,123,4,163,16,413,16,163,164,164,418,16,418,164,165,57,60,38,60,57,66,22,435,28,435,22,23,426,28,27,28,426,22,4,123,19,19,123,143,19,143,141,19,141,95,19,95,79,79,95,30,30,95,73,73,95,31,31,95,83,83,95,32,32,95,49,140,21,429,142,21,140,396,21,142,396,15,21,420,115,422,115,420,157,415,22,426,22,415,423,70,439,25,36,439,70,74,439,36,37,439,74,82,439,37,457,439,82,456,439,457,94,439,456,24,439,94,424,439,24,114,29,26,97,29,114,529,29,97,39,29,529,71,29,39,40,29,71,85,29,40,524,29,85,87,29,524,25,29,87,439,29,25,464,535,555,535,464,81,44,444,434,444,44,68,19,69,46,69,19,79,79,50,69,50,79,30,460,102,551,102,460,478,55,41,452,41,55,65,73,53,75,53,73,31,75,54,76,54,75,53,76,448,445,448,76,54,83,56,486,56,83,32,486,57,80,57,486,56,95,42,93,42,95,18,472,100,108,100,472,470,54,447,448,447,54,80,30,75,50,75,30,73,65,433,41,433,65,45,91,58,89,58,91,33,89,59,88,59,89,58,88,451,90,451,88,59,78,61,72,61,78,34,72,62,77,62,72,61,77,453,450,453,77,62,84,64,67,64,84,35,67,65,55,65,67,64,436,48,437,436,47,48,436,20,47,416,20,436,86,46,52,46,86,19,518,587,146,587,518,520,32,63,56,63,32,49,43,425,431,442,425,43,429,425,442,429,21,425,45,434,433,434,45,44,68,446,444,446,68,51,92,432,430,432,92,512,52,44,45,44,52,46,69,51,68,51,69,50,80,38,447,38,80,57,31,486,53,486,31,83,51,445,446,445,51,76,541,43,105,122,43,541,442,43,122,59,450,451,450,59,77,35,52,64,52,35,86,479,103,569,103,479,480,62,452,453,452,62,55,34,67,61,67,34,84,487,125,126,125,487,488,502,585,134,585,502,522,500,581,131,581,500,519,33,72,58,72,33,78,63,92,66,92,63,93,99,90,530,90,99,88,66,430,60,430,66,92,96,89,98,89,96,91,49,93,63,93,49,95,113,99,112,99,113,98,112,530,449,530,112,99,115,98,113,98,115,96,508,449,438,449,508,112,496,101,129,101,496,514,151,537,150,537,151,536,567,147,106,147,567,565,422,113,454,113,422,115,148,145,128,145,148,133,138,127,139,127,138,135,111,607,153,607,111,570,575,124,130,124,575,573,591,107,144,107,591,152,137,543,136,543,137,104,583,149,132,149,583,582,109,120,110,120,109,121,533,601,603,601,533,531,492,557,613,557,492,466,494,576,579,576,494,497,506,545,595,545,506,509,516,580,577,580,516,495,521,589,588,589,521,498,440,542,539,440,615,542,440,443,615,484,568,593,568,484,473,515,578,574,578,515,517,48,547,546,547,48,47,523,561,586,561,523,474,525,599,597,599,525,527,481,549,608,549,481,458,532,598,602,598,532,526,489,553,538,553,489,462,490,614,611,614,490,493,499,584,590,584,499,501,476,592,563,592,476,503,504,596,605,596,504,507,513,571,544,571,513,510,471,609,566,609,471,482,459,552,550,552,459,461,463,556,554,556,463,465,511,540,572,540,511,441,467,559,558,559,467,468,475,564,562,564,475,477,483,594,610,594,483,485,528,604,600,604,528,534,469,612,560,612,469,491,455,606,548,606,455,505,620,626,628,626,620,616,141,18,95,18,141,427,123,617,143,617,123,395,119,116,117,116,119,118,618,629,622,629,618,621,428,623,624,623,428,619,142,625,627,625,142,140,154,4,156,156,4,19,156,19,157,157,19,115,115,19,96,96,19,91,91,19,33,33,19,78,78,19,34,34,19,84,84,19,35,35,19,86,402,156,630,156,402,154,634,642,640,642,634,421,159,161,162,161,159,160,632,641,636,641,632,635,158,638,643,638,158,155,631,637,639,637,631,633,6,170,3,170,6,169,645,651,646,651,645,650,3,171,0,171,3,170,644,650,645,650,644,652,648,168,166,168,648,647,649,166,167,166,649,648,347,178,174,178,347,357,361,656,193,656,361,356,180,176,183,176,180,177,355,177,180,177,355,348,174,181,173,181,174,178,654,187,179,187,654,188,173,184,172,184,173,181,687,201,195,201,687,200,336,681,198,333,681,336,665,681,333,682,681,665,186,678,653,678,186,192,673,190,189,190,673,669,653,670,655,670,653,678,189,659,191,659,189,190,182,677,675,182,675,664,182,664,332,185,660,661,660,185,676,657,674,677,657,677,182,657,182,301,371,193,368,193,371,361,368,194,913,194,368,193,913,683,914,683,913,194,235,238,244,238,235,216,200,699,201,699,200,206,690,206,200,206,690,205,182,321,301,182,197,321,321,197,319,319,197,273,273,197,227,227,197,210,210,197,261,261,197,209,209,197,251,251,197,208,208,197,257,199,318,693,199,320,318,658,320,199,658,199,679,684,293,335,293,684,686,680,200,687,200,680,690,688,202,272,688,272,720,688,720,721,688,721,260,688,260,215,688,215,252,688,252,214,688,214,248,688,248,203,688,203,703,703,203,265,703,265,788,703,788,263,703,263,218,703,218,249,703,249,217,703,217,793,703,793,275,703,275,292,703,292,204,703,204,207,728,799,259,799,728,819,222,708,246,708,222,698,197,247,257,247,197,224,257,228,208,228,257,247,724,280,742,280,724,815,233,219,243,219,233,716,251,231,209,231,251,253,253,232,231,232,253,254,254,712,232,712,254,709,261,234,210,234,261,750,750,235,234,235,750,258,273,220,196,220,273,271,736,278,734,278,736,286,232,711,258,711,232,712,208,253,251,253,208,228,243,697,223,697,243,219,269,236,211,236,269,267,267,237,236,237,267,266,266,715,237,715,266,268,256,239,212,239,256,250,250,240,239,240,250,255,255,717,240,717,255,714,262,242,213,242,262,245,245,243,242,243,245,233,226,700,701,225,700,226,198,700,225,681,700,198,264,224,197,224,264,230,782,851,784,851,782,324,210,241,227,241,210,234,689,221,695,689,706,221,693,706,689,693,689,199,223,698,222,698,223,697,246,710,229,710,246,708,270,696,776,696,270,694,230,222,224,222,230,223,247,229,228,229,247,246,258,216,235,216,258,711,209,750,261,750,209,231,229,709,254,709,229,710,221,805,283,221,300,805,706,300,221,237,714,255,714,237,715,213,230,264,230,213,242,743,281,744,281,743,833,240,716,233,716,240,717,212,245,262,245,212,239,751,303,752,303,751,304,766,849,786,849,766,312,764,845,783,845,764,309,211,250,256,250,211,236,241,270,271,270,241,244,277,268,266,268,277,794,244,694,270,694,244,238,274,267,269,267,274,276,227,271,273,271,227,241,291,277,276,277,291,290,290,794,277,794,290,713,293,276,274,276,293,291,772,713,290,713,772,702,760,279,778,279,760,307,329,801,800,801,329,328,831,325,829,325,831,284,686,291,293,291,686,718,326,323,311,323,326,306,316,305,313,305,316,317,289,871,834,871,289,331,839,302,837,302,839,308,855,285,330,285,855,322,315,807,282,807,315,314,847,327,846,327,847,310,287,298,299,298,287,288,797,865,795,865,797,867,756,821,730,821,756,877,758,840,761,840,758,843,770,809,773,809,770,859,780,844,759,844,780,841,785,853,762,853,785,852,879,803,806,704,803,879,704,879,707,748,832,737,832,748,857,779,842,781,842,779,838,226,811,225,811,226,810,787,825,738,825,787,850,789,863,791,863,789,861,745,813,722,813,745,872,796,862,790,862,796,866,753,817,726,817,753,802,754,878,757,878,754,875,763,848,765,848,763,854,740,856,767,856,740,827,768,860,771,860,768,869,777,835,774,835,777,808,735,873,746,873,735,830,723,816,725,816,723,814,727,820,729,820,727,818,775,804,705,804,775,836,731,823,732,823,731,822,739,828,741,828,739,826,747,858,749,858,747,874,792,868,798,868,792,864,733,876,755,876,733,824,719,870,769,870,719,812,884,890,880,890,884,892,319,196,691,196,319,273,301,881,657,881,301,321,297,294,296,294,297,295,882,893,885,893,882,886,692,887,883,887,692,888,320,889,318,889,320,891,332,197,182,332,334,197,197,334,335,197,335,293,197,293,264,264,293,213,213,293,262,262,293,212,212,293,256,256,293,211,211,293,269,269,293,274,664,334,332,334,664,894,898,906,685,906,898,904,337,339,338,339,337,340,896,905,899,905,896,900,336,902,333,902,336,907,895,901,897,901,895,903,356,180,656,180,356,355,183,175,662,175,183,176,172,343,341,343,172,184,683,344,346,344,683,663,663,345,344,345,663,662,662,342,345,342,662,175,914,346,915,346,914,683,347,908,357,908,347,351,356,394,355,394,356,397,401,363,352,363,401,366,394,353,354,353,394,392,351,359,908,359,351,350,350,360,359,360,350,349,361,397,356,397,361,414,374,367,419,367,374,375,349,364,360,364,349,362,419,365,404,365,419,367,371,414,361,414,371,373,404,366,401,366,404,365,671,930,672,930,671,389,912,933,916,933,912,378,358,387,667,387,358,386,372,381,370,381,372,377,668,389,671,389,668,390,370,382,369,382,370,381,927,934,388,934,927,921,926,376,924,376,926,925,911,378,912,378,911,383,928,921,927,921,928,922,391,922,928,922,391,923,666,390,668,390,666,929,926,923,391,923,926,924,369,383,911,383,369,382,909,385,910,385,909,384,920,379,380,379,920,919,667,929,666,929,667,387,917,932,918,932,917,931,392,352,353,352,392,401,355,354,348,354,355,394]}
var buildingFragmentShader="precision highp float;uniform float time,scale,rainbowFactor,spaceFactor,pulseIntensity;uniform vec3 origin,sunDirection;uniform mat4 viewMatrix,viewProjectionMatrix;varying vec3 a,b,c,d;vec3 e=vec3(5.8e-6,1.35e-5,3.31e-5);vec3 f=vec3(10);vec3 l(float g){float h,i,j,k;h=floor(g*6.);i=float(h<=2.)+float(h>4.)*.5;j=max(1.-abs(h-2.)*.5,0.);k=(1.-(h-4.)*.5)*float(h>=4.);return vec3(i,j,k);}void main(){vec3 g,i,j;g=normalize(b);float h=max(dot(g,sunDirection),0.);h=h;i=vec3(h);j=i*c+d+l(mod(scale,1.))*rainbowFactor;gl_FragColor=vec4(j,1);}"
var buildingVertexShader="precision highp float;uniform float time,scale,rainbowFactor,spaceFactor,pulseIntensity;uniform vec3 origin,sunDirection;uniform mat4 viewMatrix,viewProjectionMatrix;varying vec3 a,b,c,d;vec3 e=vec3(5.8e-6,1.35e-5,3.31e-5);vec3 f=vec3(10);float t(float g){return 3./(16.*3.1415)*(1.+g*g);}float u(vec3 g,vec3 h){float i,j,k,l;i=dot(h,h);j=2.*dot(g,h);k=dot(g,g)-1.;l=j*j-4.*i*k;return (-j+sqrt(l))/(2.*i);}vec3 v(vec3 g,vec3 h){vec3 i;float j,m,o;j=u(vec3(0,.9,0),g);i=vec3(0);const int k=10;const float l=1./float(k);m=0.;for(int n=0;n<k;n++){m+=l;vec3 o,c,s;o=vec3(0,.9,0)+m*j*g;float p,q,r;p=m*j*6e5;q=(length(o)-.9)*6e5;r=u(o,h)*6e5;c=exp(-r*e);s=exp(-p*.3*e);i+=s*c*e*l*j*6e5;}o=dot(h,g);i*=f*t(o)*(1.+pulseIntensity-mod(time,1.)*pulseIntensity);return i;}attribute vec3 position,normal;void main(){vec3 g,h,i;g=position+origin;g.y+=(exp(spaceFactor)-1.)*60.;g.y*=scale;gl_Position=viewProjectionMatrix*vec4(g,1);h=(viewMatrix*vec4(g,1)).xyz;i=(viewMatrix*vec4(sunDirection,0)).xyz;a=gl_Position.xyz;b=normal;float j,k;j=-h.z*2e3;k=dot(normalize(h),i);c=exp(-j*e);d=v(normalize(h),i)*(1.-c);}"
var neonAdinpzPoints=[-1.504207730293274,0.02491319179534912,5.006224057524378e-08,-1.4926196336746216,0.032464563846588135,-0.04764368757605553,-1.4806381464004517,0.053341880440711975,-0.07874992489814758,-1.4684176445007324,0.08487995713949203,-0.09568116068840027,-1.4561123847961426,0.12441360205411911,-0.10079989582300186,-1.4438765048980713,0.169277623295784,-0.09646862745285034,-1.4318643808364868,0.21680684387683868,-0.08504986017942429,-1.4202302694320679,0.2643360495567322,-0.06890609115362167,-1.4091284275054932,0.30920007824897766,-0.05039982497692108,-1.3987131118774414,0.34873372316360474,-0.03189355880022049,-1.3891385793685913,0.3802717924118042,-0.015749789774417877,-1.3805592060089111,0.40114912390708923,-0.004331020638346672,-1.3731292486190796,0.40870046615600586,1.6607089037279366e-07,-1.3664140701293945,0.40476199984550476,1.6532470681340783e-07,-1.3598780632019043,0.39387327432632446,1.6326171703440195e-07,-1.3535231351852417,0.37742432951927185,1.6014529080621287e-07,-1.3473511934280396,0.3568052351474762,1.562387836884227e-07,-1.3413642644882202,0.3334060311317444,1.5180555124061357e-07,-1.335564374923706,0.3086167871952057,1.471089632332223e-07,-1.3299535512924194,0.283827543258667,1.4241237522583106e-07,-1.3245337009429932,0.2604283392429352,1.3797914277802192e-07,-1.3193068504333496,0.23980924487113953,1.3407263566023175e-07,-1.3142749071121216,0.22336030006408691,1.3095620943204267e-07,-1.3094398975372314,0.21247157454490662,1.288932196530368e-07,-1.3048038482666016,0.20853310823440552,1.2814702188279625e-07,-1.3039820194244385,0.20853310823440552,1.284019788272417e-07,-1.309714674949646,0.20853310823440552,1.2910686564282514e-07,-1.3206908702850342,0.20853310823440552,1.3017168498663523e-07,-1.335599660873413,0.20853310823440552,1.315064537266153e-07,-1.3531302213668823,0.20853310823440552,1.330212029415634e-07,-1.3719717264175415,0.20853310823440552,1.3462593528856814e-07,-1.3908132314682007,0.20853310823440552,1.362306676355729e-07,-1.40834379196167,0.20853310823440552,1.37745416850521e-07,-1.4232525825500488,0.20853310823440552,1.3908018559050106e-07,-1.434228777885437,0.20853310823440552,1.4014500493431115e-07,-1.4399614334106445,0.20853310823440552,1.408498917498946e-07,-1.4391396045684814,0.20853310823440552,1.4110483448348532e-07,-1.4330693483352661,0.20853310823440552,1.4084459110108583e-07,-1.424291729927063,0.20853310823440552,1.4012509552685515e-07,-1.4133480787277222,0.20853310823440552,1.3903819251481764e-07,-1.4007799625396729,0.20853310823440552,1.3767572681899765e-07,-1.3871288299560547,0.20853310823440552,1.3612957161512895e-07,-1.3729362487792969,0.20853310823440552,1.344915574463812e-07,-1.358743667602539,0.20853310823440552,1.3285354327763343e-07,-1.345092535018921,0.20853310823440552,1.3130738807376474e-07,-1.3325244188308716,0.20853310823440552,1.2994492237794475e-07,-1.3215807676315308,0.20853310823440552,1.2885801936590724e-07,-1.312803030014038,0.20853310823440552,1.2813852379167656e-07,-1.3067328929901123,0.20853310823440552,1.2787826619842235e-07,-1.3037580251693726,0.2049202173948288,1.2732301968298998e-07,-1.3033602237701416,0.19493162631988525,1.25787906313235e-07,-1.304721713066101,0.1798424869775772,1.2346890798653476e-07,-1.3070247173309326,0.1609279364347458,1.205619923894119e-07,-1.3094513416290283,0.13946311175823212,1.1726313431381641e-07,-1.3111838102340698,0.11672315001487732,1.1376830144627093e-07,-1.3114042282104492,0.09398318827152252,1.1027346857872544e-07,-1.3092948198318481,0.07251836359500885,1.0697461050312995e-07,-1.3040378093719482,0.05360381677746773,1.0406769490600709e-07,-1.2948153018951416,0.03851468488574028,1.0174869657930685e-07,-1.2808095216751099,0.02852610871195793,1.0021358320955187e-07,-1.2612026929855347,0.02491319179534912,9.965832248326478e-08,-1.240770936012268,0.02491319179534912,9.954671043033159e-08,-1.224462628364563,0.02491319179534912,9.923813593104569e-08,-1.2117184400558472,0.02491319179534912,9.877199147467763e-08,-1.2019788026809692,0.02491319179534912,9.818766955049796e-08,-1.194684386253357,0.02491319179534912,9.75245626477772e-08,-1.1892757415771484,0.02491319179534912,9.68220632557859e-08,-1.185193419456482,0.02491319179534912,9.611956386379461e-08,-1.1818779706954956,0.02491319179534912,9.545645696107385e-08,-1.1787700653076172,0.02491319179534912,9.487213503689418e-08,-1.1753101348876953,0.02491319179534912,9.440599058052612e-08,-1.1709388494491577,0.02491319179534912,9.409741608124023e-08,-1.165096640586853,0.02491319179534912,9.398578271202496e-08,-1.1274012327194214,0.032464563846588135,9.506511133849926e-08,-1.0946013927459717,0.053341880440711975,9.804913503330681e-08,-1.0672390460968018,0.08487995713949203,1.0255691051952454e-07,-1.0458561182022095,0.12441360205411911,1.0820750162565673e-07,-1.0309946537017822,0.169277623295784,1.146199721802077e-07,-1.0231966972351074,0.21680684387683868,1.2141337890625437e-07,-1.0230042934417725,0.2643360495567322,1.282067927377284e-07,-1.0309593677520752,0.30920007824897766,1.3461927039770671e-07,-1.047603964805603,0.34873372316360474,1.402698615038389e-07,-1.0734801292419434,0.3802717924118042,1.44777644095484e-07,-1.109129786491394,0.40114912390708923,1.4776166779029154e-07,-1.155095100402832,0.40870046615600586,1.4884099641676585e-07,-1.1597273349761963,0.40114909410476685,1.4772186318623426e-07,-1.164339303970337,0.3802717924118042,1.446278048433669e-07,-1.1686116456985474,0.34873372316360474,1.399537978841181e-07,-1.1722251176834106,0.30920007824897766,1.340948330152969e-07,-1.1748602390289307,0.2643360495567322,1.2744588673285762e-07,-1.17619788646698,0.2168068289756775,1.204019497436093e-07,-1.1759185791015625,0.1692776083946228,1.1335801985978833e-07,-1.1737030744552612,0.12441357970237732,1.0670907357734905e-07,-1.1692320108413696,0.08487992733716965,1.0085010160310048e-07,-1.1621861457824707,0.05334184318780899,9.617609464385168e-08,-1.152246117591858,0.032464515417814255,9.308202919555697e-08,-1.1390926837921143,0.02491319179534912,9.196289596502538e-08,-1.1162645816802979,0.02491319179534912,9.170710058015175e-08,-1.0934418439865112,0.02491319179534912,9.099991160610443e-08,-1.0710769891738892,0.02491319179534912,8.993160349746177e-08,-1.0496225357055664,0.02491319179534912,8.859245781422942e-08,-1.0295310020446777,0.02491319179534912,8.707274901098572e-08,-1.0112550258636475,0.02491319179534912,8.54627657531637e-08,-0.9952470064163208,0.02491319179534912,8.385278249534167e-08,-0.9819595217704773,0.02491319179534912,8.233307369209797e-08,-0.9718450903892517,0.02491319179534912,8.099392800886562e-08,-0.9653562307357788,0.02491319179534912,7.992561990022296e-08,-0.9629454612731934,0.02491319179534912,7.921843092617564e-08,-0.9650653600692749,0.02491319179534912,7.8962635541302e-08,-0.970134437084198,0.032464563846588135,8.003973306358603e-08,-0.9734551310539246,0.053341880440711975,8.301760345830189e-08,-0.9752391576766968,0.08487995713949203,8.751608504553587e-08,-0.9756981134414673,0.12441360205411911,9.31550232508016e-08,-0.9750436544418335,0.169277623295784,9.955427060504007e-08,-0.973487377166748,0.21680684387683868,1.0633367253376491e-07,-0.9712409973144531,0.2643360495567322,1.1311307446248975e-07,-0.9685161113739014,0.30920007824897766,1.1951232181672822e-07,-0.9655243158340454,0.34873372316360474,1.2515126002199395e-07,-0.9624773263931274,0.3802717924118042,1.2964973450380057e-07,-0.9595867395401001,0.40114912390708923,1.3262760489851644e-07,-0.957064151763916,0.40870046615600586,1.3370470242080046e-07,-0.9554026126861572,0.40114909410476685,1.3262035736261168e-07,-0.9547669291496277,0.3802717924118042,1.2962247808445682e-07,-0.9548763036727905,0.34873372316360474,1.2509376290381624e-07,-0.9554499387741089,0.30920007824897766,1.1941692434902507e-07,-0.9562070965766907,0.2643360495567322,1.129746749484184e-07,-0.9568670392036438,0.2168068289756775,1.0614971301947662e-07,-0.9571489691734314,0.1692776083946228,9.932475109053485e-08,-0.9567721486091614,0.12441357970237732,9.288250168992818e-08,-0.9554557800292969,0.08487992733716965,8.7205663135137e-08,-0.9529191255569458,0.05334184318780899,8.267694795449643e-08,-0.9488814473152161,0.032464515417814255,7.967906867634156e-08,-0.9430619478225708,0.02491319179534912,7.859475914528957e-08,-0.9352274537086487,0.02491319179534912,7.838962545747563e-08,-0.9255744814872742,0.02491319179534912,7.782249156207399e-08,-0.9144666790962219,0.02491319179534912,7.696575465843125e-08,-0.9022677540779114,0.02491319179534912,7.589181905132136e-08,-0.8893414735794067,0.02491319179534912,7.467308194009092e-08,-0.8760514855384827,0.02491319179534912,7.338194052408653e-08,-0.8627614974975586,0.02491319179534912,7.209079910808214e-08,-0.849835216999054,0.02491319179534912,7.08720619968517e-08,-0.8376362919807434,0.02491319179534912,6.979812638974181e-08,-0.8265284895896912,0.02491319179534912,6.894138948609907e-08,-0.8168755173683167,0.02491319179534912,6.837425559069743e-08,-0.8090409636497498,0.02491319179534912,6.816910769202877e-08,-0.8035286068916321,0.032464563846588135,6.919694328644255e-08,-0.8002955913543701,0.053341880440711975,7.203860974414056e-08,-0.7988860607147217,0.08487995713949203,7.633133947138049e-08,-0.7988441586494446,0.12441360205411911,8.171237197984738e-08,-0.7997140288352966,0.169277623295784,8.781893257037154e-08,-0.8010397553443909,0.21680684387683868,9.428826075463803e-08,-0.8023654818534851,0.2643360495567322,1.0075758893890452e-07,-0.8032353520393372,0.30920007824897766,1.0686414952942869e-07,-0.8031934499740601,0.34873372316360474,1.1224518203789557e-07,-0.8017839193344116,0.3802717924118042,1.165379117651355e-07,-0.7985509037971497,0.40114912390708923,1.1937957822283352e-07,-0.7930384874343872,0.40870046615600586,1.2040743513352936e-07,-0.7837870717048645,0.40114909410476685,1.1906089980584511e-07,-0.7702167630195618,0.3802717924118042,1.1533812482866779e-07,-0.753191351890564,0.34873372316360474,1.0971436381623789e-07,-0.733574628829956,0.30920007824897766,1.0266485617194121e-07,-0.7122303247451782,0.2643360495567322,9.466485551001824e-08,-0.6900222301483154,0.2168068289756775,8.618960833928213e-08,-0.6678141355514526,0.1692776083946228,7.771436116854602e-08,-0.6464698314666748,0.12441357970237732,6.971436050662305e-08,-0.6268531084060669,0.08487992733716965,6.266485286232637e-08,-0.6098276972770691,0.05334184318780899,5.7041091849896475e-08,-0.5962573885917664,0.032464515417814255,5.331832042543283e-08,-0.587006151676178,0.02491319179534912,5.1971799308603295e-08,-0.5821555256843567,0.032464563846588135,5.291446925070886e-08,-0.580596387386322,0.053341880440711975,5.552067250391701e-08,-0.5814058184623718,0.08487995713949203,5.945770098492176e-08,-0.5836609601974487,0.12441360205411911,6.439285016313079e-08,-0.5864388942718506,0.169277623295784,6.999341195523812e-08,-0.5888167023658752,0.21680684387683868,7.592667827793775e-08,-0.5898715257644653,0.2643360495567322,8.185994460063739e-08,-0.5886804461479187,0.30920007824897766,8.746050639274472e-08,-0.584320604801178,0.34873372316360474,9.239565201824007e-08,-0.575869083404541,0.3802717924118042,9.63326840519585e-08,-0.5624029636383057,0.40114912390708923,9.893888375245297e-08,-0.5429993867874146,0.40870046615600586,9.988154658913118e-08,-0.5330139994621277,0.40870046615600586,9.974683479185842e-08,-0.5239884257316589,0.40870046615600586,9.937438960605505e-08,-0.5155293345451355,0.40870046615600586,9.881175344617077e-08,-0.5072433352470398,0.40870046615600586,9.810648293751001e-08,-0.498737096786499,0.40870046615600586,9.730612049452247e-08,-0.489617258310318,0.40870046615600586,9.645820853165787e-08,-0.4794904589653015,0.40870046615600586,9.561029656879327e-08,-0.4679633378982544,0.40870046615600586,9.480993412580574e-08,-0.45464253425598145,0.40870046615600586,9.410466361714498e-08,-0.4391346871852875,0.40870046615600586,9.35420274572607e-08,-0.4210464358329773,0.40870046615600586,9.316958227145733e-08,-0.3999844193458557,0.40870046615600586,9.303485626332986e-08,-0.3789999485015869,0.40476199984550476,9.253331967329359e-08,-0.36168766021728516,0.39387327432632446,9.114671684073983e-08,-0.34846916794776917,0.37742432951927185,8.905205817200113e-08,-0.33976614475250244,0.3568052351474762,8.64263611788374e-08,-0.3360002040863037,0.3334060311317444,8.344664337300856e-08,-0.3375929594039917,0.3086167871952057,8.02899080554198e-08,-0.3449660539627075,0.283827543258667,7.713317273783105e-08,-0.3585411310195923,0.2604283392429352,7.41534549320022e-08,-0.3787398040294647,0.23980924487113953,7.152775793883848e-08,-0.40598371624946594,0.22336030006408691,6.943309927009977e-08,-0.44069451093673706,0.21247157454490662,6.804649643754601e-08,-0.4832938313484192,0.20853310823440552,6.75449669529371e-08,-0.4864397943019867,0.2124955952167511,6.763765014738965e-08,-0.4884968101978302,0.2234506905078888,6.78938789633321e-08,-0.48966097831726074,0.23999987542629242,6.828095422406477e-08,-0.49012836813926697,0.2607446312904358,6.876616254203327e-08,-0.4900950491428375,0.2842864394187927,6.93167905296832e-08,-0.48975706100463867,0.30922675132751465,6.990012479946017e-08,-0.48931047320365906,0.3341670632362366,7.048345906923714e-08,-0.48895135521888733,0.3577088713645935,7.103408705688707e-08,-0.48887577652931213,0.3784536123275757,7.151929537485557e-08,-0.4892798066139221,0.3950027823448181,7.190637063558825e-08,-0.49035951495170593,0.4059578776359558,7.21625994515307e-08,-0.4923110008239746,0.409920334815979,7.225527554055589e-08,-0.49429991841316223,0.4023449718952179,7.161486337281531e-08,-0.49598777294158936,0.38140130043029785,6.984430456213886e-08,-0.4970231056213379,0.3497629761695862,6.716962985819919e-08,-0.49705439805984497,0.3101036846637726,6.381687001066894e-08,-0.4957301616668701,0.265097051858902,6.00120486637934e-08,-0.49269890785217285,0.21741676330566406,5.5981200119958885e-08,-0.4876091182231903,0.16973647475242615,5.1950351576124376e-08,-0.480109304189682,0.12472984939813614,4.8145530229248834e-08,-0.46984797716140747,0.08507054299116135,4.4792766829004904e-08,-0.4564736485481262,0.053432218730449677,4.211809212506523e-08,-0.4396348297595978,0.03248853608965874,4.0347533314388784e-08,-0.4189800024032593,0.02491319179534912,3.9707117593934527e-08,-0.3989786207675934,0.02491319179534912,3.971240403188858e-08,-0.383704274892807,0.02491319179534912,3.9727023448676846e-08,-0.3722115755081177,0.02491319179534912,3.974911066961795e-08,-0.36355510354042053,0.02491319179534912,3.977679696731684e-08,-0.3567894697189331,0.02491319179534912,3.9808213614378474e-08,-0.35096925497055054,0.02491319179534912,3.9841498988835156e-08,-0.34514904022216797,0.02491319179534912,3.987478436329184e-08,-0.33838340640068054,0.02491319179534912,3.990620101035347e-08,-0.3297269642353058,0.02491319179534912,3.993388730805236e-08,-0.31823432445526123,0.02491319179534912,3.9955974528993465e-08,-0.30296003818511963,0.02491319179534912,3.997059394578173e-08,-0.2829587459564209,0.02491319179534912,3.9975876831022106e-08,-0.2605638802051544,0.02491319179534912,3.997059039306805e-08,-0.2388278841972351,0.02491319179534912,3.9955970976279787e-08,-0.21788360178470612,0.02491319179534912,3.9933883755338684e-08,-0.1978638470172882,0.02491319179534912,3.990619745763979e-08,-0.17890146374702454,0.02491319179534912,3.987478081057816e-08,-0.16112926602363586,0.02491319179534912,3.984149543612148e-08,-0.14468006789684296,0.02491319179534912,3.9808210061664795e-08,-0.12968671321868896,0.02491319179534912,3.977679341460316e-08,-0.11628201603889465,0.02491319179534912,3.974910711690427e-08,-0.10459879785776138,0.02491319179534912,3.972701989596317e-08,-0.09476989507675171,0.02491319179534912,3.97124004791749e-08,-0.08692812919616699,0.02491319179534912,3.9707117593934527e-08,-0.08546954393386841,0.032464563846588135,4.052677127219795e-08,-0.09344424307346344,0.053341880440711975,4.2792876797648205e-08,-0.10896556824445724,0.08487995713949203,4.621614024813425e-08,-0.13014686107635498,0.12441360205411911,5.05072748069324e-08,-0.155101478099823,0.169277623295784,5.5376986551891605e-08,-0.18194276094436646,0.21680684387683868,6.053598866628818e-08,-0.2087840437889099,0.2643360495567322,6.569499078068475e-08,-0.23373869061470032,0.30920007824897766,7.056470252564395e-08,-0.25492003560066223,0.34873372316360474,7.485583353172842e-08,-0.2704414129257202,0.3802717924118042,7.827910053492815e-08,-0.2784161865711212,0.40114912390708923,8.05452060603784e-08,-0.27695775032043457,0.40870046615600586,8.136486684406918e-08,-0.2671789228916168,0.40870046615600586,8.145476471099755e-08,-0.252172589302063,0.40870046615600586,8.170330545453908e-08,-0.2330220490694046,0.40870046615600586,8.207876334154207e-08,-0.2108106017112732,0.40870046615600586,8.254940553342749e-08,-0.1866215616464615,0.40870046615600586,8.308350629704364e-08,-0.16153821349143982,0.40870046615600586,8.364933279381148e-08,-0.13664385676383972,0.40870046615600586,8.421515929057932e-08,-0.11302180588245392,0.40870046615600586,8.474926005419547e-08,-0.09175534546375275,0.40870046615600586,8.521990224608089e-08,-0.07392778247594833,0.40870046615600586,8.559536013308389e-08,-0.06062241643667221,0.40870046615600586,8.584390087662541e-08,-0.05292248725891113,0.40870046615600586,8.593378453269906e-08]
var neonCtrlPoints=[-0.4354504346847534,0.6153392791748047,8.169081411324441e-09,-0.49119508266448975,0.6079503297805786,-0.06963155418634415,-0.5391203165054321,0.587522029876709,-0.11509348452091217,-0.5785654187202454,0.5566622018814087,-0.1398385912179947,-0.608869731426239,0.5179787874221802,-0.14731967449188232,-0.6293724775314331,0.4740796387195587,-0.1409895420074463,-0.6394129991531372,0.4275726079940796,-0.1243010014295578,-0.6383305788040161,0.38106557726860046,-0.10070685297250748,-0.6254644989967346,0.337166428565979,-0.07365990430116653,-0.6001540422439575,0.2984830141067505,-0.04661296308040619,-0.5617385506629944,0.2676232159137726,-0.02301883138716221,-0.50955730676651,0.24719488620758057,-0.006330316886305809,-0.44294965267181396,0.23980587720870972,-1.5728232938272413e-08,-0.4051426947116852,0.23980587720870972,-1.9872087975159047e-08,-0.37138885259628296,0.23980587720870972,-2.3968553364284162e-08,-0.3412277400493622,0.23980587720870972,-2.803414389518366e-08,-0.3141990005970001,0.23980587720870972,-3.208537080467977e-08,-0.28984227776527405,0.23980587720870972,-3.613874710595155e-08,-0.26769721508026123,0.23980587720870972,-4.0210785812178074e-08,-0.24730342626571655,0.23980587720870972,-4.43179999365384e-08,-0.22820055484771729,0.23980587720870972,-4.8476898939497914e-08,-0.2099282443523407,0.23980587720870972,-5.270399938694936e-08,-0.19202613830566406,0.23980587720870972,-5.701581429207181e-08,-0.17403385043144226,0.23980587720870972,-6.142885666804432e-08,-0.15549105405807495,0.23980587720870972,-6.595963952804595e-08,-0.14192506670951843,0.24719484150409698,-6.916041428439712e-08,-0.13437077403068542,0.2676231563091278,-7.075492902686165e-08,-0.13159270584583282,0.2984829545021057,-7.107245636461812e-08,-0.13235539197921753,0.33716636896133423,-7.044227601227249e-08,-0.13542334735393524,0.3810655176639557,-6.919366768443069e-08,-0.13956111669540405,0.4275725483894348,-6.765590399027133e-08,-0.14353322982788086,0.47407957911491394,-6.615826464440033e-08,-0.14610421657562256,0.5179787278175354,-6.503002936142366e-08,-0.14603860676288605,0.5566621422767639,-6.460047075051989e-08,-0.14210093021392822,0.5875219702720642,-6.519886852629497e-08,-0.13305571675300598,0.6079502701759338,-6.715450240335485e-08,-0.1176675334572792,0.6153392791748047,-7.079664499087812e-08,-0.10856682062149048,0.6153392791748047,-7.342638497220833e-08,-0.11335770040750504,0.6153392791748047,-7.344215191551484e-08,-0.12922872602939606,0.6153392791748047,-7.137477098240197e-08,-0.15336844325065613,0.6153392791748047,-6.775505312361929e-08,-0.18296539783477783,0.6153392791748047,-6.31138235007711e-08,-0.21520815789699554,0.6153392791748047,-5.798190017003435e-08,-0.24728526175022125,0.6153392791748047,-5.289010118758597e-08,-0.27638524770736694,0.6153392791748047,-4.83692446096029e-08,-0.299696683883667,0.6153392791748047,-4.495014849226209e-08,-0.3144081234931946,0.6153392791748047,-4.3163634444454146e-08,-0.3177081346511841,0.6153392791748047,-4.354052052235602e-08,-0.30678510665893555,0.6153392791748047,-4.661160346586257e-08,-0.2877863645553589,0.6153392791748047,-5.050713625109893e-08,-0.26521211862564087,0.6153392791748047,-5.402245761843005e-08,-0.23974432051181793,0.6153392791748047,-5.7241631878923727e-08,-0.2120649516582489,0.6153392791748047,-6.024873044907508e-08,-0.1828559786081314,0.6153392791748047,-6.312781408723822e-08,-0.15279936790466309,0.6153392791748047,-6.596295776262195e-08,-0.12257710099220276,0.6153392791748047,-6.883822578629406e-08,-0.09287115186452866,0.6153392791748047,-7.183768246932232e-08,-0.06436348706483841,0.6153392791748047,-7.504539922820186e-08,-0.03773608058691025,0.6153392791748047,-7.854544037400046e-08,-0.01367090456187725,0.6153392791748047,-8.242187732321327e-08,0.007150053977966309,0.6153392791748047,-8.675877438690804e-08,0.01699497550725937,0.6153392791748047,-8.948368446226596e-08,0.014261624775826931,0.6153392791748047,-8.97625724860518e-08,0.0014987867325544357,0.6153392791748047,-8.809266915932312e-08,-0.018744753673672676,0.6153392791748047,-8.49712051831375e-08,-0.043920211493968964,0.6153392791748047,-8.089541125855249e-08,-0.07147879898548126,0.6153392791748047,-7.636251098119828e-08,-0.09887173026800156,0.6153392791748047,-7.186973505213246e-08,-0.12355022132396698,0.6153392791748047,-6.791431417241256e-08,-0.14296548068523407,0.6153392791748047,-6.49934719376688e-08,-0.15456873178482056,0.6153392791748047,-6.360443904895874e-08,-0.15581117570400238,0.6153392791748047,-6.424444620733993e-08,-0.1441439986228943,0.6153392791748047,-6.741073832472466e-08,-0.1307268589735031,0.6079503297805786,-7.059247764118481e-08,-0.1235840693116188,0.587522029876709,-7.213436248321159e-08,-0.12142763286828995,0.5566622018814087,-7.237239429969122e-08,-0.12296954542398453,0.5179787874221802,-7.16425674340826e-08,-0.12692180275917053,0.4740796387195587,-7.028086912441722e-08,-0.13199640810489655,0.4275726079940796,-6.862330081958135e-08,-0.13690535724163055,0.38106557726860046,-6.700585686303384e-08,-0.14036065340042114,0.337166428565979,-6.576453870366095e-08,-0.1410742849111557,0.2984830141067505,-6.523533357949418e-08,-0.1377582550048828,0.2676232159137726,-6.575423583399242e-08,-0.12912455201148987,0.24719488620758057,-6.765724691604191e-08,-0.11388517916202545,0.23980587720870972,-7.128034695824681e-08,-0.09697023779153824,0.23980587720870972,-7.490940134857738e-08,-0.08015706390142441,0.23980587720870972,-7.768797161133989e-08,-0.06339216977357864,0.23980587720870972,-7.979418370496205e-08,-0.04662207514047623,0.23980587720870972,-8.140616358787156e-08,-0.02979329414665699,0.23980587720870972,-8.27020230076414e-08,-0.012852340936660767,0.23980587720870972,-8.385988792269927e-08,0.004254268482327461,0.23980587720870972,-8.505787718604552e-08,0.02158001996576786,0.23980587720870972,-8.647410965068048e-08,0.03917839750647545,0.23980587720870972,-8.828670416960449e-08,0.05710288882255554,0.23980587720870972,-9.067378670124526e-08,0.07540697604417801,0.23980587720870972,-9.381347609860313e-08,0.09414413571357727,0.23980587720870972,-9.788389121467844e-08,0.10733817517757416,0.24719484150409698,-1.0122481342023093e-07,0.11386411637067795,0.2676231563091278,-1.0318270682319053e-07,0.11508867889642715,0.2984829545021057,-1.0400123784393145e-07,0.11237858235836029,0.33716636896133423,-1.0392408000825526e-07,0.10710053890943527,0.3810655176639557,-1.0319489973653617e-07,0.10062126070261002,0.4275725483894348,-1.0205737055457575e-07,0.09430746734142303,0.47407957911491394,-1.0075515888274822e-07,0.08952587842941284,0.5179787278175354,-9.953193824685513e-08,0.08764320611953735,0.5566621422767639,-9.863137506727071e-08,0.09002616256475449,0.5875219702720642,-9.829714286979652e-08,0.09804146736860275,0.6079502701759338,-9.877290807480676e-08,0.11305586993694305,0.6153392791748047,-1.0030239394609453e-07,0.1460115760564804,0.6111185550689697,-1.0352905377430943e-07,0.17087283730506897,0.5994493961334229,-1.0504744096806462e-07,0.18832197785377502,0.5818215608596802,-1.052006339818945e-07,0.19904132187366486,0.5597246885299683,-1.0433170416490611e-07,0.20371320843696594,0.5346484780311584,-1.0278373707706123e-07,0.20301996171474457,0.5080825686454773,-1.0089981117289426e-07,0.19764390587806702,0.48151668906211853,-9.90230049069396e-08,0.18826736509799957,0.4564404785633087,-9.749639673373167e-08,0.17557267844676971,0.4343436062335968,-9.666305800237751e-08,0.16024217009544373,0.4167157709598541,-9.686607427283889e-08,0.1429581642150879,0.40504664182662964,-9.84485239996502e-08,0.12440294027328491,0.4008259177207947,-1.0175349984820059e-07,0.11068620532751083,0.39765769243240356,-1.0535585204252129e-07,0.10592854768037796,0.38889849185943604,-1.0791600857373851e-07,0.10896409302949905,0.3756665289402008,-1.096490720442489e-07,0.11862695962190628,0.3590799868106842,-1.1077014505644911e-07,0.1337512731552124,0.34025704860687256,-1.1149433731816316e-07,0.15317116677761078,0.3203158974647522,-1.1203675853721506e-07,0.17572076618671417,0.30037474632263184,-1.1261251131600147e-07,0.20023418962955475,0.2815518081188202,-1.134367053623464e-07,0.22554557025432587,0.2649652659893036,-1.1472445038407386e-07,0.2504890263080597,0.25173330307006836,-1.1669084898358051e-07,0.2738986909389496,0.24297411739826202,-1.19551003763263e-07,0.2946087121963501,0.23980587720870972,-1.2352003864180006e-07,0.3095799684524536,0.24719484150409698,-1.259402750974914e-07,0.3208008408546448,0.2676231563091278,-1.2547211269975378e-07,0.3286829888820648,0.2984829545021057,-1.2286325556942757e-07,0.333638072013855,0.33716636896133423,-1.1886139361649839e-07,0.3360777497291565,0.3810655176639557,-1.1421422385637925e-07,0.3364136517047882,0.4275725483894348,-1.096694504099105e-07,0.33505746722221375,0.47407957911491394,-1.0597477029250513e-07,0.33242082595825195,0.5179787278175354,-1.038778876250035e-07,0.32891538739204407,0.5566621422767639,-1.0412649231739124e-07,0.3249528110027313,0.5875219702720642,-1.0746828849050871e-07,0.32094475626945496,0.6079502701759338,-1.1465097315976891e-07,0.3173028230667114,0.6153392791748047,-1.2642223623515747e-07,0.3120042085647583,0.6079503297805786,-1.4577673823623627e-07,0.30715981125831604,0.587522029876709,-1.576478041442897e-07,0.3029911518096924,0.5566622018814087,-1.6323355112035642e-07,0.2997197210788727,0.5179787874221802,-1.6373211053632986e-07,0.29756706953048706,0.4740796387195587,-1.6034161376410339e-07,0.29675471782684326,0.4275726079940796,-1.542601779647157e-07,0.2975042164325714,0.38106557726860046,-1.4668593451006018e-07,0.30003705620765686,0.337166428565979,-1.3881701477203023e-07,0.30457475781440735,0.2984830141067505,-1.3185153591166454e-07,0.3113388419151306,0.2676232159137726,-1.269876293008565e-07,0.3205508291721344,0.24719488620758057,-1.254234263114995e-07,0.33243221044540405,0.23980587720870972,-1.2835704410463222e-07,0.34703123569488525,0.23980587720870972,-1.3359419881453505e-07,0.36201804876327515,0.23980587720870972,-1.3738250004280417e-07,0.37739118933677673,0.23980587720870972,-1.3998746339893842e-07,0.3931492269039154,0.23980587720870972,-1.4167460449243663e-07,0.40929070115089417,0.23980587720870972,-1.4270945314365235e-07,0.4258142113685608,0.23980587720870972,-1.4335753917293914e-07,0.4427182972431183,0.23980587720870972,-1.4388437818979583e-07,0.46000149846076965,0.23980587720870972,-1.4455548580372124e-07,0.4776623845100403,0.23980587720870972,-1.4563640604592365e-07,0.49569952487945557,0.23980587720870972,-1.4739264031504717e-07,0.5141115188598633,0.23980587720870972,-1.5008973264230008e-07,0.532896876335144,0.23980587720870972,-1.5399318442632648e-07,0.5462396144866943,0.23780713975429535,-1.5727759716810397e-07,0.5531766414642334,0.23228120803833008,-1.5908894113181304e-07,0.5550222396850586,0.22393351793289185,-1.597053937985038e-07,0.5530906915664673,0.2134695202112198,-1.5940509001666214e-07,0.5486962795257568,0.20159463584423065,-1.5846620726733818e-07,0.5431532859802246,0.18901431560516357,-1.5716689460987254e-07,0.5377759337425232,0.1764339953660965,-1.5578532952531532e-07,0.53387850522995,0.16455911099910736,-1.5459964686215244e-07,0.5327752828598022,0.1540950983762741,-1.5388802410143398e-07,0.5357804894447327,0.14574740827083588,-1.539286103025006e-07,0.5442084670066833,0.1402214765548706,-1.5499956873554765e-07,0.5593733787536621,0.13822275400161743,-1.5737909109247994e-07,0.5818758010864258,0.13822275400161743,-1.6086538323634159e-07,0.5999795794487,0.13822275400161743,-1.6324926832567144e-07,0.614464521408081,0.13822275400161743,-1.6475925690428994e-07,0.6261106133460999,0.13822275400161743,-1.6562384530516283e-07,0.6356977224349976,0.13822275400161743,-1.6607154407211056e-07,0.6440057158470154,0.13822275400161743,-1.6633086374895356e-07,0.6518145203590393,0.13822275400161743,-1.666303148795123e-07,0.6599040627479553,0.13822275400161743,-1.671983937967525e-07,0.6690542101860046,0.13822275400161743,-1.682636110444946e-07,0.6800448894500732,0.13822275400161743,-1.7005446295570437e-07,0.6936559677124023,0.13822275400161743,-1.7279946007420222e-07,0.7106674313545227,0.13822275400161743,-1.767271129438086e-07,0.7176592946052551,0.13822275400161743,-1.7902374338518712e-07,0.7070381045341492,0.13822275400161743,-1.781185687832476e-07,0.6823595762252808,0.13822275400161743,-1.746599878060806e-07,0.6471794843673706,0.13822275400161743,-1.692963707000672e-07,0.6050535440444946,0.13822275400161743,-1.626761161332979e-07,0.5595375299453735,0.13822275400161743,-1.5544759435215383e-07,0.514187216758728,0.13822275400161743,-1.4825920402472548e-07,0.47255828976631165,0.13822275400161743,-1.4175931539739395e-07,0.4382064938545227,0.13822275400161743,-1.3659632713824976e-07,0.4146876037120819,0.13822275400161743,-1.3341862370452873e-07,0.4055573344230652,0.13822275400161743,-1.3287457534261193e-07,0.41437143087387085,0.13822275400161743,-1.3561255229888047e-07,0.43012067675590515,0.13822275400161743,-1.383619263606306e-07,0.4437110424041748,0.13822275400161743,-1.3881036409202352e-07,0.45560741424560547,0.13822275400161743,-1.37599315053194e-07,0.4662747085094452,0.13822275400161743,-1.3537022880427685e-07,0.476177841424942,0.13822275400161743,-1.3276455490540684e-07,0.485781729221344,0.13822275400161743,-1.3042375712757348e-07,0.49555128812789917,0.13822275400161743,-1.2898928503091156e-07,0.5059514045715332,0.13822275400161743,-1.2910260238641058e-07,0.5174469947814941,0.13822275400161743,-1.3140515875420533e-07,0.53050297498703,0.13822275400161743,-1.365384036944306e-07,0.5455842614173889,0.13822275400161743,-1.4514378676722117e-07,0.5631557106971741,0.13822275400161743,-1.5786278595442127e-07,0.5689329504966736,0.1323307305574417,-1.6083060927485349e-07,0.5755437612533569,0.11604101210832596,-1.6180607076421438e-07,0.5825261473655701,0.09143313765525818,-1.612381907989402e-07,0.5894179940223694,0.06058664992451668,-1.5957598975546716e-07,0.5957573056221008,0.025581084191799164,-1.5726848801023152e-07,0.6010820269584656,-0.011504020541906357,-1.547647059396695e-07,0.6049301028251648,-0.04858912527561188,-1.5251364970936265e-07,0.6068395376205444,-0.08359469473361969,-1.5096433969574719e-07,0.6063482761383057,-0.11444118618965149,-1.5056579627525934e-07,0.6029942631721497,-0.13904905319213867,-1.5176703982433537e-07,0.5963154435157776,-0.15533876419067383,-1.550170907194115e-07,0.5858498215675354,-0.16123083233833313,-1.607649977586334e-07,0.5691922903060913,-0.16123083233833313,-1.645227030167007e-07,0.5423315167427063,-0.16123083233833313,-1.6388800361255562e-07,0.507174015045166,-0.16123083233833313,-1.5970982758517493e-07,0.46562618017196655,-0.16123083233833313,-1.5283708876268065e-07,0.41959449648857117,-0.16123083233833313,-1.441187009731948e-07,0.3709854185581207,-0.16123083233833313,-1.344035922556941e-07,0.3217054307460785,-0.16123083233833313,-1.2454066222744586e-07,0.27366095781326294,-0.16123083233833313,-1.1537883892742684e-07,0.22875848412513733,-0.16123083233833313,-1.0776703618375905e-07,0.18890446424484253,-0.16123083233833313,-1.0255417492999186e-07,0.1560053676366806,-0.16123083233833313,-1.005891689942473e-07,0.1319677233695984,-0.16123083233833313,-1.0272090378293797e-07,0.11775840818881989,-0.1553388088941574,-1.0485631207757251e-07,0.10948875546455383,-0.13904908299446106,-1.0363603308860547e-07,0.10623787343502045,-0.11444120854139328,-9.996128369493817e-08,0.10708488523960114,-0.08359472453594208,-9.47332878808993e-08,0.11110891401767731,-0.048589158803224564,-8.885327673624488e-08,0.11738906800746918,-0.011504054069519043,-8.322246713987624e-08,0.12500447034835815,0.025581050664186478,-7.874208307612207e-08,0.13303424417972565,0.06058661639690399,-7.631334852931104e-08,0.14055751264095306,0.09143310785293579,-7.68374945891992e-08,0.14665338397026062,0.11604098230600357,-8.121573813468785e-08,0.15040099620819092,0.13233070075511932,-9.03493031501057e-08,0.15087944269180298,0.13822275400161743,-1.0513941361978141e-07,0.14545413851737976,0.1323307305574417,-1.4965127093091724e-07,0.13836832344532013,0.11604101210832596,-1.781169771675195e-07,0.13034287095069885,0.09143313765525818,-1.92933470088974e-07,0.1220986619591713,0.06058664992451668,-1.9649765192752966e-07,0.11435656249523163,0.025581084191799164,-1.912064391262902e-07,0.10783745348453522,-0.011504020541906357,-1.7945674812835932e-07,0.10326220095157623,-0.04858912527561188,-1.636454953768407e-07,0.10135167837142944,-0.08359469473361969,-1.4616958310398331e-07,0.10282675921916962,-0.11444118618965149,-1.2942594196374557e-07,0.10840831696987152,-0.13904905319213867,-1.1581148129380381e-07,0.11881722509860992,-0.15533876419067383,-1.0772311753726171e-07,0.13477438688278198,-0.16123083233833313,-1.0755791635119749e-07,0.1419593244791031,-0.16123083233833313,-1.09854546792576e-07,0.13187193870544434,-0.16123083233833313,-1.0894937929606385e-07,0.10799981653690338,-0.16123083233833313,-1.0549079121346949e-07,0.07383055984973907,-0.16123083233833313,-1.0012717410745609e-07,0.03285176306962967,-0.16123083233833313,-9.350691243525944e-08,-0.011448975652456284,-0.16123083233833313,-8.627839065411536e-08,-0.05558405816555023,-0.16123083233833313,-7.908999322125965e-08,-0.09606588631868362,-0.16123083233833313,-7.259010459392812e-08,-0.1294068694114685,-0.16123083233833313,-6.742711633478393e-08,-0.15211939811706543,-0.16123083233833313,-6.424940579563554e-08,-0.16071587800979614,-0.16123083233833313,-6.370535743371875e-08,-0.1517086625099182,-0.16123083233833313,-6.6443348600842e-08,-0.1395966112613678,-0.1553388088941574,-6.642272865065024e-08,-0.13629567623138428,-0.13904908299446106,-5.94707323386956e-08,-0.1404077261686325,-0.11444120854139328,-4.759314009561422e-08,-0.15053461492061615,-0.08359472453594208,-3.279573945746961e-08,-0.16527822613716125,-0.048589158803224564,-1.708431618396844e-08,-0.18324042856693268,-0.011504054069519043,-2.464652482103702e-09,-0.20302309095859528,0.025581050664186478,9.057466776596357e-09,-0.2232280671596527,0.06058661639690399,1.5476256720603487e-08,-0.24245724081993103,0.09143310785293579,1.478593425474628e-08,-0.2593124806880951,0.11604098230600357,4.9807145074964865e-09,-0.27239564061164856,0.13233070075511932,-1.5945186504495723e-08,-0.2803086042404175,0.13822275400161743,-4.999752434287075e-08,-0.2800944447517395,0.13516616821289062,-5.1602047079768454e-08,-0.27611637115478516,0.12671560049057007,-2.9109095578405686e-08,-0.26904210448265076,0.11394985765218735,1.0284640694635527e-08,-0.2595393657684326,0.09794773161411285,5.938247227277316e-08,-0.24827592074871063,0.07978801429271698,1.1098771324213885e-07,-0.23591947555541992,0.060549505054950714,1.579036705834369e-07,-0.2231377810239792,0.04131099581718445,1.9293366904094e-07,-0.21059857308864594,0.023151284083724022,2.088810049372114e-07,-0.19896958768367767,0.007149163633584976,1.9854898880566907e-07,-0.18891854584217072,-0.005616570822894573,1.5474093117973098e-07,-0.18111319839954376,-0.014067123644053936,7.026014969824246e-08,-0.17622126638889313,-0.01712372899055481,-6.209003799995116e-08,-0.18049298226833344,-0.01712372899055481,-8.018042763069388e-08,-0.19314783811569214,-0.01712372899055481,-8.731172584930391e-08,-0.21246998012065887,-0.01712372899055481,-8.565078957190053e-08,-0.23674353957176208,-0.01712372899055481,-7.736448282003039e-08,-0.2642526626586914,-0.01712372899055481,-6.461966961524013e-08,-0.2932814657688141,-0.01712372899055481,-4.958321042636271e-08,-0.32211410999298096,-0.01712372899055481,-3.442196572223111e-08,-0.34903472661972046,-0.01712372899055481,-2.1302801300748797e-08,-0.37232744693756104,-0.01712372899055481,-1.2392577630748747e-08,-0.3902764320373535,-0.01712372899055481,-9.85815695742076e-09,-0.40116578340530396,-0.01712372899055481,-1.5866401525954643e-08,-0.40327972173690796,-0.01712372899055481,-3.258429259744844e-08,-0.39781302213668823,-0.014067143201828003,-5.522061741203288e-08,-0.3887772858142853,-0.005616582930088043,-6.923851003648451e-08,-0.3769480884075165,0.007149157114326954,-7.607233953876857e-08,-0.36310097575187683,0.023151282221078873,-7.715647853956398e-08,-0.34801146388053894,0.04131099581718445,-7.392529255412228e-08,-0.3324551284313202,0.060549505054950714,-6.78131542031224e-08,-0.3172074854373932,0.07978801429271698,-6.025443610724324e-08,-0.30304408073425293,0.09794772416353226,-5.2683496676309005e-08,-0.2907404899597168,0.11394984275102615,-4.6534708530998614e-08,-0.2810722291469574,0.12671557068824768,-4.324244429199098e-08,-0.2748148441314697,0.13516612350940704,-4.424106947453765e-08,-0.2727438807487488,0.13822275400161743,-5.0964921172180766e-08,-0.2840576767921448,0.1323307305574417,-2.837624322182819e-07,-0.30139121413230896,0.11604101210832596,-4.3415352024567255e-07,-0.3230951130390167,0.09143313765525818,-5.140631174072041e-07,-0.34752002358436584,0.06058664992451668,-5.354161771720101e-07,-0.3730165362358093,0.025581084191799164,-5.101376245875144e-07,-0.39793530106544495,-0.011504020541906357,-4.501524131228507e-07,-0.4206269085407257,-0.04858912527561188,-3.673854678254429e-07,-0.4394420087337494,-0.08359469473361969,-2.7376177058613393e-07,-0.4527312219142914,-0.11444118618965149,-1.812062180306384e-07,-0.4588451683521271,-0.13904905319213867,-1.0164377783894452e-07,-0.45613446831703186,-0.15533876419067383,-4.6999389269331004e-08,-0.44294971227645874,-0.16123083233833313,-2.91983823785813e-08,-0.42990466952323914,-0.16373510658740997,-3.2643953318256536e-08,-0.4237906336784363,-0.170658677816391,-3.4915263569246235e-08,-0.42318829894065857,-0.1811176985502243,-3.625518729677424e-08,-0.42667829990386963,-0.19422829151153564,-3.690660221877806e-08,-0.43284130096435547,-0.20910660922527313,-3.711238605319522e-08,-0.4402579665184021,-0.2248687893152237,-3.711542007067692e-08,-0.4475089907646179,-0.24063096940517426,-3.715857843644699e-08,-0.45317500829696655,-0.25550928711891174,-3.7484738868442946e-08,-0.4558367133140564,-0.2686198949813843,-3.8336775531888634e-08,-0.45407477021217346,-0.2790789008140564,-3.995756969743525e-08,-0.44646984338760376,-0.2860024869441986,-4.25899990830203e-08,-0.4316026568412781,-0.28850674629211426,-4.6476923643012924e-08,-0.41976672410964966,-0.28850674629211426,-4.955252563831891e-08,-0.4171755015850067,-0.28850674629211426,-5.080098119947252e-08,-0.422252893447876,-0.28850674629211426,-5.059574093024821e-08,-0.4334228038787842,-0.28850674629211426,-4.931026253984783e-08,-0.44910913705825806,-0.28850674629211426,-4.731800018475951e-08,-0.46773576736450195,-0.28850674629211426,-4.499240446875774e-08,-0.487726628780365,-0.28850674629211426,-4.270693665375802e-08,-0.5075055956840515,-0.28850674629211426,-4.0835047343534825e-08,-0.5254966020584106,-0.28850674629211426,-3.9750190694576304e-08,-0.5401235222816467,-0.28850674629211426,-3.982582441608429e-08,-0.5498102903366089,-0.28850674629211426,-4.143539911183325e-08,-0.5529808402061462,-0.28850674629211426,-4.4952344069315586e-08,-0.5358546376228333,-0.28850674629211426,-1.516057182016084e-07,-0.518457293510437,-0.28850674629211426,-2.206060258913567e-07,-0.500809907913208,-0.28850674629211426,-2.5743867126948317e-07,-0.4829336106777191,-0.28850674629211426,-2.6758903004520107e-07,-0.46484947204589844,-0.28850674629211426,-2.565425063494331e-07,-0.44657859206199646,-0.28850674629211426,-2.2978449010224722e-07,-0.4281420409679413,-0.28850674629211426,-1.9280038543456612e-07,-0.4095609188079834,-0.28850674629211426,-1.5107558226645779e-07,-0.3908563256263733,-0.28850674629211426,-1.1009547051799018e-07,-0.37204936146736145,-0.28850674629211426,-7.534544010923128e-08,-0.353161096572876,-0.28850674629211426,-5.231088806567641e-08,-0.33421266078948975,-0.28850674629211426,-4.6476923643012924e-08,-0.32367923855781555,-0.28850674629211426,-4.95825247526227e-08,-0.3245090842247009,-0.28850674629211426,-5.091391486189423e-08,-0.3343963921070099,-0.28850674629211426,-5.083395748783914e-08,-0.35103538632392883,-0.28850674629211426,-4.9705523252896455e-08,-0.37212029099464417,-0.28850674629211426,-4.789147922679149e-08,-0.3953453302383423,-0.28850674629211426,-4.575468892653589e-08,-0.4184047281742096,-0.28850674629211426,-4.3658026527282345e-08,-0.4389926791191101,-0.28850674629211426,-4.19643555460425e-08,-0.4548034071922302,-0.28850674629211426,-4.1036543052541674e-08,-0.46353113651275635,-0.28850674629211426,-4.123745966921888e-08,-0.4628700613975525,-0.28850674629211426,-4.292996891308576e-08,-0.45051437616348267,-0.28850674629211426,-4.6476923643012924e-08,-0.4376926124095917,-0.2943922281265259,-5.0392458206260926e-08,-0.43219584226608276,-0.3106638491153717,-5.3963070456575224e-08,-0.43252596259117126,-0.33524438738822937,-5.72657690156575e-08,-0.43718481063842773,-0.3660565912723541,-6.03775660579231e-08,-0.4446742832660675,-0.401023268699646,-6.337546665236005e-08,-0.45349621772766113,-0.43806716799736023,-6.633648297338368e-08,-0.46215251088142395,-0.47511106729507446,-6.933762364269569e-08,-0.4691449999809265,-0.510077714920044,-7.245589728199775e-08,-0.47297558188438416,-0.5408899188041687,-7.576831251299154e-08,-0.47214609384536743,-0.5654704570770264,-7.935187795737875e-08,-0.4651584327220917,-0.5817421078681946,-8.32836093422884e-08,-0.45051443576812744,-0.5876275300979614,-8.764049397314011e-08,-0.43130555748939514,-0.5876275300979614,-9.072610396287928e-08,-0.4084542691707611,-0.5876275300979614,-9.200220318916763e-08,-0.3831726312637329,-0.5876275300979614,-9.18387286219513e-08,-0.3566727638244629,-0.5876275300979614,-9.060559591489437e-08,-0.330166757106781,-0.5876275300979614,-8.86727349325156e-08,-0.3048666715621948,-0.5876275300979614,-8.641007553933377e-08,-0.2819845974445343,-0.5876275300979614,-8.418754049444033e-08,-0.2627326250076294,-0.5876275300979614,-8.237505255692668e-08,-0.24832282960414886,-0.5876275300979614,-8.13425415913116e-08,-0.23996730148792267,-0.5876275300979614,-8.145993746211388e-08,-0.23887811601161957,-0.5876275300979614,-8.309715582299759e-08,-0.2462673783302307,-0.5876275300979614,-8.662411232762679e-08,-0.2607598900794983,-0.5817420482635498,-9.096317654666564e-08,-0.2704993188381195,-0.5654704570770264,-9.149503910066414e-08,-0.2758294343948364,-0.5408899188041687,-8.89496334366413e-08,-0.2770939767360687,-0.510077714920044,-8.40568787907614e-08,-0.27463674545288086,-0.4751110374927521,-7.754670150461607e-08,-0.2688014805316925,-0.43806713819503784,-7.014902791979694e-08,-0.2599319517612457,-0.4010232388973236,-6.2593791483323e-08,-0.2483719289302826,-0.36605656147003174,-5.5610911431358545e-08,-0.23446516692638397,-0.335244357585907,-4.993031765820888e-08,-0.21855543553829193,-0.3106638193130493,-4.628193295275196e-08,-0.20098650455474854,-0.2943921983242035,-4.53956872092931e-08,-0.18210215866565704,-0.28850674629211426,-4.800149966399658e-08,-0.16597402095794678,-0.28850674629211426,-5.102597810946463e-08,-0.15133611857891083,-0.28850674629211426,-5.230440081049892e-08,-0.13785728812217712,-0.28850674629211426,-5.219561671765405e-08,-0.1252063363790512,-0.28850674629211426,-5.105846767605726e-08,-0.11305208504199982,-0.28850674629211426,-4.9251799083549486e-08,-0.10106335580348969,-0.28850674629211426,-4.713445633797164e-08,-0.08890897035598755,-0.28850674629211426,-4.5065281284450975e-08,-0.07625775039196014,-0.28850674629211426,-4.340311932082841e-08,-0.06277851015329361,-0.28850674629211426,-4.250681584494487e-08,-0.04814007505774498,-0.28850674629211426,-4.273521625464127e-08,-0.03201126307249069,-0.28850674629211426,-4.444716594775855e-08,-0.014060907065868378,-0.28850674629211426,-4.800149966399658e-08,-0.004036822356283665,-0.28850674629211426,-5.029583505233859e-08,-0.006377648562192917,-0.28850674629211426,-4.948843113083967e-08,-0.018752049654722214,-0.28850674629211426,-4.638466677420183e-08,-0.038828689604997635,-0.28850674629211426,-4.178991730441339e-08,-0.06427623331546783,-0.28850674629211426,-3.6509554490748997e-08,-0.09276334196329117,-0.28850674629211426,-3.1348957207910644e-08,-0.12195868790149689,-0.28850674629211426,-2.7113500777886657e-08,-0.14953091740608215,-0.28850674629211426,-2.4608560522665357e-08,-0.1731487214565277,-0.28850674629211426,-2.4639511764235067e-08,-0.19048073887825012,-0.28850674629211426,-2.801172982458411e-08,-0.19919563829898834,-0.28850674629211426,-3.5530590025700803e-08,-0.19696210324764252,-0.28850674629211426,-4.800149966399658e-08,-0.19482965767383575,-0.2913719713687897,-5.574918660045114e-08,-0.19784989953041077,-0.2992934584617615,-6.089265980335767e-08,-0.2047615796327591,-0.3112599551677704,-6.387605822055775e-08,-0.21430346369743347,-0.32626020908355713,-6.514350303632455e-08,-0.22521430253982544,-0.3432829976081848,-6.513913319849962e-08,-0.23623284697532654,-0.3613170385360718,-6.430707344406983e-08,-0.2460978776216507,-0.37935107946395874,-6.309145561544938e-08,-0.25354814529418945,-0.3963738679885864,-6.193641155505247e-08,-0.25732240080833435,-0.41137412190437317,-6.128607310529333e-08,-0.25615939497947693,-0.4233406186103821,-6.158457210858614e-08,-0.24879789352416992,-0.4312621057033539,-6.327603330191778e-08,-0.23397661745548248,-0.4341273307800293,-6.680460984398451e-08,-0.21804772317409515,-0.4341273307800293,-6.991021450630797e-08,-0.20396067202091217,-0.4341273307800293,-7.124160106286581e-08,-0.1913139671087265,-0.4341273307800293,-7.116164368881073e-08,-0.17970611155033112,-0.4341273307800293,-7.003320945386804e-08,-0.1687355935573578,-0.4341273307800293,-6.821916542776307e-08,-0.15800093114376068,-0.4341273307800293,-6.608237868022115e-08,-0.14710059762001038,-0.4341273307800293,-6.398571628096761e-08,-0.13563311100006104,-0.4341273307800293,-6.229204529972776e-08,-0.12319696694612503,-0.4341273307800293,-6.136423280622694e-08,-0.10939066112041473,-0.4341273307800293,-6.156514587019046e-08,-0.09381269663572311,-0.4341273307800293,-6.325765156134366e-08,-0.07606159895658493,-0.4341273307800293,-6.680460984398451e-08,-0.06475751847028732,-0.4341273307800293,-6.942381247654339e-08,-0.06369362771511078,-0.4341273307800293,-6.947544051172372e-08,-0.07119150459766388,-0.4341273307800293,-6.75915217129841e-08,-0.0855727344751358,-0.4341273307800293,-6.440408384378316e-08,-0.10515889525413513,-0.4341273307800293,-6.054514756215212e-08,-0.12827156484127045,-0.4341273307800293,-5.664674773697698e-08,-0.15323232114315033,-0.4341273307800293,-5.3340905026288965e-08,-0.17836274206638336,-0.4341273307800293,-5.12596471935467e-08,-0.20198440551757812,-0.4341273307800293,-5.1035002002208785e-08,-0.2224189043045044,-0.4341273307800293,-5.3298997215733834e-08,-0.23798780143260956,-0.4341273307800293,-5.86836534921531e-08,-0.24701255559921265,-0.4341273307800293,-6.782099859492519e-08,-0.2539121210575104,-0.4371475875377655,-8.04970596846033e-08,-0.26046326756477356,-0.4454977214336395,-8.89215812094335e-08,-0.2663036286830902,-0.4581117331981659,-9.377100695928675e-08,-0.27107080817222595,-0.4739236831665039,-9.572176651317932e-08,-0.2744024097919464,-0.4918675720691681,-9.545030366098217e-08,-0.2759360074996948,-0.5108774304389954,-9.363305508713893e-08,-0.2753092348575592,-0.529887318611145,-9.094646458152056e-08,-0.2721596956253052,-0.5478311777114868,-8.806696172314332e-08,-0.26612499356269836,-0.5636430978775024,-8.567099030187819e-08,-0.2568427324295044,-0.5762571096420288,-8.443498700216878e-08,-0.2439505159854889,-0.5846072435379028,-8.503538850845871e-08,-0.22708599269390106,-0.5876275300979614,-8.814868834861045e-08,-0.20946085453033447,-0.5876275300979614,-9.151653301842089e-08,-0.19068416953086853,-0.5876275300979614,-9.354057084465239e-08,-0.17095312476158142,-0.5876275300979614,-9.444255510970834e-08,-0.15046489238739014,-0.5876275300979614,-9.444423909599209e-08,-0.12941664457321167,-0.5876275300979614,-9.376736898047966e-08,-0.1080055683851242,-0.5876275300979614,-9.263369804557442e-08,-0.08642883598804474,-0.5876275300979614,-9.126497957367974e-08,-0.06488362699747086,-0.5876275300979614,-8.988295974177163e-08,-0.04356711357831955,-0.5876275300979614,-8.870939183225346e-08,-0.02267647534608841,-0.5876275300979614,-8.796602202210124e-08,-0.002408888190984726,-0.5876275300979614,-8.787460359371835e-08,0.017038479447364807,-0.5876275300979614,-8.865687561865343e-08,0.07119033485651016,-0.584482729434967,-9.116030241784756e-08,0.11354601383209229,-0.5757883191108704,-9.08027715240678e-08,0.14502128958702087,-0.5626541972160339,-8.812352803033718e-08,0.16653193533420563,-0.5461903214454651,-8.366182413510614e-08,0.17899370193481445,-0.5275065898895264,-7.795691203682509e-08,0.18332238495349884,-0.5077129602432251,-7.154804393394443e-08,0.1804337352514267,-0.48791930079460144,-6.497446491948722e-08,0.17124353349208832,-0.4692355692386627,-5.877542719190387e-08,0.1566675305366516,-0.45277169346809387,-5.3490182949644804e-08,0.13762152194976807,-0.43963760137557983,-4.965798083844675e-08,0.11502125859260559,-0.43094319105148315,-4.781807305676011e-08,0.08978265523910522,-0.42779839038848877,-4.8509686934039564e-08,0.061550673097372055,-0.42505770921707153,-5.063659713755442e-08,0.048244915902614594,-0.4174804985523224,-5.128677216248434e-08,0.04739967733621597,-0.40603408217430115,-5.07825994588984e-08,0.05654924362897873,-0.39168575406074524,-4.944646647686568e-08,0.0732279121875763,-0.3754028081893921,-4.7600760666455244e-08,0.0949699655175209,-0.3581525683403015,-4.556786947773617e-08,0.1193096935749054,-0.34090232849121094,-4.367018036077752e-08,0.1437813937664032,-0.3246193826198578,-4.223008076564838e-08,0.16591934859752655,-0.3102710545063019,-4.156995458970414e-08,0.1832578480243683,-0.29882463812828064,-4.2012192835727546e-08,0.19333119690418243,-0.2912474274635315,-4.3879179401074e-08,0.19367367029190063,-0.28850674629211426,-4.7493305288526244e-08,0.1751009225845337,-0.2913719713687897,-6.005949870768745e-08,0.15413972735404968,-0.2992934584617615,-6.89029562295218e-08,0.13197468221187592,-0.3112599551677704,-7.454515582594468e-08,0.1097903698682785,-0.32626020908355713,-7.750757902158512e-08,0.08877138793468475,-0.3432829976081848,-7.831170734107218e-08,0.07010233402252197,-0.3613170385360718,-7.747902230903492e-08,0.05496779829263687,-0.37935107946395874,-7.553100545010238e-08,0.04455237463116646,-0.3963738679885864,-7.298913828890363e-08,0.04004065692424774,-0.41137412190437317,-7.037490235006771e-08,0.04261723905801773,-0.4233406186103821,-6.820977205279632e-08,0.053466714918613434,-0.4312621057033539,-6.701523602714587e-08,0.07377374172210693,-0.4341273307800293,-6.731280421945485e-08,0.12663765251636505,-0.4371475875377655,-6.987001199831866e-08,0.1592206060886383,-0.4454977214336395,-7.154962133881781e-08,0.17482656240463257,-0.4581117331981659,-7.25701312376259e-08,0.1767594814300537,-0.4739236831665039,-7.315005490227122e-08,0.1683233082294464,-0.4918675720691681,-7.350789132942737e-08,0.15282200276851654,-0.5108774304389954,-7.386213951576792e-08,0.13355951011180878,-0.529887318611145,-7.443131266882119e-08,0.11383979022502899,-0.5478311777114868,-7.543391689068812e-08,0.09696679562330246,-0.5636430978775024,-7.70884511780423e-08,0.08624447882175446,-0.5762571096420288,-7.961342163298468e-08,0.08497679233551025,-0.5846072435379028,-8.32273343576162e-08,0.09646785259246826,-0.5876275300979614,-8.814868834861045e-08,0.11203163862228394,-0.5876275300979614,-9.12442885692144e-08,0.1307268738746643,-0.5876275300979614,-9.254803501335118e-08,0.1520131528377533,-0.5876275300979614,-9.242631904271548e-08,0.17535008490085602,-0.5876275300979614,-9.124553201900198e-08,0.2001972794532776,-0.5876275300979614,-8.937207951476012e-08,0.22601433098316193,-0.5876275300979614,-8.717235289168457e-08,0.25226086378097534,-0.5876275300979614,-8.501275061689739e-08,0.27839645743370056,-0.5876275300979614,-8.325967115752064e-08,0.3038807213306427,-0.5876275300979614,-8.227950587524901e-08,0.32817327976226807,-0.5876275300979614,-8.243865323720456e-08,0.3507337272167206,-0.5876275300979614,-8.410351171050934e-08,0.3710216283798218,-0.5876275300979614,-8.764049397314011e-08,0.3843643367290497,-0.5817420482635498,-9.000615364129771e-08,0.39130136370658875,-0.5654704570770264,-8.929183081818337e-08,0.39314699172973633,-0.5408899188041687,-8.612154545062367e-08,0.391215443611145,-0.510077714920044,-8.111931748544521e-08,0.38682103157043457,-0.4751110374927521,-7.490917397490193e-08,0.38127800822257996,-0.43806713819503784,-6.811513486582044e-08,0.37590062618255615,-0.4010232388973236,-6.136122010502731e-08,0.3720031976699829,-0.36605656147003174,-5.527144963934916e-08,0.3708999454975128,-0.335244357585907,-5.0469850521039916e-08,0.37390515208244324,-0.3106638193130493,-4.7580439144212505e-08,0.38233309984207153,-0.2943921983242035,-4.7227239008407196e-08,0.39749807119369507,-0.28850674629211426,-5.00342665077369e-08,0.4078868329524994,-0.28850674629211426,-5.30898738304586e-08,0.40665701031684875,-0.28850674629211426,-5.4283038508629033e-08,0.3961654603481293,-0.28850674629211426,-5.399427749352981e-08,0.37876901030540466,-0.28850674629211426,-5.260410063101517e-08,0.35682451725006104,-0.28850674629211426,-5.049302131965305e-08,0.3326888382434845,-0.28850674629211426,-4.804155295801138e-08,0.30871880054473877,-0.28850674629211426,-4.563020894465808e-08,0.28727129101753235,-0.28850674629211426,-4.363950267816108e-08,0.27070310711860657,-0.28850674629211426,-4.244994400437463e-08,0.2613711357116699,-0.28850674629211426,-4.2442049874580334e-08,0.26163220405578613,-0.28850674629211426,-4.3996330134632444e-08,0.2738432288169861,-0.28850674629211426,-4.749330884123992e-08,0.2913988530635834,-0.28850674629211426,-5.063890995415932e-08,0.3099832832813263,-0.28850674629211426,-5.2080878276683507e-08,0.3294239044189453,-0.28850674629211426,-5.216796594709194e-08,0.3495480716228485,-0.28850674629211426,-5.124892510366408e-08,0.37018316984176636,-0.28850674629211426,-4.967250788467936e-08,0.39115655422210693,-0.28850674629211426,-4.778746287570357e-08,0.4122956097126007,-0.28850674629211426,-4.5942542215016147e-08,0.43342769145965576,-0.28850674629211426,-4.448649448818287e-08,0.4543801546096802,-0.28850674629211426,-4.376807538619687e-08,0.4749803841114044,-0.28850674629211426,-4.413602994191024e-08,0.4950557351112366,-0.28850674629211426,-4.5939113846316104e-08,0.5144335627555847,-0.28850674629211426,-4.952607923769392e-08]
var neonDatePoints=[-1.5191375017166138,0.8818995356559753,1.1282686074309822e-07,-1.416116714477539,0.8729772567749023,-0.10503463447093964,-1.3528797626495361,0.8483098149299622,-0.17361104488372803,-1.323164701461792,0.8110462427139282,-0.21093744039535522,-1.320709466934204,0.764335572719574,-0.22222216427326202,-1.3392521142959595,0.7113268375396729,-0.21267354488372803,-1.3725306987762451,0.6551690697669983,-0.18749991059303284,-1.4142831563949585,0.5990113019943237,-0.15190960466861725,-1.4582475423812866,0.5460025668144226,-0.11111095547676086,-1.4981619119644165,0.49929189682006836,-0.07031229138374329,-1.5277642011642456,0.4620283246040344,-0.03472195193171501,-1.540792465209961,0.43736088275909424,-0.009548265486955643,-1.5309847593307495,0.42843857407569885,-4.760104133083587e-08,-1.5217000246047974,0.42843857407569885,-4.736912373459745e-08,-1.5095155239105225,0.42843857407569885,-4.6727937075274895e-08,-1.4947515726089478,0.42843857407569885,-4.575933587602776e-08,-1.4777283668518066,0.42843857407569885,-4.454517466001562e-08,-1.4587661027908325,0.42843857407569885,-4.316730439768435e-08,-1.4381848573684692,0.42843857407569885,-4.170758316490719e-08,-1.4163048267364502,0.42843857407569885,-4.0247861932130036e-08,-1.3934463262557983,0.42843857407569885,-3.8869991669798765e-08,-1.3699294328689575,0.42843857407569885,-3.765583045378662e-08,-1.3460743427276611,0.42843857407569885,-3.668722925453949e-08,-1.3222013711929321,0.42843857407569885,-3.604604259521693e-08,-1.2986305952072144,0.42843857407569885,-3.5814124998978514e-08,-1.2896792888641357,0.42843857407569885,-3.562729844475143e-08,-1.2784168720245361,0.42843857407569885,-3.5110776508417985e-08,-1.2650457620620728,0.42843857407569885,-3.433050110857039e-08,-1.2497683763504028,0.42843857407569885,-3.33524070583735e-08,-1.2327873706817627,0.42843857407569885,-3.224243627641954e-08,-1.21430504322052,0.42843857407569885,-3.106652712858704e-08,-1.1945240497589111,0.42843857407569885,-2.989061798075454e-08,-1.1736468076705933,0.42843857407569885,-2.878064719880058e-08,-1.1518758535385132,0.42843857407569885,-2.7802554924960532e-08,-1.1294136047363281,0.42843857407569885,-2.7022279525112936e-08,-1.1064625978469849,0.42843857407569885,-2.6505759365136328e-08,-1.0832250118255615,0.42843857407569885,-2.6318936363622925e-08,-1.064600944519043,0.4333614408969879,-2.5809550052713348e-08,-1.0464398860931396,0.44697171449661255,-2.4401247245009472e-08,-1.0296705961227417,0.4675319194793701,-2.2273813016226995e-08,-1.0152217149734497,0.493304580450058,-1.960702888936794e-08,-1.0040220022201538,0.5225521922111511,-1.6580678163791163e-08,-0.9970001578330994,0.5535373091697693,-1.3374544138855526e-08,-0.9950848817825317,0.5845224261283875,-1.016841011391989e-08,-0.9992049336433411,0.613770067691803,-7.142058944253904e-09,-1.010288953781128,0.6395426988601685,-4.475274373305638e-09,-1.0292657613754272,0.660102903842926,-2.3478394783893464e-09,-1.0570639371871948,0.673713207244873,-9.3953755886389e-10,-1.0946123600006104,0.6786360740661621,-4.3014836137444945e-10,-1.1210671663284302,0.682635486125946,2.1407497996506208e-10,-1.1418715715408325,0.6936926245689392,1.995163145807055e-09,-1.1572777032852173,0.7103959918022156,4.6857429047975074e-09,-1.1675376892089844,0.7313340306282043,8.058441025582397e-09,-1.1729036569595337,0.7550951242446899,1.188588605316454e-08,-1.1736278533935547,0.7802677750587463,1.5940702979833077e-08,-1.1699622869491577,0.8054404258728027,1.9995521682858453e-08,-1.1621590852737427,0.8292015790939331,2.3822966710440596e-08,-1.1504703760147095,0.8501396179199219,2.7195666163493115e-08,-1.135148286819458,0.8668429851531982,2.988624814292962e-08,-1.1164449453353882,0.8779001235961914,3.166733719695003e-08,-1.0946123600006104,0.8818995356559753,3.23115543210406e-08,-1.0729784965515137,0.8779001235961914,3.1718442983219575e-08,-1.0544227361679077,0.8668429851531982,3.007867022120081e-08,-1.0391610860824585,0.8501396179199219,2.7601565477652912e-08,-1.027409315109253,0.8292015790939331,2.4496461747958165e-08,-1.019383430480957,0.8054404258728027,2.097269202749885e-08,-1.0152992010116577,0.7802677750587463,1.7239589311657255e-08,-1.015372633934021,0.7550951242446899,1.3506487483994079e-08,-1.0198196172714233,0.7313339710235596,9.982718651713185e-09,-1.0288560390472412,0.7103959321975708,6.877614922018438e-09,-1.0426979064941406,0.6936925649642944,4.4005097343813304e-09,-1.0615609884262085,0.6826354265213013,2.7607356400949357e-09,-1.0856612920761108,0.6786360740661621,2.167631407701265e-09,-1.1266708374023438,0.673713207244873,1.619321787771355e-09,-1.157404899597168,0.660102903842926,1.0340694966970432e-10,-1.1787558794021606,0.6395426988601685,-2.1865917965158133e-09,-1.1916162967681885,0.613770067691803,-5.057153806831138e-09,-1.1968785524368286,0.5845224261283875,-8.314757771188397e-09,-1.1954352855682373,0.5535373091697693,-1.1765882490522017e-08,-1.1881787776947021,0.5225521922111511,-1.5217008098034057e-08,-1.1760016679763794,0.493304580450058,-1.8474612062391316e-08,-1.1597963571548462,0.4675319194793701,-2.134517274043901e-08,-1.1404552459716797,0.44697171449661255,-2.3635170265379202e-08,-1.1188709735870361,0.4333614408969879,-2.5151084770413945e-08,-1.0959358215332031,0.42843857407569885,-2.5699399941458978e-08,-1.0879631042480469,0.42843857407569885,-2.558189926560317e-08,-1.0794060230255127,0.42843857407569885,-2.525704267952733e-08,-1.0701217651367188,0.42843857407569885,-2.476630278636094e-08,-1.0599675178527832,0.42843857407569885,-2.4151150412876632e-08,-1.0488002300262451,0.42843857407569885,-2.345305638584705e-08,-1.0364770889282227,0.42843857407569885,-2.2713491532044827e-08,-1.022855281829834,0.42843857407569885,-2.1973926678242606e-08,-1.0077918767929077,0.42843857407569885,-2.1275832651213022e-08,-0.9911439418792725,0.42843857407569885,-2.0660680277728716e-08,-0.9727686047554016,0.42843857407569885,-2.0169940384562324e-08,-0.9525229930877686,0.42843857407569885,-1.9845083798486485e-08,-0.9302642345428467,0.42843857407569885,-1.9727579569916998e-08,-0.9210909605026245,0.43736082315444946,-1.8243200727852127e-08,-0.9092147946357727,0.46202826499938965,-1.4139329707063553e-08,-0.8949165940284729,0.4992918372154236,-7.939863877481912e-09,-0.878477156162262,0.5460025072097778,-1.6870327357310089e-10,-0.8601773381233215,0.599011242389679,8.650254734732243e-09,-0.8402979373931885,0.6551690101623535,1.7993111001146644e-08,-0.8191198110580444,0.7113267779350281,2.7335968155739465e-08,-0.7969237565994263,0.7643355131149292,3.615492616404481e-08,-0.7739906907081604,0.8110461831092834,4.39260858797752e-08,-0.7506013512611389,0.8483097553253174,5.0125549933e-08,-0.7270365953445435,0.8729771971702576,5.4229420953788576e-08,-0.7035772800445557,0.8818995356559753,5.5713805124923965e-08,-0.7080296874046326,0.8729772567749023,5.4244555514060266e-08,-0.7227107882499695,0.8483098149299622,5.018250703869853e-08,-0.7452106475830078,0.8110462427139282,4.404622444553752e-08,-0.7731194496154785,0.764335572719574,3.635426182313495e-08,-0.8040273785591125,0.7113268375396729,2.7625182141832738e-08,-0.8355244994163513,0.6551690697669983,1.837754481925913e-08,-0.8652009963989258,0.5990113019943237,9.129907496685519e-09,-0.8906469941139221,0.5460025668144226,4.008295917401483e-10,-0.9094526171684265,0.49929189682006836,-7.2911294779487434e-09,-0.9192079901695251,0.4620283246040344,-1.3427410294752917e-08,-0.9175032377243042,0.43736088275909424,-1.7489453441044134e-08,-0.9019284248352051,0.42843857407569885,-1.8958729697260424e-08,-0.890316903591156,0.4277709126472473,-1.8696226788961212e-08,-0.8717836737632751,0.42601072788238525,-1.795897119905021e-08,-0.8475960493087769,0.4235222041606903,-1.682233907729369e-08,-0.8190213441848755,0.4206695258617401,-1.53617101261716e-08,-0.7873268723487854,0.4178168773651123,-1.3652460495450214e-08,-0.753779947757721,0.41532841324806213,-1.1769968999431057e-08,-0.7196478843688965,0.4135683476924896,-9.789612676058823e-09,-0.6861979961395264,0.41290083527565,-7.78677033963504e-09,-0.654697597026825,0.41369006037712097,-5.836819028104401e-09,-0.6264140009880066,0.4163002073764801,-4.0151366675900135e-09,-0.6026144623756409,0.42109546065330505,-2.397101628304199e-09,-0.584566593170166,0.42844000458717346,-1.058090504102438e-09,-0.5027077198028564,0.4815155863761902,5.986992679396508e-09,-0.4514284133911133,0.5245628952980042,1.1532760524346486e-08,-0.42595094442367554,0.5588498711585999,1.5779960449435748e-08,-0.4214975833892822,0.5856444835662842,1.8929339873352546e-08,-0.43329060077667236,0.606214702129364,2.1181644882517503e-08,-0.45655226707458496,0.6218284368515015,2.273762333970808e-08,-0.48650482296943665,0.6337537169456482,2.379801955498806e-08,-0.5183705687522888,0.6432584524154663,2.4563583167491743e-08,-0.5473717451095581,0.6516106724739075,2.5235060263639753e-08,-0.5687306523323059,0.6600782871246338,2.601319692985271e-08,-0.5776695013046265,0.6699292659759521,2.709874102890808e-08,-0.5694105625152588,0.6824315786361694,2.8692452858081197e-08,-0.49414926767349243,0.7458586096763611,3.7306325140207264e-08,-0.4485599398612976,0.795636773109436,4.4248501751553704e-08,-0.4280618131160736,0.8333163857460022,4.969485090100534e-08,-0.42807409167289734,0.8604477047920227,5.382123902109015e-08,-0.4440160095691681,0.8785810470581055,5.680353254433612e-08,-0.47130680084228516,0.8892667293548584,5.8817597903271235e-08,-0.5053656697273254,0.8940550684928894,6.003930508313715e-08,-0.541611909866333,0.8944963812828064,6.064451696374817e-08,-0.57546466588974,0.8921409249305725,6.080909997763229e-08,-0.6023432016372681,0.8885390162467957,6.070892055731747e-08,-0.6176667213439941,0.8852409720420837,6.051984513533171e-08,-0.6168545484542847,0.883797287940979,6.041773303877562e-08,-0.581380307674408,0.8838995695114136,6.04143011173619e-08,-0.5541514158248901,0.8841832876205444,6.040433220277919e-08,-0.5339030623435974,0.8846138715744019,6.038832367494251e-08,-0.5193703174591064,0.8851567506790161,6.036678001919427e-08,-0.5092882513999939,0.8857772946357727,6.034019151002212e-08,-0.502392053604126,0.8864408731460571,6.030905552734112e-08,-0.49741676449775696,0.8871129155158997,6.027386234563892e-08,-0.49309754371643066,0.8877587914466858,6.023511645025792e-08,-0.48816946148872375,0.8883439302444458,6.019331522111315e-08,-0.48136764764785767,0.8888337016105652,6.014894893269229e-08,-0.47142723202705383,0.8891935348510742,6.010252207033773e-08,-0.45708325505256653,0.889388918876648,6.005452490853713e-08,-0.4319133758544922,0.885405421257019,5.9397201823685464e-08,-0.4199841022491455,0.8740474581718445,5.774512601419701e-08,-0.41917261481285095,0.8567866683006287,5.529880198196224e-08,-0.4273560345172882,0.835094690322876,5.225873067615794e-08,-0.44241151213645935,0.8104432225227356,4.8825413045960886e-08,-0.46221619844436646,0.7843039035797119,4.519935359326155e-08,-0.4846472442150116,0.7581483721733093,4.158105326723671e-08,-0.5075817704200745,0.733448326587677,3.817101656977684e-08,-0.5288969874382019,0.7116754055023193,3.5169740897345037e-08,-0.5464699864387512,0.6943012475967407,3.277773430454545e-08,-0.5581778883934021,0.6827975511550903,3.119549418784118e-08,-0.561897873878479,0.6786360740661621,3.062353215455005e-08,-0.5011032223701477,0.673713207244873,3.0003249662513554e-08,-0.4572974145412445,0.6601030230522156,2.8288354769756552e-08,-0.42870837450027466,0.6395429372787476,2.569776746952357e-08,-0.4135640561580658,0.6137704253196716,2.245041130777281e-08,-0.4100923538208008,0.5845229625701904,1.876520983046248e-08,-0.41652119159698486,0.5535380244255066,1.4861085695372367e-08,-0.4310784935951233,0.5225530862808228,1.0956961560282252e-08,-0.4519921839237213,0.49330562353134155,7.271759638882713e-09,-0.47749021649360657,0.4675331115722656,4.024403033042745e-09,-0.5058004856109619,0.4469730257987976,1.4338146225867376e-09,-0.535150945186615,0.43336281180381775,-2.810828236832208e-10,-0.5637694597244263,0.42844000458717346,-9.013554347347963e-10,-0.5752200484275818,0.4284399747848511,-6.875029434638691e-10,-0.5677804350852966,0.4284398853778839,-9.62636637069636e-11,-0.5452477931976318,0.42843976616859436,7.968850024298035e-10,-0.5114193558692932,0.4284396171569824,1.9164656528403157e-09,-0.47009241580963135,0.4284394383430481,3.187001107463061e-09,-0.42506420612335205,0.42843925952911377,4.533013964191923e-09,-0.38013193011283875,0.42843908071517944,5.87902704296539e-09,-0.33909285068511963,0.4284389019012451,7.1495627196327405e-09,-0.3057442307472229,0.4284387528896332,8.269143592087858e-09,-0.283883273601532,0.42843863368034363,9.162292258224625e-09,-0.2773072421550751,0.42843854427337646,9.753531315936925e-09,-0.28981345891952515,0.4284385144710541,9.967383363118643e-09,-0.310346782207489,0.4373607933521271,1.1288731727177037e-08,-0.33028408885002136,0.46202823519706726,1.494187173989303e-08,-0.34862586855888367,0.4992918074131012,2.046044578207784e-08,-0.3643725514411926,0.5460025072097778,2.7378094458185842e-08,-0.3765246272087097,0.599011242389679,3.522846014902825e-08,-0.384082555770874,0.6551690101623535,4.3545185235416284e-08,-0.386046826839447,0.7113268375396729,5.1861910321804316e-08,-0.3814178705215454,0.7643356323242188,5.971227778900356e-08,-0.36919617652893066,0.8110463619232178,6.662993001782525e-08,-0.34838220477104187,0.8483099341392517,7.214850228365322e-08,-0.3179764151573181,0.8729773759841919,7.580164407272605e-08,-0.27697932720184326,0.8818995356559753,7.712297644957289e-08,-0.23559467494487762,0.8729772567749023,7.580779737281773e-08,-0.20798179507255554,0.8483098149299622,7.217170860940314e-08,-0.1923341453075409,0.8110462427139282,6.667889351774647e-08,-0.18684521317481995,0.764335572719574,5.979353545626509e-08,-0.18970847129821777,0.7113268375396729,5.197981778337635e-08,-0.19911740720272064,0.6551690697669983,4.370191675207025e-08,-0.21326547861099243,0.5990113019943237,3.5424015720764146e-08,-0.2303461730480194,0.5460025072097778,2.7610294495161725e-08,-0.24855294823646545,0.4992918074131012,2.072493643368034e-08,-0.26607927680015564,0.4620282053947449,1.5232121342023675e-08,-0.2811186611652374,0.4373607337474823,1.1596031690430664e-08,-0.2918645441532135,0.4284385144710541,1.0280864159994962e-08,-0.2950822412967682,0.4284385144710541,1.0566980179760321e-08,-0.2900359034538269,0.4284385144710541,1.1358006979378388e-08,-0.27786099910736084,0.4284385144710541,1.2552962225242936e-08,-0.2596929669380188,0.4284385144710541,1.4050863583747741e-08,-0.23666726052761078,0.4284385144710541,1.5750728721286578e-08,-0.20991933345794678,0.4284385144710541,1.755157619243164e-08,-0.1805846393108368,0.4284385144710541,1.93524236635767e-08,-0.14979863166809082,0.4284385144710541,2.1052288801115537e-08,-0.11869676411151886,0.4284385144710541,2.2550191047798762e-08,-0.08841449022293091,0.4284385144710541,2.374514629366331e-08,-0.06008726730942726,0.4284385144710541,2.4536173981459797e-08,-0.03485056757926941,0.4284385144710541,2.4822290001225156e-08,-0.02645784616470337,0.4309362769126892,2.5395562985863762e-08,-0.01673967018723488,0.43784183263778687,2.6980494283179723e-08,-0.00570138543844223,0.448273628950119,2.9374753296451672e-08,0.006651664152741432,0.46135011315345764,3.23760076526014e-08,0.020314134657382965,0.4761897027492523,3.5781923202193866e-08,0.035280682146549225,0.491910845041275,3.9390172901221376e-08,0.05154596269130707,0.5076320171356201,4.299842260024889e-08,0.0691046267747879,0.5224716067314148,4.640433814984135e-08,0.08795133233070374,0.5355480909347534,4.940559250599108e-08,0.10808073729276657,0.5459798574447632,5.179985151926303e-08,0.12948749959468842,0.5528854131698608,5.338478459293583e-08,0.1521662473678589,0.5553831458091736,5.395805047214708e-08,0.15544337034225464,0.5618076324462891,5.47726592969866e-08,0.15100237727165222,0.5795695185661316,5.702481331582021e-08,0.14061930775642395,0.6064013242721558,6.042700562147729e-08,0.12607020139694214,0.6400355100631714,6.46917186486462e-08,0.1091311052441597,0.6782046556472778,6.953145259558369e-08,0.09157807379961014,0.7186412811279297,7.465869344969178e-08,0.07518714666366577,0.7590779066085815,7.978593430379988e-08,0.06173437088727951,0.797247052192688,8.462566825073736e-08,0.052995797246694565,0.8308812975883484,8.889038838333363e-08,0.05074746906757355,0.8577131032943726,9.229258068899071e-08,0.05676542967557907,0.8754749894142151,9.4544738260538e-08,0.07282578945159912,0.8818995356559753,9.535933997995016e-08,0.07988041639328003,0.8754750490188599,9.455692406845628e-08,0.08589918166399002,0.8577131628990173,9.233847464429346e-08,0.09134899824857712,0.8308813571929932,8.898719272565359e-08,0.09669678658246994,0.7972471714019775,8.478629354158329e-08,0.1024094671010971,0.7590780258178711,8.001897811027447e-08,0.10895396023988724,0.7186414003372192,7.496846166077376e-08,0.11679718643426895,0.6782047748565674,6.991794521127304e-08,0.12640605866909027,0.6400356292724609,6.515062977996422e-08,0.1382475048303604,0.6064013838768005,6.094973059589393e-08,0.152788445353508,0.5795695781707764,5.7598452229967734e-08,0.17049579322338104,0.5618076920509338,5.537999925309123e-08,0.19183647632598877,0.5553831458091736,5.457757978888367e-08,0.19253520667552948,0.5528854131698608,5.397125946160486e-08,0.18098178505897522,0.5459798574447632,5.2294961250254346e-08,0.15988638997077942,0.5355480909347534,4.9762679310561e-08,0.1319591999053955,0.5224716067314148,4.658841135096736e-08,0.09991038590669632,0.5076320171356201,4.298615152720231e-08,0.06645012646913528,0.4919108748435974,3.916989754770839e-08,0.03428860008716583,0.4761897325515747,3.5353643568214466e-08,0.006135981529951096,0.46135014295578003,3.175138374444941e-08,-0.015297552570700645,0.4482736587524414,2.8577115784855778e-08,-0.02730182558298111,0.43784186244010925,2.604483384516243e-08,-0.027166660875082016,0.4309363067150116,2.4368535633811916e-08,-0.01218181848526001,0.4284385144710541,2.376221175381943e-08,-0.0004438962787389755,0.4284385144710541,2.41715589766045e-08,0.01852278970181942,0.4284385144710541,2.5303284800770598e-08,0.04353223368525505,0.4284385144710541,2.7012912795498778e-08,0.07339842617511749,0.4284385144710541,2.91559665299701e-08,0.10693536698818207,0.4284385144710541,3.1587973126079305e-08,0.14295704662799835,0.4284385144710541,3.416445437665061e-08,0.18027746677398682,0.4284385144710541,3.6740935627221916e-08,0.21771061420440674,0.4284385144710541,3.917293867061744e-08,0.2540704607963562,0.4284385144710541,4.1315992405088764e-08,0.28817105293273926,0.4284385144710541,4.3025618623460105e-08,0.3188263475894928,0.4284385144710541,4.415734267126936e-08,0.34485024213790894,0.4284385144710541,4.4566689894054434e-08,0.34988564252853394,0.4373607933521271,4.5789040115096213e-08,0.3501945734024048,0.46202823519706726,4.9168480842354256e-08,0.34676575660705566,0.4992918074131012,5.42735918429571e-08,0.34058791399002075,0.5460025072097778,6.067295998946065e-08,0.33264976739883423,0.599011242389679,6.793516149627976e-08,0.32394006848335266,0.6551690101623535,7.562878323597033e-08,0.31544750928878784,0.7113268375396729,8.33224049756609e-08,0.30816081166267395,0.7643356323242188,9.058460648248001e-08,0.30306869745254517,0.8110463619232178,9.698397462898356e-08,0.30115991830825806,0.8483099341392517,1.0208908918230009e-07,0.3034231662750244,0.8729773759841919,1.0546852990955813e-07,0.3108471632003784,0.8818995356559753,1.0669087657788623e-07,0.3168982267379761,0.8729772567749023,1.0548967566137435e-07,0.3201424479484558,0.8483098149299622,1.02168705495842e-07,0.321400910615921,0.8110462427139282,9.715192561543518e-08,0.3214947581291199,0.764335572719574,9.086328134344512e-08,0.32124510407447815,0.7113268375396729,8.372673221401783e-08,0.32147306203842163,0.6551690697669983,7.616623065587191e-08,0.3229997456073761,0.5990113019943237,6.8605729097726e-08,0.32664626836776733,0.5460025072097778,6.14691799682987e-08,0.3332337737083435,0.4992918074131012,5.518053924902233e-08,0.343583345413208,0.4620282053947449,5.016375581590182e-08,0.358516126871109,0.4373607337474823,4.684278565036948e-08,0.3788532614707947,0.4284385144710541,4.5641591839284956e-08,0.386508971452713,0.4284385144710541,4.597588443289169e-08,0.3941895663738251,0.4284385144710541,4.690010158014957e-08,0.4021497964859009,0.4284385144710541,4.82962612124993e-08,0.41064444184303284,0.4284385144710541,5.004637770866793e-08,0.41992828249931335,0.4284385144710541,5.2032461894668813e-08,0.43025606870651245,0.4284385144710541,5.413653170194266e-08,0.44188258051872253,0.4284385144710541,5.6240601509216503e-08,0.455062597990036,0.4284385144710541,5.8226685695217384e-08,0.4700509011745453,0.4284385144710541,5.997679863867234e-08,0.4871022403240204,0.4284385144710541,6.137295827102207e-08,0.5064713954925537,0.4284385144710541,6.229717541827995e-08,0.5284131765365601,0.4284385144710541,6.263147156460036e-08,0.5349958539009094,0.4373607933521271,6.378184735922332e-08,0.5396026372909546,0.46202823519706726,6.69623076987591e-08,0.542706310749054,0.4992918074131012,7.176683425313968e-08,0.5447796583175659,0.5460025072097778,7.7789408692297e-08,0.5462954044342041,0.599011242389679,8.462401268616304e-08,0.5477263331413269,0.6551690101623535,9.186463501009712e-08,0.549545168876648,0.7113268375396729,9.91052573340312e-08,0.5522246956825256,0.7643356323242188,1.0593986132789723e-07,0.5562376379966736,0.8110463619232178,1.1196243576705456e-07,0.5620567798614502,0.8483099341392517,1.1676696232143513e-07,0.5701549053192139,0.8729773759841919,1.1994742976639827e-07,0.5810047388076782,0.8818995356559753,1.2109779845559387e-07,0.5855749845504761,0.8729772567749023,1.2001058280475263e-07,0.5847251415252686,0.8483098149299622,1.1700473123710253e-07,0.5797989964485168,0.8110462427139282,1.1246397946251818e-07,0.5721403360366821,0.764335572719574,1.0677205608544682e-07,0.5630928874015808,0.7113268375396729,1.0031268260490833e-07,0.5540003776550293,0.6551690697669983,9.34695805199226e-08,0.5462066531181335,0.5990113019943237,8.662647843493687e-08,0.5410553812980652,0.5460025072097778,8.016709784897103e-08,0.5398903489112854,0.4992918074131012,7.447517447189966e-08,0.5440553426742554,0.4620282053947449,6.993442269731531e-08,0.5548940896987915,0.4373607337474823,6.692857112966522e-08,0.5737504959106445,0.4284385144710541,6.584135547882397e-08,0.5824108123779297,0.4284385144710541,6.616962622274514e-08,0.5928688645362854,0.4284385144710541,6.707719535370416e-08,0.6050248146057129,0.4284385144710541,6.844820177320798e-08,0.6187789440155029,0.4284385144710541,7.016679148819094e-08,0.6340314149856567,0.4284385144710541,7.211709629473262e-08,0.6506823897361755,0.4284385144710541,7.418326219976734e-08,0.6686320900917053,0.4284385144710541,7.624942810480206e-08,0.6877807378768921,0.4284385144710541,7.819973291134374e-08,0.7080284953117371,0.4284385144710541,7.99183226263267e-08,0.7292755842208862,0.4284385144710541,8.128932904583053e-08,0.7514222264289856,0.4284385144710541,8.219689817678955e-08,0.7743686437606812,0.4284385144710541,8.252517602613807e-08,0.7783010601997375,0.4373607933521271,8.368157722316028e-08,0.7756878733634949,0.46202823519706726,8.687868557899492e-08,0.7680979371070862,0.4992918074131012,9.170835824079404e-08,0.7571001052856445,0.5460025072097778,9.776245946113704e-08,0.7442632913589478,0.599011242389679,1.0463284638717596e-07,0.7311563491821289,0.6551690101623535,1.1191136906063548e-07,0.719348132610321,0.7113268375396729,1.19189891734095e-07,0.7104074954986572,0.7643356323242188,1.2606027155470656e-07,0.7059033513069153,0.8110463619232178,1.321143656696222e-07,0.7074045538902283,0.8483099341392517,1.3694403833142132e-07,0.7164799571037292,0.8729773759841919,1.4014115379268333e-07,0.7346984148025513,0.8818995356559753,1.412975620951329e-07,0.7455442547798157,0.8729772567749023,1.4041523854757543e-07,0.7620446681976318,0.8483098149299622,1.379758600705827e-07,0.7833284735679626,0.8110462427139282,1.3429084333438368e-07,0.808524489402771,0.764335572719574,1.2967159079835255e-07,0.8367615938186646,0.7113268375396729,1.2442951913271827e-07,0.8671685457229614,0.6551690697669983,1.188760379022824e-07,0.8988742232322693,0.5990113019943237,1.1332255667184654e-07,0.9310075044631958,0.5460025072097778,1.0808048500621226e-07,0.9626972079277039,0.4992918074131012,1.0346123247018113e-07,0.9930721521377563,0.4620282053947449,9.977620862855474e-08,1.0212610960006714,0.4373607337474823,9.733682304613467e-08,1.0463930368423462,0.4284385144710541,9.645448528772249e-08,1.0504369735717773,0.4373607933521271,9.765304298525734e-08,1.048132061958313,0.46202823519706726,1.0096669456061136e-07,1.0410078763961792,0.4992918074131012,1.0597242550147712e-07,1.0305938720703125,0.5460025072097778,1.1224721419011985e-07,1.0184195041656494,0.599011242389679,1.1936803900880477e-07,1.006014347076416,0.6551690101623535,1.2691188544522447e-07,0.9949079751968384,0.7113268375396729,1.3445573188164417e-07,0.986629843711853,0.7643356323242188,1.4157656380575645e-07,0.9827094674110413,0.8110463619232178,1.4785135249439918e-07,0.9846763610839844,0.8483099341392517,1.5285708343526494e-07,0.9940600395202637,0.8729773759841919,1.561707279051916e-07,1.0123900175094604,0.8818995356559753,1.5736927139187173e-07,1.0204482078552246,0.8818995356559753,1.573992420844661e-07,1.0292415618896484,0.8818995356559753,1.57482077156601e-07,1.0388827323913574,0.8818995356559753,1.5760721794322308e-07,1.0494844913482666,0.8818995356559753,1.577640915684242e-07,1.0611594915390015,0.8818995356559753,1.5794211094544153e-07,1.074020504951477,0.8818995356559753,1.5813070319836697e-07,1.0881803035736084,0.8818995356559753,1.5831929545129242e-07,1.103751540184021,0.8818995356559753,1.5849731482830975e-07,1.1208469867706299,0.8818995356559753,1.5865418845351087e-07,1.1395792961120605,0.8818995356559753,1.5877932924013294e-07,1.160061240196228,0.8818995356559753,1.5886216431226785e-07,1.1824052333831787,0.8818995356559753,1.588921350048622e-07,1.1924705505371094,0.8818995356559753,1.5892210569745657e-07,1.2068129777908325,0.8818995356559753,1.5900494076959149e-07,1.224836826324463,0.8818995356559753,1.5913008155621355e-07,1.2459464073181152,0.8818995356559753,1.5928695518141467e-07,1.2695461511611938,0.8818995356559753,1.59464974558432e-07,1.295040249824524,0.8818995356559753,1.5965356681135745e-07,1.3218331336975098,0.8818995356559753,1.598421590642829e-07,1.3493289947509766,0.8818995356559753,1.6002017844130023e-07,1.3769322633743286,0.8818995356559753,1.6017705206650135e-07,1.4040472507476807,0.8818995356559753,1.6030219285312342e-07,1.4300782680511475,0.8818995356559753,1.6038502792525833e-07,1.4544296264648438,0.8818995356559753,1.604149986178527e-07,1.4542362689971924,0.8818995356559753,1.6035507144351868e-07,1.4402165412902832,0.8818995356559753,1.6018938708839414e-07,1.4153954982757568,0.8818995356559753,1.5993910551515e-07,1.382798194885254,0.8818995356559753,1.596253724756025e-07,1.3454495668411255,0.8818995356559753,1.5926933372156782e-07,1.3063745498657227,0.8818995356559753,1.588921350048622e-07,1.2685983180999756,0.8818995356559753,1.585149362881566e-07,1.2351458072662354,0.8818995356559753,1.5815889753412193e-07,1.2090420722961426,0.8818995356559753,1.5784516449457442e-07,1.193312168121338,0.8818995356559753,1.5759488292133028e-07,1.1909810304641724,0.8818995356559753,1.5742919856620574e-07,1.2050739526748657,0.8818995356559753,1.5736925718101702e-07,1.2100099325180054,0.8779001235961914,1.567999419194166e-07,1.2101713418960571,0.8668429851531982,1.5522596186201554e-07,1.206772804260254,0.8501396179199219,1.5284824428363208e-07,1.2010289430618286,0.8292015790939331,1.4986771645908448e-07,1.1941545009613037,0.8054404258728027,1.4648531987404567e-07,1.187364101409912,0.7802677750587463,1.4290199601418863e-07,1.1818723678588867,0.7550951242446899,1.3931867215433158e-07,1.17889404296875,0.7313339710235596,1.3593627556929277e-07,1.1796438694000244,0.7103959321975708,1.3295574774474517e-07,1.1853363513946533,0.6936925649642944,1.3057803016636171e-07,1.1971863508224487,0.6826354265213013,1.2900405010896066e-07,1.2164082527160645,0.6786360740661621,1.2843473484736023e-07,1.2239089012145996,0.6786360740661621,1.284647055399546e-07,1.2311607599258423,0.6786360740661621,1.285475406120895e-07,1.2384734153747559,0.6786360740661621,1.2867268139871157e-07,1.2461563348770142,0.6786360740661621,1.288295550239127e-07,1.254518985748291,0.6786360740661621,1.2900757440093003e-07,1.2638708353042603,0.6786360740661621,1.2919616665385547e-07,1.2745213508605957,0.6786360740661621,1.2938475890678092e-07,1.2867801189422607,0.6786360740661621,1.2956277828379825e-07,1.3009566068649292,0.6786360740661621,1.2971965190899937e-07,1.3173604011535645,0.6786360740661621,1.2984479269562144e-07,1.3363008499145508,0.6786360740661621,1.2992762776775635e-07,1.3580875396728516,0.6786360740661621,1.299575984603507e-07,1.3599013090133667,0.6786360740661621,1.2994262021948089e-07,1.3514307737350464,0.6786360740661621,1.2990119557798607e-07,1.3349924087524414,0.6786360740661621,1.2983862518467504e-07,1.3129029273986816,0.6786360740661621,1.2976019547750184e-07,1.2874789237976074,0.6786360740661621,1.296711786835658e-07,1.261036992073059,0.6786360740661621,1.2957687545167573e-07,1.2358938455581665,0.6786360740661621,1.2948257221978565e-07,1.21436607837677,0.6786360740661621,1.2939355542584963e-07,1.19877028465271,0.6786360740661621,1.2931512571867643e-07,1.1914230585098267,0.6786360740661621,1.292525553253654e-07,1.19464111328125,0.6786360740661621,1.2921113068387058e-07,1.2107410430908203,0.6786360740661621,1.2919616665385547e-07,1.2154539823532104,0.673713207244873,1.285369677361814e-07,1.2149988412857056,0.660102903842926,1.2671445404066617e-07,1.2106688022613525,0.6395426988601685,1.239612998915618e-07,1.203757405281067,0.6137700080871582,1.2051016540226556e-07,1.195557951927185,0.5845223665237427,1.1659371068617475e-07,1.187363862991333,0.5535372495651245,1.1244459585668665e-07,1.1804684400558472,0.5225521326065063,1.0829548102719855e-07,1.176165223121643,0.4933044910430908,1.0437902631110774e-07,1.1757475137710571,0.46753183007240295,1.009278918218115e-07,1.1805086135864258,0.4469716250896454,9.817474477813448e-08,1.191741943359375,0.43336135149002075,9.635223818804661e-08,1.2107410430908203,0.4284385144710541,9.569303216494518e-08,1.22125244140625,0.4284385144710541,9.573798109840936e-08,1.2368279695510864,0.4284385144710541,9.586224081203909e-08,1.2567147016525269,0.4284385144710541,9.604995199197219e-08,1.2801594734191895,0.4284385144710541,9.628525532434651e-08,1.3064091205596924,0.4284385144710541,9.655228438987251e-08,1.3347105979919434,0.4284385144710541,9.683517987468804e-08,1.3643107414245605,0.4284385144710541,9.711807535950356e-08,1.3944565057754517,0.4284385144710541,9.738510442502957e-08,1.4243948459625244,0.4284385144710541,9.762040775740388e-08,1.453372597694397,0.4284385144710541,9.780811893733699e-08,1.480636715888977,0.4284385144710541,9.793237865096671e-08,1.5054340362548828,0.4284385144710541,9.797733468985825e-08]
var neonDemojsPoints=[-1.856437087059021,-0.007703274488449097,-1.6026540095026576e-09,-1.793065071105957,0.0017426349222660065,-0.11553820222616196,-1.7441152334213257,0.027857797220349312,-0.1909722089767456,-1.7088066339492798,0.06730835884809494,-0.2320312112569809,-1.686358094215393,0.11676047742366791,-0.2444443702697754,-1.6759886741638184,0.17288029193878174,-0.23394085466861725,-1.676917314529419,0.2323339581489563,-0.20624984800815582,-1.6883630752563477,0.29178762435913086,-0.16710050404071808,-1.7095447778701782,0.3479074537754059,-0.12222200632095337,-1.7396814823150635,0.39735957980155945,-0.07734352350234985,-1.7779921293258667,0.436810165643692,-0.03819422051310539,-1.8236956596374512,0.46292534470558167,-0.010503271594643593,-1.8760110139846802,0.4723712205886841,6.879545821902866e-08,-1.8861078023910522,0.4629253149032593,5.757592802524414e-08,-1.8968193531036377,0.436810165643692,4.6675275200414035e-08,-1.907525658607483,0.39735960960388184,3.628981559700151e-08,-1.9176065921783447,0.34790748357772827,2.661587217289707e-08,-1.9264421463012695,0.29178765416145325,1.7849766109634402e-08,-1.9334123134613037,0.2323339879512787,1.0187816812390338e-08,-1.9378970861434937,0.17288030683994293,3.826344574520135e-09,-1.9392763376235962,0.11676047742366791,-1.0383303106209496e-09,-1.9369300603866577,0.06730835139751434,-4.20988754967766e-09,-1.930238127708435,0.027857769280672073,-5.4920064052055295e-09,-1.9185806512832642,0.0017425864934921265,-4.6883670279385115e-09,-1.9013375043869019,-0.007703274488449097,-1.6026469040753e-09,-1.8496860265731812,-0.007703274488449097,8.212582613964514e-09,-1.8044767379760742,-0.007703274488449097,1.4655697100351972e-08,-1.7653377056121826,-0.007703274488449097,1.820676409636235e-08,-1.731897234916687,-0.007703274488449097,1.934585291962776e-08,-1.703783392906189,-0.007703274488449097,1.855303111142348e-08,-1.6806244850158691,-0.007703274488449097,1.6308366213024783e-08,-1.662048578262329,-0.007703274488449097,1.3091925765706947e-08,-1.64768385887146,-0.007703274488449097,9.383777310745245e-09,-1.6371586322784424,-0.007703274488449097,5.663990165771793e-09,-1.630100965499878,-0.007703274488449097,2.4126316500172607e-09,-1.6261390447616577,-0.007703274488449097,1.0976974884613355e-10,-1.6249010562896729,-0.007703274488449097,-7.645724053872982e-10,-1.6245328187942505,0.0017426349222660065,5.21636178696383e-10,-1.6235148906707764,0.027857797220349312,4.077624460308016e-09,-1.6219772100448608,0.06730835884809494,9.449436788599996e-09,-1.6200495958328247,0.11676047742366791,1.618311706863551e-08,-1.6178621053695679,0.17288029193878174,2.3824709316500048e-08,-1.6155446767807007,0.2323339581489563,3.1920258436457516e-08,-1.6132272481918335,0.29178762435913086,4.0015805780058145e-08,-1.6110397577285767,0.3479074537754059,4.765739802792268e-08,-1.6091121435165405,0.39735957980155945,5.4391080084315035e-08,-1.607574462890625,0.436810165643692,5.976288974807176e-08,-1.6065565347671509,0.46292534470558167,6.331887902888411e-08,-1.606188416481018,0.4723712205886841,6.460508927830233e-08,-1.6003398895263672,0.4723712205886841,6.460508927830233e-08,-1.5840626955032349,0.4723712205886841,6.460508927830233e-08,-1.5592591762542725,0.4723712205886841,6.460508927830233e-08,-1.5278316736221313,0.4723712205886841,6.460508927830233e-08,-1.491682767868042,0.4723712205886841,6.460508927830233e-08,-1.4527146816253662,0.4723712205886841,6.460508927830233e-08,-1.4128299951553345,0.4723712205886841,6.460508927830233e-08,-1.3739310503005981,0.4723712205886841,6.460508927830233e-08,-1.3379201889038086,0.4723712205886841,6.460508927830233e-08,-1.3066999912261963,0.4723712205886841,6.460508927830233e-08,-1.282172679901123,0.4723712205886841,6.460508927830233e-08,-1.2662408351898193,0.4723712205886841,6.460508927830233e-08,-1.2636865377426147,0.4723712205886841,6.45721129899357e-08,-1.2761443853378296,0.4723712205886841,6.448093614608297e-08,-1.3007951974868774,0.4723712205886841,6.434319743675587e-08,-1.3348199129104614,0.4723712205886841,6.417054265739353e-08,-1.3753994703292847,0.4723712205886841,6.397460339258032e-08,-1.4197146892547607,0.4723712205886841,6.376702543775536e-08,-1.4649466276168823,0.4723712205886841,6.355944748293041e-08,-1.508276104927063,0.4723712205886841,6.33635082181172e-08,-1.5468840599060059,0.4723712205886841,6.319085343875486e-08,-1.5779515504837036,0.4723712205886841,6.305311472942776e-08,-1.5986592769622803,0.4723712205886841,6.296193788557503e-08,-1.606188416481018,0.4723712205886841,6.292894738635368e-08,-1.6068445444107056,0.4675167202949524,6.226935056474758e-08,-1.6085509061813354,0.4540954828262329,6.044576394970136e-08,-1.6109139919281006,0.43382084369659424,5.769098976315945e-08,-1.613540530204773,0.408406138420105,5.423781956892526e-08,-1.616037130355835,0.37956473231315613,5.031905203622955e-08,-1.618010401725769,0.34900999069213867,4.616748938701676e-08,-1.6190669536590576,0.3184552490711212,4.2015926737803966e-08,-1.6188135147094727,0.28961384296417236,3.8097162757821934e-08,-1.6168566942214966,0.2641991376876831,3.4643992563587744e-08,-1.6128031015396118,0.24392449855804443,3.1889218377045836e-08,-1.6062593460083008,0.23050326108932495,3.006563531471329e-08,-1.596832036972046,0.2256486862897873,2.940603849310719e-08,-1.5822927951812744,0.2256486862897873,2.9488488095807952e-08,-1.5615077018737793,0.2256486862897873,2.971643553451031e-08,-1.5357260704040527,0.2256486862897873,3.006078230782805e-08,-1.5061969757080078,0.2256486862897873,3.049242991437495e-08,-1.4741694927215576,0.2256486862897873,3.0982274523694286e-08,-1.4408929347991943,0.2256486862897873,3.1501219410756676e-08,-1.4076162576675415,0.2256486862897873,3.2020164297819065e-08,-1.3755887746810913,0.2256486862897873,3.25100089071384e-08,-1.3460595607757568,0.2256486862897873,3.29416565136853e-08,-1.3202778100967407,0.2256486862897873,3.328600328700304e-08,-1.2994927167892456,0.2256486862897873,3.351395250206224e-08,-1.2849534749984741,0.2256486862897873,3.359640388111984e-08,-1.2829326391220093,0.2256486862897873,3.3497464357878926e-08,-1.296757459640503,0.2256486862897873,3.322392672089336e-08,-1.3232587575912476,0.2256486862897873,3.2810710592912073e-08,-1.3592674732208252,0.2256486862897873,3.2292735596684e-08,-1.4016144275665283,0.2256486862897873,3.170492135495806e-08,-1.4471304416656494,0.2256486862897873,3.108218749048319e-08,-1.4926464557647705,0.2256486862897873,3.0459453626008326e-08,-1.534993290901184,0.2256486862897873,2.987163938428239e-08,-1.5710018873214722,0.2256486862897873,2.9353664388054312e-08,-1.5975031852722168,0.2256486862897873,2.8940448260073026e-08,-1.6113280057907104,0.2256486862897873,2.866691062308746e-08,-1.6093071699142456,0.2256486862897873,2.8567967547132866e-08,-1.6003708839416504,0.22105726599693298,2.8040291866204825e-08,-1.5951844453811646,0.2083633542060852,2.658142506106742e-08,-1.5931811332702637,0.1891874372959137,2.4377603935477055e-08,-1.593794345855713,0.1651500165462494,2.1615068845903807e-08,-1.5964574813842773,0.1378716081380844,1.8480056596104077e-08,-1.6006039381027222,0.1089726984500885,1.5158805766191108e-08,-1.6056671142578125,0.08007378876209259,1.1837554936278138e-08,-1.611080288887024,0.052795376628637314,8.70254268647841e-09,-1.6162768602371216,0.028757965192198753,5.940006708726742e-09,-1.6206902265548706,0.009582053869962692,3.7361855831363755e-09,-1.6237537860870361,-0.003111857920885086,2.2773183339097613e-09,-1.6249010562896729,-0.007703274488449097,1.7496413207140904e-09,-1.6174570322036743,-0.007703274488449097,1.7166615906560878e-09,-1.5967687368392944,-0.007703274488449097,1.6254823043126976e-09,-1.5653016567230225,-0.007703274488449097,1.4877434839632997e-09,-1.5255213975906372,-0.007703274488449097,1.3150849298426692e-09,-1.4798933267593384,-0.007703274488449097,1.1191465532078837e-09,-1.4308830499649048,-0.007703274488449097,9.115682653160206e-10,-1.3809561729431152,-0.007703274488449097,7.039899774241576e-10,-1.332578182220459,-0.007703274488449097,5.080515452782208e-10,-1.2882145643234253,-0.007703274488449097,3.3539293564643913e-10,-1.2503308057785034,-0.007703274488449097,1.976540320303144e-10,-1.2213925123214722,-0.007703274488449097,1.0647474568692417e-10,-1.2038651704788208,-0.007703274488449097,7.349498787334596e-11,-1.1928727626800537,-0.007703274488449097,5.700512978323857e-11,-1.1818937063217163,-0.007703274488449097,1.141552824490688e-11,-1.1709253787994385,-0.007703274488449097,-5.7453868052004253e-11,-1.1599650382995605,-0.007703274488449097,-1.4378312429563778e-10,-1.1490100622177124,-0.007703274488449097,-2.417522848574549e-10,-1.138057827949524,-0.007703274488449097,-3.455413732922352e-10,-1.1271055936813354,-0.007703274488449097,-4.493304617270155e-10,-1.1161506175994873,-0.007703274488449097,-5.47299594533257e-10,-1.1051902770996094,-0.007703274488449097,-6.336288160824211e-10,-1.0942219495773315,-0.007703274488449097,-7.0249822625712e-10,-1.0832428932189941,-0.007703274488449097,-7.480878139176639e-10,-1.0722506046295166,-0.007703274488449097,-7.645777344578164e-10,-1.0638477802276611,0.0017426349222660065,5.216309606481673e-10,-1.060028314590454,0.027857797220349312,4.077620019415917e-09,-1.05987548828125,0.06730835884809494,9.449433235886318e-09,-1.0624727010726929,0.11676047742366791,1.618311529227867e-08,-1.0669032335281372,0.17288029193878174,2.382470754014321e-08,-1.072250485420227,0.2323339581489563,3.1920258436457516e-08,-1.077597737312317,0.29178762435913086,4.0015805780058145e-08,-1.0820282697677612,0.3479074537754059,4.765739802792268e-08,-1.084625482559204,0.39735957980155945,5.4391080084315035e-08,-1.08447265625,0.436810165643692,5.976289685349911e-08,-1.080653190612793,0.46292534470558167,6.331888613431147e-08,-1.072250485420227,0.4723712205886841,6.460508927830233e-08,-1.0597976446151733,0.4675167202949524,6.397847585049021e-08,-1.0447808504104614,0.4540954828262329,6.224607318472408e-08,-1.0277129411697388,0.43382084369659424,5.962903770750927e-08,-1.0091067552566528,0.408406138420105,5.6348525845351105e-08,-0.9894750118255615,0.37956473231315613,5.26256975774686e-08,-0.9693304896354675,0.34900999069213867,4.868171288308076e-08,-0.9491859674453735,0.3184552490711212,4.473772463597925e-08,-0.9295542240142822,0.28961384296417236,4.101489636809674e-08,-0.9109480381011963,0.2641991376876831,3.773438450593858e-08,-0.8938801884651184,0.24392449855804443,3.511734547601009e-08,-0.8788634538650513,0.23050326108932495,3.338493925753028e-08,-0.8664106130599976,0.2256486862897873,3.275832227700448e-08,-0.854448676109314,0.23050318658351898,3.3434407242793895e-08,-0.8407891988754272,0.24392443895339966,3.530358227976649e-08,-0.825771689414978,0.26419907808303833,3.8127225820971944e-08,-0.8097355961799622,0.2896137833595276,4.166672340488731e-08,-0.793020486831665,0.31845518946647644,4.568345701727594e-08,-0.7759658694267273,0.3490099310874939,4.993880864390121e-08,-0.7589112520217896,0.37956467270851135,5.419416027052648e-08,-0.7421961426734924,0.4084060788154602,5.8210893882915116e-08,-0.7261600494384766,0.43382078409194946,6.175039146683048e-08,-0.7111424803733826,0.45409542322158813,6.457403856074961e-08,-0.6974829435348511,0.4675166606903076,6.64432135977222e-08,-0.6855210661888123,0.4723712205886841,6.71193021162253e-08,-0.6745409965515137,0.4629253149032593,6.573415589627984e-08,-0.6635960340499878,0.436810165643692,6.190462897848192e-08,-0.6526791453361511,0.39735960960388184,5.611959963403024e-08,-0.6417832970619202,0.34790748357772827,4.886794258140981e-08,-0.6309014558792114,0.29178765416145325,4.0638532539105654e-08,-0.6200266480445862,0.2323339879512787,3.192024777831648e-08,-0.6091518402099609,0.17288030683994293,2.3201963017527305e-08,-0.5982699990272522,0.11676047742366791,1.4972554751579992e-08,-0.5873741507530212,0.06730835139751434,7.720897698959561e-09,-0.5764572024345398,0.027857769280672073,1.935867910418665e-09,-0.5655121803283691,0.0017425864934921265,-1.893659007379256e-09,-0.5545321106910706,-0.007703274488449097,-3.2787959014513035e-09,-0.544130265712738,-0.007703274488449097,-3.262305980911151e-09,-0.5343526005744934,-0.007703274488449097,-3.2167164487617583e-09,-0.5243409276008606,-0.007703274488449097,-3.1478470940982106e-09,-0.5132371187210083,-0.007703274488449097,-3.061517928060198e-09,-0.5001829862594604,-0.007703274488449097,-2.963548739742805e-09,-0.48432034254074097,-0.007703274488449097,-2.8597595402857223e-09,-0.46479102969169617,-0.007703274488449097,-2.7559703408286396e-09,-0.44073688983917236,-0.007703274488449097,-2.658001152511247e-09,-0.4112997353076935,-0.007703274488449097,-2.571671986473234e-09,-0.37562140822410583,-0.007703274488449097,-2.5028026318096863e-09,-0.33284372091293335,-0.007703274488449097,-2.4572130996602937e-09,-0.2821084260940552,-0.007703274488449097,-2.440723179120141e-09,-0.23096925020217896,0.0017426349222660065,-1.1874941030498576e-09,-0.1877744346857071,0.027857797220349312,2.2773156693745022e-09,-0.15285801887512207,0.06730835884809494,7.511390620607017e-09,-0.12655405700206757,0.11676047742366791,1.4072413456744925e-08,-0.10919658839702606,0.17288029193878174,2.1518069104331516e-08,-0.10111966729164124,0.2323339581489563,2.940604026946403e-08,-0.10265733301639557,0.29178762435913086,3.729401143459654e-08,-0.11414363235235214,0.3479074537754059,4.473966797036155e-08,-0.13591261208057404,0.39735957980155945,5.130069169467788e-08,-0.16829831898212433,0.436810165643692,5.6534766201821185e-08,-0.2116347849369049,0.46292534470558167,5.99995786387808e-08,-0.2662562131881714,0.4723712205886841,6.125280549440504e-08,-0.31701186299324036,0.4629253149032593,6.001606323025044e-08,-0.3583643436431885,0.436810165643692,5.6596842767930866e-08,-0.39035308361053467,0.39735960960388184,5.143163761545111e-08,-0.4130175709724426,0.34790748357772827,4.4956941280815954e-08,-0.42639726400375366,0.29178765416145325,3.7609254377457546e-08,-0.4305316209793091,0.2323339879512787,2.982507041338067e-08,-0.4254601001739502,0.17288030683994293,2.2040886449303798e-08,-0.4112221598625183,0.11676047742366791,1.469319865776697e-08,-0.3878572881221771,0.06730835139751434,8.218503211310235e-09,-0.35540494322776794,0.027857769280672073,3.0532962824736387e-09,-0.3139045834541321,0.0017425864934921265,-3.6592573415816787e-10,-0.2633957266807556,-0.007703274488449097,-1.6026540095026576e-09,-0.21731911599636078,-0.007703274488449097,-1.569674279444655e-09,-0.1869896948337555,-0.007703274488449097,-1.4784951041235672e-09,-0.1692580282688141,-0.007703274488449097,-1.3407562837741693e-09,-0.1609746664762497,-0.007703274488449097,-1.1680978406758413e-09,-0.15899018943309784,-0.007703274488449097,-9.721595750633583e-10,-0.16015514731407166,-0.007703274488449097,-7.645813981937977e-10,-0.16132010519504547,-0.007703274488449097,-5.570032213242371e-10,-0.15933562815189362,-0.007703274488449097,-3.610649279561784e-10,-0.15105226635932922,-0.007703274488449097,-1.8840642934669916e-10,-0.13332059979438782,-0.007703274488449097,-5.066762287508908e-11,-0.10299117863178253,-0.007703274488449097,4.051158714046821e-11,-0.056914567947387695,-0.007703274488449097,7.349143515966716e-11,-0.02989419922232628,-0.006158140022307634,3.663076508786389e-10,-0.0039224084466695786,-0.001886297482997179,1.2112915115380929e-09,0.020866841077804565,0.004566911607980728,2.558246059436442e-09,0.044339586049318314,0.012656145729124546,4.356974336872099e-09,0.06636185944080353,0.021836062893271446,6.5572791640988726e-09,0.08679970353841782,0.03156132251024246,9.10896336137057e-09,0.10551914572715759,0.04128658026456833,1.1961829748941e-08,0.12238623201847076,0.050466496497392654,1.506568203524239e-08,0.13726699352264404,0.0585557296872139,1.8370322152350127e-08,0.15002746880054474,0.06500893831253052,2.182555292051802e-08,0.16053368151187897,0.06928078085184097,2.53811780481783e-08,0.16865170001983643,0.07082591205835342,2.8987003020120028e-08,0.17431136965751648,0.07872668653726578,3.259284042655963e-08,0.1776977777481079,0.10057000815868378,3.614847443600411e-08,0.17905984818935394,0.13356736302375793,3.960371230959936e-08,0.1786464899778366,0.17493024468421936,4.2908354203063936e-08,0.17670664191246033,0.22187015414237976,4.601220382483007e-08,0.17348922789096832,0.27159857749938965,4.886506843604366e-08,0.16924317181110382,0.32132700085639954,5.1416748192423256e-08,0.16421739757061005,0.36826691031455994,5.361704680240109e-08,0.15866082906723022,0.40962979197502136,5.541576797440939e-08,0.1528223752975464,0.4426271319389343,5.676271896959406e-08,0.14695097506046295,0.46447044610977173,5.760769994367365e-08,0.14129555225372314,0.4723712205886841,5.790051105236671e-08,0.13774952292442322,0.46447044610977173,5.759496346513515e-08,0.1376507729291916,0.4426271319389343,5.671324032618941e-08,0.14030829071998596,0.409629762172699,5.530772284600971e-08,0.14503106474876404,0.36826688051223755,5.343078868236262e-08,0.15112809836864471,0.32132697105407715,5.1134819045728364e-08,0.1579083800315857,0.27159854769706726,4.8472191593873504e-08,0.16468089818954468,0.22187013924121857,4.549528753727827e-08,0.17075465619564056,0.17493024468421936,4.2256484533709227e-08,0.17543864250183105,0.13356736302375793,3.88081637936466e-08,0.17804184556007385,0.10057000815868378,3.520270297485695e-08,0.17787326872348785,0.07872669398784637,3.1492483287820505e-08,0.17424190044403076,0.07082591205835342,2.7729894824801704e-08,0.16663658618927002,0.06928078085184097,2.3967306361782903e-08,0.15526549518108368,0.06500893831253052,2.0257093780173818e-08,0.14051668345928192,0.0585557296872139,1.6651638290454684e-08,0.12277817726135254,0.050466496497392654,1.3203319326748897e-08,0.10243801772594452,0.04128658026456833,9.96451632317985e-09,0.07988424599170685,0.03156132251024246,6.98761004613857e-09,0.055504895746707916,0.021836064755916595,4.324980373837661e-09,0.029688002541661263,0.012656147591769695,2.0290067404005185e-09,0.0028216056525707245,0.004566913470625877,1.5206946812895694e-10,-0.02470625750720501,-0.0018862956203520298,-1.253451453742116e-09,-0.05250754952430725,-0.006158138159662485,-2.1351760359777927e-09,-0.08019423484802246,-0.007703274488449097,-2.4407214027633017e-09,-0.11511248350143433,-0.007703274488449097,-2.4407214027633017e-09,-0.13082128763198853,-0.007703274488449097,-2.4407214027633017e-09,-0.12949176132678986,-0.007703274488449097,-2.4407214027633017e-09,-0.11329501867294312,-0.007703274488449097,-2.4407214027633017e-09,-0.0844021588563919,-0.007703274488449097,-2.4407214027633017e-09,-0.044984303414821625,-0.007703274488449097,-2.4407214027633017e-09,0.0027874410152435303,-0.007703274488449097,-2.4407214027633017e-09,0.05674196779727936,-0.007703274488449097,-2.4407214027633017e-09,0.11470816284418106,-0.007703274488449097,-2.4407214027633017e-09,0.17451491951942444,-0.007703274488449097,-2.4407214027633017e-09,0.2339911162853241,-0.007703274488449097,-2.4407214027633017e-09,0.2909656763076782,-0.007703274488449097,-2.4407214027633017e-09,0.3408074378967285,-0.0031118588522076607,-1.8305967852683125e-09,0.3807351589202881,0.009582055732607841,-1.4378143120552522e-10,0.4113525152206421,0.028757968917489052,2.4043864677025795e-09,0.43326321244239807,0.05279538035392761,5.598568719733521e-09,0.4470709264278412,0.08007378876209259,9.223427355209424e-09,0.4533793330192566,0.1089726984500885,1.3063623960363202e-08,0.45279213786125183,0.1378716081380844,1.690382056551698e-08,0.44591301679611206,0.1651500165462494,2.0528679200992883e-08,0.43334564566612244,0.1891874223947525,2.3722861897113035e-08,0.4156937003135681,0.208363339304924,2.627102979602114e-08,0.39356088638305664,0.2210572510957718,2.795784581621774e-08,0.36755096912384033,0.2256486862897873,2.8567967547132866e-08,0.3642549514770508,0.23050318658351898,3.0250355109728844e-08,0.3695346713066101,0.24392443895339966,3.477039456356579e-08,0.3817903995513916,0.26419907808303833,4.1337401057717216e-08,0.39942246675491333,0.2896137833595276,4.916068618854297e-08,0.42083120346069336,0.31845518946647644,5.744956865783024e-08,0.444416880607605,0.3490099310874939,6.541336006193887e-08,0.46857982873916626,0.37956467270851135,7.226137910265606e-08,0.4917203187942505,0.4084060788154602,7.720293382362797e-08,0.5122386813163757,0.43382078409194946,7.944734647935547e-08,0.5285352468490601,0.45409542322158813,7.820392511348473e-08,0.5390102863311768,0.4675166606903076,7.268199198051661e-08,0.5420640707015991,0.4723712205886841,6.209087644037936e-08,0.5346762537956238,0.4675167202949524,5.334704411552593e-08,0.5162188410758972,0.4540954828262329,4.6420968402571816e-08,0.48965927958488464,0.43382084369659424,4.11110967490913e-08,0.45796504616737366,0.408406138420105,3.721587660265868e-08,0.4241035580635071,0.37956473231315613,3.4533751858134565e-08,0.3910422921180725,0.34900999069213867,3.286317351580692e-08,0.36174869537353516,0.3184552490711212,3.200258547053636e-08,0.33919021487236023,0.28961384296417236,3.175043516989717e-08,0.32633429765701294,0.2641991376876831,3.190517006146365e-08,0.3261483907699585,0.24392449855804443,3.226523759281008e-08,0.3415999412536621,0.23050326108932495,3.2629085211510755e-08,0.37565648555755615,0.2256486862897873,3.279514970699893e-08,0.39000532031059265,0.22105726599693298,3.213483168451603e-08,0.40833476185798645,0.2083633542060852,3.030924489166864e-08,0.4287366569042206,0.1891874372959137,2.7551443793072394e-08,0.4493028223514557,0.1651500165462494,2.4094481076986085e-08,0.4681251347064972,0.1378716081380844,2.0171411208025347e-08,0.48329538106918335,0.1089726984500885,1.6015288650805815e-08,0.4929054379463196,0.08007378876209259,1.1859165205407862e-08,0.49504712224006653,0.052795376628637314,7.936095336447124e-09,0.4878122806549072,0.028757965192198753,4.479133064450025e-09,0.4692927300930023,0.009582053869962692,1.7213319658537785e-09,0.43758031725883484,-0.003111857920885086,-1.0425427188209824e-10,0.39076685905456543,-0.007703274488449097,-7.645777344578164e-10,0.3712223768234253,-0.007703274488449097,-7.151081393708125e-10,0.3609474301338196,-0.007703274488449097,-5.783392653668784e-10,0.35941073298454285,-0.007703274488449097,-3.7173097933163035e-10,0.36608096957206726,-0.007703274488449097,-1.1274312039510903e-10,0.380426824092865,-0.007703274488449097,1.8116444455706926e-10,0.401917040348053,-0.007703274488449097,4.925319041504395e-10,0.430020272731781,-0.007703274488449097,8.03899335988234e-10,0.46420523524284363,-0.007703274488449097,1.0978069564515636e-09,0.5039406418800354,-0.007703274488449097,1.3567948986548117e-09,0.5486951470375061,-0.007703274488449097,1.5634031846900598e-09,0.5979374647140503,-0.007703274488449097,1.7001721142051451e-09,0.6511363983154297,-0.007703274488449097,1.7496413207140904e-09,0.6983146667480469,-0.006158140022307634,1.9969892406379586e-09,0.7310428619384766,-0.001886297482997179,2.680833333101873e-09,0.7511109709739685,0.004566911607980728,3.7138745412335084e-09,0.7603090405464172,0.012656145729124546,5.0088133640713295e-09,0.7604270577430725,0.021836062893271446,6.478350744743011e-09,0.7532550692558289,0.03156132251024246,8.035187626376228e-09,0.740583062171936,0.04128658026456833,9.592024063920235e-09,0.7242010831832886,0.050466496497392654,1.1061561444591916e-08,0.705899178981781,0.0585557296872139,1.2356500711518947e-08,0.6874673366546631,0.06500893831253052,1.3389541919650583e-08,0.6706955432891846,0.06928078085184097,1.4073386900292917e-08,0.6573739051818848,0.07082591205835342,1.4320731267503106e-08,0.6398324966430664,0.06928078085184097,1.4040403506498933e-08,0.6223791837692261,0.06500893831253052,1.3265379905647023e-08,0.6061994433403015,0.0585557296872139,1.2094599988188293e-08,0.5924789309501648,0.050466496497392654,1.0627002389185236e-08,0.5824031233787537,0.04128658026456833,8.961526631878769e-09,0.5771576166152954,0.03156132251024246,7.1971117954205965e-09,0.5779279470443726,0.021836064755916595,5.432696958962424e-09,0.5858997106552124,0.012656147591769695,3.767221201655957e-09,0.6022584438323975,0.004566913470625877,2.2996236026529004e-09,0.6281896829605103,-0.0018862956203520298,1.1288435741718672e-09,0.6648790240287781,-0.006158138159662485,3.538201398534113e-10,0.7135120630264282,-0.007703274488449097,7.349498787334596e-11,0.7609789967536926,-0.007703274488449097,4.0515275162578135e-11,0.7951523065567017,-0.007703274488449097,-5.066392791408525e-11,0.8186907172203064,-0.007703274488449097,-1.8840272397735447e-10,0.8342529535293579,-0.007703274488449097,-3.610612364646215e-10,0.8444976806640625,-0.007703274488449097,-5.569995575882558e-10,0.8520837426185608,-0.007703274488449097,-7.645777344578164e-10,0.8596698045730591,-0.007703274488449097,-9.72155911327377e-10,0.8699145913124084,-0.007703274488449097,-1.16809417693986e-09,0.88547682762146,-0.007703274488449097,-1.340752620038188e-09,0.9090152978897095,-0.007703274488449097,-1.478491440387586e-09,0.9431886672973633,-0.007703274488449097,-1.5696706157086737e-09,0.9906555414199829,-0.007703274488449097,-1.6026504567889788e-09,1.0420539379119873,0.0017426349222660065,-2.9995161909823764e-10,1.0860183238983154,0.027857797220349312,3.301627415908115e-09,1.1222022771835327,0.06730835884809494,8.742309987042063e-09,1.1502591371536255,0.11676047742366791,1.556232120947243e-08,1.1698423624038696,0.17288029193878174,2.330188308974357e-08,1.1806055307388306,0.2323339581489563,3.1501222963470354e-08,1.1822019815444946,0.29178762435913086,3.970055928448346e-08,1.1742852926254272,0.3479074537754059,4.74401211647546e-08,1.1565088033676147,0.39735957980155945,5.426013061082813e-08,1.1285260915756226,0.436810165643692,5.97008096292484e-08,1.0899906158447266,0.46292534470558167,6.330238733198712e-08,1.0405558347702026,0.4723712205886841,6.460510348915705e-08,0.9770674109458923,0.4629253149032593,6.32859169513722e-08,0.9285788536071777,0.436810165643692,5.963875082670711e-08,0.894195020198822,0.39735960960388184,5.4129198900909614e-08,0.8730206489562988,0.34790748357772827,4.7222858512441235e-08,0.8641605973243713,0.29178765416145325,3.938532699976349e-08,0.866719663143158,0.2323339879512787,3.108220170133791e-08,0.8798025846481323,0.17288030683994293,2.2779074626555484e-08,0.9025142192840576,0.11676047742366791,1.4941543113877742e-08,0.9339593648910522,0.06730835139751434,8.035203613587782e-09,0.9732428193092346,0.027857769280672073,2.5256521318794967e-09,1.0194693803787231,0.0017425864934921265,-1.1215155470978289e-09,1.0717438459396362,-0.007703274488449097,-2.440714297335944e-09,1.118057370185852,-0.007703274488449097,-2.720397240807415e-09,1.1490418910980225,-0.007703274488449097,-3.4936380455263816e-09,1.1677632331848145,-0.007703274488449097,-4.6617252280611865e-09,1.177287220954895,-0.007703274488449097,-6.125946860890963e-09,1.1806795597076416,-0.007703274488449097,-7.787591904673263e-09,1.1810061931610107,-0.007703274488449097,-9.547948209842616e-09,1.1813328266143799,-0.007703274488449097,-1.1308304515011969e-08,1.1847251653671265,-0.007703274488449097,-1.296994955879427e-08,1.194249153137207,-0.007703274488449097,-1.4434171191624046e-08,1.212970495223999,-0.007703274488449097,-1.5602259040292665e-08,1.243955135345459,-0.007703274488449097,-1.6375500067056237e-08,1.2902686595916748,-0.007703274488449097,-1.6655182122349288e-08,1.3056809902191162,0.0017426349222660065,-1.54388413164952e-08,1.31537663936615,0.027857797220349312,-1.2076018407469746e-08,1.3204340934753418,0.06730835884809494,-6.996009993542884e-09,1.3219316005706787,0.11676047742366791,-6.281122288953611e-10,1.3209476470947266,0.17288029193878174,6.598378288202866e-09,1.3185606002807617,0.2323339581489563,1.425416584766026e-08,1.3158488273620605,0.29178762435913086,2.1909952963028445e-08,1.3138906955718994,0.3479074537754059,2.9136444368305092e-08,1.3137645721435547,0.39735957980155945,3.5504342577041825e-08,1.3165489435195923,0.436810165643692,4.058435010279027e-08,1.323322057723999,0.46292534470558167,4.394717123545888e-08,1.3351624011993408,0.4723712205886841,4.516351026495613e-08,1.4547442197799683,0.4675167202949524,4.429103839242998e-08,1.531175136566162,0.4540954828262329,4.187890922935367e-08,1.570963740348816,0.43382084369659424,3.823505423383722e-08,1.5806186199188232,0.408406138420105,3.366740486399067e-08,1.5666483640670776,0.37956473231315613,2.8483894354280892e-08,1.5355616807937622,0.34900999069213867,2.2992452386461082e-08,1.4938671588897705,0.3184552490711212,1.7501010418641272e-08,1.4480732679367065,0.28961384296417236,1.2317499908931495e-08,1.4046887159347534,0.2641991376876831,7.749852315441785e-09,1.3702220916748047,0.24392449855804443,4.105999096282176e-09,1.3511821031570435,0.23050326108932495,1.6938717095626998e-09,1.3540775775909424,0.2256486862897873,8.213909552523546e-10,1.3848458528518677,0.22105726599693298,-9.103440223867665e-12,1.4139339923858643,0.2083633542060852,-2.3051760500436558e-09,1.4413750171661377,0.1891874372959137,-5.773711286849448e-09,1.467201828956604,0.1651500165462494,-1.0121593341239077e-08,1.4914473295211792,0.1378716081380844,-1.5055707791589157e-08,1.5141445398330688,0.1089726984500885,-2.0282936219473413e-08,1.535326361656189,0.08007378876209259,-2.551016464735767e-08,1.5550256967544556,0.052795376628637314,-3.044427643317249e-08,1.5732754468917847,0.028757965192198753,-3.479215848756212e-08,1.5901086330413818,0.009582053869962692,-3.826069416845712e-08,1.605558156967163,-0.003111857920885086,-4.055676683378806e-08,1.619657039642334,-0.007703274488449097,-4.138726339419918e-08,1.6739544868469238,-0.007703274488449097,-4.174546219815056e-08,1.7259336709976196,-0.007703274488449097,-4.27357811361162e-08,1.7742249965667725,-0.007703274488449097,-4.4231793339122305e-08,1.8174587488174438,-0.007703274488449097,-4.6107075490908755e-08,1.8542652130126953,-0.007703274488449097,-4.8235207827929116e-08,1.8832746744155884,-0.007703274488449097,-5.048976348120959e-08,1.9031175374984741,-0.007703274488449097,-5.274431913449007e-08,1.9124239683151245,-0.007703274488449097,-5.487245147151043e-08,1.9098243713378906,-0.007703274488449097,-5.674773717601056e-08,1.893949031829834,-0.007703274488449097,-5.824374937901666e-08,1.8634282350540161,-0.007703274488449097,-5.92340683169823e-08,1.816892385482788,-0.007703274488449097,-5.9592263568220005e-08,1.7233350276947021,0.0017426349222660065,-5.848882622672136e-08,1.6576496362686157,0.027857797220349312,-5.5438150070585834e-08,1.61698579788208,0.06730835884809494,-5.0829683573283546e-08,1.5984933376312256,0.11676047742366791,-4.5052871655570925e-08,1.5993218421936035,0.17288029193878174,-3.849716634363176e-08,1.6166208982467651,0.2323339581489563,-3.1552012558222486e-08,1.6475403308868408,0.29178762435913086,-2.460685877281321e-08,1.6892297267913818,0.3479074537754059,-1.8051153460874048e-08,1.7388386726379395,0.39735957980155945,-1.2274343319518266e-08,1.7935168743133545,0.436810165643692,-7.665876822215978e-09,1.8504140377044678,0.46292534470558167,-4.615201998348084e-09,1.9066798686981201,0.4723712205886841,-3.5117668772954858e-09,1.895691990852356,0.4629253149032593,-4.656897090171697e-09,1.8650243282318115,0.436810165643692,-7.822845482508e-09,1.820759654045105,0.39735960960388184,-1.2605449128955115e-08,1.768980622291565,0.34790748357772827,-1.8600543327806918e-08,1.7157700061798096,0.29178765416145325,-2.5403965153714125e-08,1.6672104597091675,0.2323339879512787,-3.2611549016792196e-08,1.6293847560882568,0.17288030683994293,-3.9819134656227106e-08,1.6083756685256958,0.11676047742366791,-4.6622552929420635e-08,1.6102659702301025,0.06730835139751434,-5.261764357555876e-08,1.6411383152008057,0.027857769280672073,-5.7400242781113775e-08,1.7070754766464233,0.0017425864934921265,-6.056618673255798e-08,1.8141601085662842,-0.007703274488449097,-6.171133293264575e-08,1.8571110963821411,-0.0031118588522076607,-6.118912665442622e-08,1.8787990808486938,0.009582055732607841,-5.974538908048999e-08,1.8834766149520874,0.028757968917489052,-5.756442433835218e-08,1.8753963708877563,0.05279538035392761,-5.483053655552794e-08,1.8588110208511353,0.08007378876209259,-5.1728036964959756e-08,1.8379731178283691,0.1089726984500885,-4.844122969416276e-08,1.817135214805603,0.1378716081380844,-4.515442242336576e-08,1.800549864768982,0.1651500165462494,-4.205192283279757e-08,1.7924697399139404,0.1891874223947525,-3.931803504997333e-08,1.7971473932266235,0.208363339304924,-3.713707030783553e-08,1.8188353776931763,0.2210572510957718,-3.56933327338993e-08,1.861786127090454,0.2256486862897873,-3.5171137113820805e-08]
var neonLnxPoints=[-0.6456766724586487,-0.08712443709373474,2.594068959638207e-09,-0.6399632692337036,-0.09388338029384613,-0.05881943926215172,-0.6352233290672302,-0.11256987601518631,-0.0972222164273262,-0.6311571002006531,-0.140798419713974,-0.11812499165534973,-0.6274649500846863,-0.17618349194526672,-0.12444444000720978,-0.6238471865653992,-0.2163395881652832,-0.11909722536802292,-0.6200041174888611,-0.25888118147850037,-0.10500001162290573,-0.6156359910964966,-0.30142277479171753,-0.08506946265697479,-0.6104432344436646,-0.341578871011734,-0.06222224980592728,-0.6041260957717896,-0.37696394324302673,-0.03937503695487976,-0.5963848829269409,-0.405192494392395,-0.01944449543952942,-0.586919903755188,-0.4238789975643158,-0.005347289144992828,-0.5754314661026001,-0.430637925863266,-4.491672811468561e-09,-0.5613927841186523,-0.430637925863266,-4.6557926403067995e-09,-0.544774055480957,-0.430637925863266,-5.1095363495790025e-09,-0.5260213017463684,-0.430637925863266,-5.794978719109167e-09,-0.5055805444717407,-0.430637925863266,-6.654195416899711e-09,-0.48389777541160583,-0.430637925863266,-7.62926166686384e-09,-0.4614189863204956,-0.430637925863266,-8.662252248825553e-09,-0.4385901987552643,-0.430637925863266,-9.695242830787265e-09,-0.4158574342727661,-0.430637925863266,-1.0670309080751395e-08,-0.39366668462753296,-0.430637925863266,-1.1529525778541938e-08,-0.3724639415740967,-0.430637925863266,-1.2214968592161313e-08,-0.3526952266693115,-0.430637925863266,-1.2668712301433516e-08,-0.3348065912723541,-0.430637925863266,-1.2832829909825705e-08,-0.32042497396469116,-0.4238789677619934,-1.1932964838479165e-08,-0.31039345264434814,-0.40519246459007263,-9.44510158973344e-09,-0.3039820194244385,-0.37696391344070435,-5.686839443796998e-09,-0.30046066641807556,-0.3415788412094116,-9.757785690567289e-10,-0.2990993559360504,-0.30142274498939514,4.370481754278899e-09,-0.29916805028915405,-0.258881151676178,1.0034341357822996e-08,-0.2999367415904999,-0.21633954346179962,1.5698201849545512e-08,-0.3006754219532013,-0.17618344724178314,2.104446394923798e-08,-0.3006540536880493,-0.14079837501049042,2.5755525712156668e-08,-0.29914262890815735,-0.11256983131170273,2.951378874627153e-08,-0.2954111099243164,-0.09388332813978195,3.2001654659552514e-08,-0.2887295186519623,-0.08712443709373474,3.290150729640118e-08,-0.27850356698036194,-0.09388338029384613,3.186678654287789e-08,-0.2650142014026642,-0.11256987601518631,2.9006086421645705e-08,-0.24884407222270966,-0.140798419713974,2.4684602806246403e-08,-0.23057588934898376,-0.17618349194526672,1.9267531570221763e-08,-0.21079233288764954,-0.2163395881652832,1.3120069475291984e-08,-0.19007608294487,-0.25888118147850037,6.6074115068204264e-09,-0.16900983452796936,-0.30142277479171753,9.475353834886846e-11,-0.14817628264427185,-0.341578871011734,-6.05270855658091e-09,-0.1281580924987793,-0.37696394324302673,-1.146977890442713e-08,-0.10953796654939651,-0.405192494392395,-1.5791261631648013e-08,-0.09289859235286713,-0.4238789975643158,-1.8651961752880197e-08,-0.07882265746593475,-0.430637925863266,-1.9686684282760325e-08,-0.06798885017633438,-0.4238789677619934,-1.886583156363031e-08,-0.060271840542554855,-0.40519246459007263,-1.659641490903141e-08,-0.05504826828837395,-0.37696391344070435,-1.3168146573150352e-08,-0.051694776862859726,-0.3415788412094116,-8.870739698352281e-09,-0.049588002264499664,-0.30142274498939514,-3.993907427002341e-09,-0.04810458794236183,-0.258881151676178,1.1726375426235336e-09,-0.046621173620224,-0.21633954346179962,6.339182512249408e-09,-0.04451439902186394,-0.17618344724178314,1.1216014783599348e-08,-0.04116090387105942,-0.14079837501049042,1.551342165839742e-08,-0.03593733161687851,-0.11256983131170273,1.8941690882456896e-08,-0.028220318257808685,-0.09388332813978195,2.1211107537055796e-08,-0.017386510968208313,-0.08712443709373474,2.203196203254265e-08,-0.00020705536007881165,-0.09388338029384613,2.0966636427033336e-08,0.02495044842362404,-0.11256987601518631,1.802132487682684e-08,0.05631469935178757,-0.140798419713974,1.3572024393226911e-08,0.0921143963932991,-0.17618349194526672,7.994731987537307e-09,0.13057823479175568,-0.2163395881652832,1.6654451151509875e-09,0.1699349284172058,-0.25888118147850037,-5.039839212628294e-09,0.20841315388679504,-0.30142277479171753,-1.1745123984496786e-08,0.2442416250705719,-0.341578871011734,-1.8074411300972315e-08,0.2756490409374237,-0.37696394324302673,-2.365170459484034e-08,0.3008641004562378,-0.405192494392395,-2.8101005966618686e-08,0.3181155025959015,-0.4238789975643158,-3.104631929318202e-08,0.3256319761276245,-0.430637925863266,-3.21116431223345e-08,0.3335036337375641,-0.42705047130584717,-3.155001238042132e-08,0.33288607001304626,-0.4171322286128998,-2.999727044539213e-08,0.32523050904273987,-0.40214934945106506,-2.7651637424241926e-08,0.31198811531066895,-0.38336798548698425,-2.4711336976679377e-08,0.29461008310317993,-0.3620542883872986,-2.1374592762413158e-08,0.27454760670661926,-0.3394744396209717,-1.7839624888438266e-08,0.2532518804073334,-0.3168945908546448,-1.4304657014463373e-08,0.2321740835905075,-0.2955809235572815,-1.0967911912018735e-08,0.2127654105424881,-0.2767995595932007,-8.027611464456186e-09,0.19647705554962158,-0.26181668043136597,-5.6819784433059795e-09,0.1847601979970932,-0.2518984377384186,-4.1292356200983704e-09,0.1790660172700882,-0.24831095337867737,-3.567608652943477e-09,0.1730673760175705,-0.2518984079360962,-4.01011268635898e-09,0.16205710172653198,-0.2618166506290436,-5.233505628865487e-09,0.14729870855808258,-0.2767995297908783,-7.081609965098323e-09,0.1300557255744934,-0.2955808937549591,-9.398247513559e-09,0.11159166693687439,-0.3168945908546448,-1.2027240536838235e-08,0.09317004680633545,-0.3394744396209717,-1.4812410853437541e-08,0.0760543942451477,-0.3620542883872986,-1.7597582058215266e-08,0.06150823459029198,-0.38336795568466187,-2.0226574193316083e-08,0.05079508572816849,-0.4021493196487427,-2.254321174177676e-08,0.04517846927046776,-0.4171321988105774,-2.4391315633920385e-08,0.04592190682888031,-0.4270504415035248,-2.5614706800070053e-08,0.05428898334503174,-0.430637925863266,-2.605721682868989e-08,0.06162130460143089,-0.4238789677619934,-2.5323055652393123e-08,0.07726337015628815,-0.40519246459007263,-2.329331749706398e-08,0.09971858561038971,-0.37696391344070435,-2.022711775850894e-08,0.1274903565645218,-0.3415788412094116,-1.638357183253447e-08,0.1590820848941803,-0.30142274498939514,-1.2021795114947054e-08,0.19299718737602234,-0.258881151676178,-7.400903001553161e-09,0.22773908078670502,-0.21633954346179962,-2.7800108881592678e-09,0.26181116700172424,-0.17618344724178314,1.58176582942815e-09,0.2937168478965759,-0.14079837501049042,5.425311311313408e-09,0.32195955514907837,-0.11256983131170273,8.49150971760082e-09,0.3450426757335663,-0.09388332813978195,1.0521246096573122e-08,0.3614696264266968,-0.08712443709373474,1.1255412601940407e-08]
var neonMPoints=[0.030243873596191406,-0.0007293373346328735,6.461009860458944e-08,0.037482891231775284,0.005915743764489889,-0.1023130714893341,0.04276924580335617,0.02428743988275528,-0.16613072156906128,0.04637707769870758,0.052040427923202515,-0.19742080569267273,0.04858052730560303,0.08682938665151596,-0.20215126872062683,0.049653735011816025,0.12630899250507355,-0.18629004061222076,0.04987084120512009,0.1681339144706726,-0.1558050513267517,0.04950598254799843,0.20995885133743286,-0.11666424572467804,0.04883330315351486,0.24943846464157104,-0.07483554631471634,0.0481269396841526,0.2842274308204651,-0.036286886781454086,0.047661032527685165,0.3119804263114929,-0.00698620080947876,0.04770972579717636,0.33035212755203247,0.007098579779267311,0.04854714870452881,0.3369971513748169,1.1507597719173646e-07,0.04862334206700325,0.3303520679473877,-0.01653660461306572,0.04660489782691002,0.31198036670684814,-0.02733313851058483,0.0430908203125,0.2842273712158203,-0.03320953994989395,0.03868011385202408,0.24943840503692627,-0.03498585894703865,0.03397177904844284,0.20995879173278809,-0.033482152968645096,0.029564818367362022,0.16813385486602783,-0.029518473893404007,0.02605823427438736,0.12630891799926758,-0.023914873600006104,0.024051029235124588,0.08682931214570999,-0.017491407692432404,0.024142205715179443,0.05204034969210625,-0.011068128049373627,0.02693076804280281,0.024287354201078415,-0.0054650879465043545,0.033015716820955276,0.005915649235248566,-0.0015023411251604557,0.04299604892730713,-0.0007293373346328735,4.434427225419313e-08,0.0524643212556839,-0.0007293373346328735,-7.058339406285086e-07,0.0597420409321785,-0.0007293373346328735,-1.024980974762002e-06,0.06529082357883453,-0.0007293373346328735,-1.001485543383751e-06,0.06957228481769562,-0.0007293373346328735,-7.23736377494788e-07,0.07304804027080536,-0.0007293373346328735,-2.801222080961452e-07,0.07617969810962677,-0.0007293373346328735,2.409682338111452e-07,0.07942888140678406,-0.0007293373346328735,7.511462172260508e-07,0.08325719833374023,-0.0007293373346328735,1.1620229543041205e-06,0.0881262719631195,-0.0007293373346328735,1.3852097708877409e-06,0.09449771046638489,-0.0007293373346328735,1.3323178791324608e-06,0.10283313691616058,-0.0007293373346328735,9.149586048806668e-07,0.1135941743850708,-0.0007293373346328735,4.4741646831880644e-08,0.1227002739906311,0.005915743764489889,-7.854653176764259e-07,0.12886467576026917,0.02428743988275528,-1.3154671023585252e-06,0.13250885903835297,0.052040427923202515,-1.589810040059092e-06,0.1340542882680893,0.08682938665151596,-1.6530404991499381e-06,0.13392242789268494,0.12630899250507355,-1.5497047343160375e-06,0.13253474235534668,0.1681339144706726,-1.3243491139292018e-06,0.1303126960992813,0.20995885133743286,-1.0215198926744051e-06,0.12767775356769562,0.24943846464157104,-6.857634957668779e-07,0.12505139410495758,0.2842274308204651,-3.6162620631330356e-07,0.12285508215427399,0.3119804263114929,-9.365433584207494e-08,0.12151028215885162,0.33035212755203247,7.360577569670568e-08,0.12143844366073608,0.3369971513748169,9.560488223314678e-08,0.1211560070514679,0.3303520679473877,1.256066610721973e-07,0.11924272030591965,0.31198036670684814,3.137033672828693e-07,0.11621513217687607,0.2842273712158203,6.105988745730428e-07,0.11258978396654129,0.24943840503692627,9.669970495451707e-07,0.10888322442770004,0.20995879173278809,1.333601744590851e-06,0.10561199486255646,0.16813385486602783,1.6611168121016817e-06,0.10329264402389526,0.12630891799926758,1.9002461613126798e-06,0.10244172066450119,0.08682931214570999,2.0016934740851866e-06,0.10357576608657837,0.05204034969210625,1.916162773341057e-06,0.10721132904291153,0.024287354201078415,1.5943578546284698e-06,0.1138649508357048,0.005915649235248566,9.869826271824422e-07,0.12405318021774292,-0.0007293373346328735,4.4741639726453286e-08,0.13357289135456085,-0.0007293373346328735,-7.054345019241737e-07,0.14099283516407013,-0.0007293373346328735,-1.0245801149721956e-06,0.14675648510456085,-0.0007293373346328735,-1.0010837740992429e-06,0.15130728483200073,-0.0007293373346328735,-7.233342103063478e-07,0.15508869290351868,-0.0007293373346328735,-2.7972004090770497e-07,0.1585441678762436,-0.0007293373346328735,2.413701167824911e-07,0.16211716830730438,-0.0007293373346328735,7.51547588606627e-07,0.16625115275382996,-0.0007293373346328735,1.162423814093927e-06,0.17138957977294922,-0.0007293373346328735,1.3856100622433587e-06,0.17797590792179108,-0.0007293373346328735,1.3327177157407277e-06,0.18645359575748444,-0.0007293373346328735,9.153581004284206e-07,0.1972661018371582,-0.0007293373346328735,4.513901075142712e-08,0.20673230290412903,0.005915743764489889,-7.850480301385687e-07,0.2138923555612564,0.02428743988275528,-1.3150038284948096e-06,0.21904060244560242,0.052040427923202515,-1.5892800320216338e-06,0.2224714159965515,0.08682938665151596,-1.6524281818419695e-06,0.22447915375232697,0.12630899250507355,-1.5489999896090012e-06,0.22535818815231323,0.1681339144706726,-1.3235470532890758e-06,0.2254028618335724,0.20995885133743286,-1.0206209708485403e-06,0.2249075472354889,0.24943846464157104,-6.847734539405792e-07,0.224166601896286,0.2842274308204651,-3.605561005315394e-07,0.223474383354187,0.3119804263114929,-9.252053700947727e-08,0.22312524914741516,0.33035212755203247,7.478161023755092e-08,0.2234135866165161,0.3369971513748169,9.679699530806829e-08,0.22307968139648438,0.3303520679473877,1.267944185201486e-07,0.22102414071559906,0.31198036670684814,3.1487181217926263e-07,0.217781662940979,0.2842273712158203,6.117359134805156e-07,0.21388696134090424,0.24943840503692627,9.680935590949957e-07,0.20987474918365479,0.20995879173278809,1.3346515288503724e-06,0.2062797099351883,0.16813385486602783,1.6621165741526056e-06,0.2036365568637848,0.12630891799926758,1.901195560094493e-06,0.2024799883365631,0.08682931214570999,2.0025952380819945e-06,0.2033447027206421,0.05204034969210625,1.9170222458342323e-06,0.20676541328430176,0.024287354201078415,1.5951836758176796e-06,0.21327681839466095,0.005915649235248566,9.877860520646209e-07,0.2234135866165161,-0.0007293373346328735,4.553638177640096e-08,0.23319053649902344,-0.0007293373346328735,-7.04662511452625e-07,0.24132166802883148,-0.0007293373346328735,-1.023872641781054e-06,0.24815964698791504,-0.0007293373346328735,-1.000474412649055e-06,0.2540571391582489,-0.0007293373346328735,-7.228480285448313e-07,0.25936684012413025,-0.0007293373346328735,-2.7937386448684265e-07,0.2644414007663727,-0.0007293373346328735,2.415677613498701e-07,0.2696334719657898,-0.0007293373346328735,7.515965307902661e-07,0.2752957344055176,-0.0007293373346328735,1.1623321825027233e-06,0.281780868768692,-0.0007293373346328735,1.3853943983122008e-06,0.2894415259361267,-0.0007293373346328735,1.3324028032002388e-06,0.29863038659095764,-0.0007293373346328735,9.149770789917966e-07,0.3097001314163208,-0.0007293373346328735,4.4741646831880644e-08,0.31793367862701416,0.005915743764489889,-7.044426979518903e-07,0.3217976987361908,0.02428743988275528,-1.0208439107373124e-06,0.3221896290779114,0.052040427923202515,-9.93201183518977e-07,0.3200068473815918,0.08682938665151596,-7.10253686975193e-07,0.3161467909812927,0.12630899250507355,-2.607405917842698e-07,0.31150683760643005,0.1681339144706726,2.665989882189024e-07,0.30698442459106445,0.20995885133743286,7.830258823560143e-07,0.3034769296646118,0.24943846464157104,1.199800863105338e-06,0.3018817901611328,0.2842274308204651,1.4281848734754021e-06,0.30309638381004333,0.3119804263114929,1.3794386859444785e-06,0.30801811814308167,0.33035212755203247,9.648232435210957e-07,0.3175444006919861,0.3369971513748169,9.560488223314678e-08,0.328350305557251,0.3336034119129181,-6.550806688210287e-07,0.3393262028694153,0.32422420382499695,-9.75632133304316e-07,0.35046157240867615,0.31006261706352234,-9.542588941258145e-07,0.3617459535598755,0.29232174158096313,-6.791701707697939e-07,0.37316885590553284,0.27220460772514343,-2.385753532507806e-07,0.38471975922584534,0.2509143054485321,2.793162252601178e-07,0.3963882029056549,0.22965388000011444,7.862952315917937e-07,0.4081636667251587,0.20962640643119812,1.1941523325731396e-06,0.4200356900691986,0.19203495979309082,1.41467808134621e-06,0.4319937527179718,0.17808261513710022,1.3596633152701543e-06,0.4440273642539978,0.1689724177122116,9.408985874870268e-07,0.45612603425979614,0.16590741276741028,7.017326453251371e-08,0.4666232466697693,0.16954009234905243,-6.794703608647978e-07,0.47674569487571716,0.1790209412574768,-9.97145662040566e-07,0.4865918457508087,0.1931750476360321,-9.714287898532348e-07,0.4962601661682129,0.21082748472690582,-6.908960585860768e-07,0.5058491230010986,0.23080334067344666,-2.441236688355275e-07,0.5154571533203125,0.2519277036190033,2.8031212195855915e-07,0.5251826643943787,0.27302566170692444,7.938351131997479e-07,0.5351241827011108,0.2929222881793976,1.2078689906047657e-06,0.5453801155090332,0.31044265627861023,1.4338376104205963e-06,0.5560489296913147,0.32441186904907227,1.3831647720508045e-06,0.5672290921211243,0.3336549997329712,9.67274218055536e-07,0.5790191292762756,0.3369971513748169,9.759173735801596e-08,0.5876642465591431,0.3303520679473877,-6.536330943163193e-07,0.5926661491394043,0.31198036670684814,-9.75675902736839e-07,0.5947770476341248,0.2842273712158203,-9.565557093083044e-07,0.5947490334510803,0.24943840503692627,-6.842913649052207e-07,0.5933342576026917,0.20995879173278809,-2.4690177724551177e-07,0.5912848711013794,0.16813385486602783,2.6759414595289854e-07,0.5893529653549194,0.12630891799926758,7.711774401286675e-07,0.5882907509803772,0.08682931214570999,1.1758291975638713e-06,0.5888503193855286,0.05204034969210625,1.393530510540586e-06,0.591783881187439,0.024287354201078415,1.3362624713408877e-06,0.5978435277938843,0.005915649235248566,9.160060585600149e-07,0.6077814102172852,-0.0007293373346328735,4.4741646831880644e-08]
var neonPunkfloydPoints=[1.1382824182510376,0.35383954644203186,-0.3118172287940979,1.2181771993637085,0.3606835603713989,-0.3118172287940979,1.276379108428955,0.379605233669281,-0.3118172287940979,1.3150533437728882,0.4081890285015106,-0.3118172287940979,1.3363652229309082,0.4440194368362427,-0.3118172287940979,1.342479944229126,0.4846808910369873,-0.3118172287940979,1.3355627059936523,0.5277578830718994,-0.3118172287940979,1.3177788257598877,0.5708348751068115,-0.3118172287940979,1.2912935018539429,0.6114963293075562,-0.3118172287940979,1.2582720518112183,0.6473267078399658,-0.3118172287940979,1.2208796739578247,0.6759105324745178,-0.3118172287940979,1.181281566619873,0.6948322057723999,-0.3118172287940979,1.141642689704895,0.7016762495040894,-0.31181713938713074,1.1377582550048828,0.6948322653770447,-0.31181713938713074,1.135420560836792,0.6759105920791626,-0.31181713938713074,1.1343317031860352,0.6473267674446106,-0.31181713938713074,1.1341936588287354,0.6114963889122009,-0.31181713938713074,1.1347084045410156,0.5708349347114563,-0.31181713938713074,1.1355780363082886,0.5277579426765442,-0.31181713938713074,1.1365045309066772,0.4846809506416321,-0.31181713938713074,1.1371899843215942,0.44401946663856506,-0.31181713938713074,1.1373363733291626,0.408189058303833,-0.31181713938713074,1.136645793914795,0.379605233669281,-0.31181713938713074,1.1348202228546143,0.3606835603713989,-0.31181713938713074,1.1315617561340332,0.35383954644203186,-0.3118172287940979,1.123734712600708,0.35383954644203186,-0.3118172287940979,1.1104395389556885,0.35383954644203186,-0.3118172287940979,1.0927807092666626,0.35383954644203186,-0.3118172287940979,1.0718625783920288,0.35383954644203186,-0.3118172287940979,1.0487897396087646,0.35383954644203186,-0.3118172287940979,1.024666666984558,0.35383954644203186,-0.3118172287940979,1.0005977153778076,0.35383954644203186,-0.3118172287940979,0.9776874780654907,0.35383954644203186,-0.3118172287940979,0.9570403695106506,0.35383954644203186,-0.3118172287940979,0.9397608637809753,0.35383954644203186,-0.3118172287940979,0.9269534349441528,0.35383954644203186,-0.3118172287940979,0.9197227954864502,0.35383954644203186,-0.3118172287940979,0.9164276123046875,0.35743147134780884,-0.3118172287940979,0.9156615138053894,0.36736205220222473,-0.3118172287940979,0.9169294834136963,0.38236358761787415,-0.3118172287940979,0.9197365641593933,0.4011683166027069,-0.3118172287940979,0.9235877990722656,0.42250850796699524,-0.3118172287940979,0.9279881715774536,0.44511643052101135,-0.3118172287940979,0.9324427247047424,0.46772435307502747,-0.3118172287940979,0.9364565014839172,0.4890645444393158,-0.3118172287940979,0.9395345449447632,0.5078692436218262,-0.3118172287940979,0.9411818981170654,0.5228707790374756,-0.3118172287940979,0.9409035444259644,0.5328013896942139,-0.3118172287940979,0.9382045269012451,0.5363932847976685,-0.3118171691894531,0.9371902346611023,0.5396453738212585,-0.3118171691894531,0.9427303671836853,0.5486364364624023,-0.3118171691894531,0.9535248279571533,0.5622187256813049,-0.3118171691894531,0.9682735800743103,0.5792443752288818,-0.3118171691894531,0.985676646232605,0.5985656380653381,-0.3118171691894531,1.0044338703155518,0.6190347075462341,-0.3118171691894531,1.0232453346252441,0.6395037770271301,-0.3118171691894531,1.0408109426498413,0.6588250398635864,-0.3118171691894531,1.055830717086792,0.6758506894111633,-0.3118171691894531,1.0670045614242554,0.6894329786300659,-0.3118171691894531,1.0730324983596802,0.6984240412712097,-0.3118171691894531,1.0726145505905151,0.7016762495040894,-0.31181713938713074,1.0664103031158447,0.6984241604804993,-0.31181713938713074,1.0576013326644897,0.6894330978393555,-0.31181713938713074,1.0467194318771362,0.6758508086204529,-0.31181713938713074,1.0342963933944702,0.658825159072876,-0.31181713938713074,1.0208640098571777,0.6395038962364197,-0.31181713938713074,1.0069540739059448,0.6190348267555237,-0.31181713938713074,0.9930983185768127,0.5985657572746277,-0.31181713938713074,0.9798285365104675,0.5792444944381714,-0.31181713938713074,0.9676765203475952,0.5622188448905945,-0.31181713938713074,0.9571740031242371,0.5486365556716919,-0.31181713938713074,0.9488527774810791,0.5396454930305481,-0.31181713938713074,0.9432446956634521,0.5363932847976685,-0.3118171691894531,0.9368420243263245,0.5396453738212585,-0.3118171691894531,0.9274846911430359,0.5486364364624023,-0.3118171691894531,0.915774405002594,0.5622187256813049,-0.3118171691894531,0.9023129940032959,0.5792443752288818,-0.3118171691894531,0.887702226638794,0.5985656380653381,-0.3118171691894531,0.8725438714027405,0.6190347075462341,-0.3118171691894531,0.8574396967887878,0.6395037770271301,-0.3118171691894531,0.8429915308952332,0.6588250398635864,-0.3118171691894531,0.829801082611084,0.6758506894111633,-0.3118171691894531,0.8184701800346375,0.6894329786300659,-0.3118171691894531,0.8096005916595459,0.6984240412712097,-0.3118171691894531,0.8037941455841064,0.7016762495040894,-0.31181713938713074,0.8027468323707581,0.6984241604804993,-0.31181713938713074,0.8081955313682556,0.6894330978393555,-0.31181713938713074,0.8188519477844238,0.6758508086204529,-0.31181713938713074,0.8334276676177979,0.658825159072876,-0.31181713938713074,0.8506343364715576,0.6395038962364197,-0.31181713938713074,0.8691835403442383,0.6190348267555237,-0.31181713938713074,0.8877869844436646,0.5985657572746277,-0.31181713938713074,0.9051562547683716,0.5792444944381714,-0.31181713938713074,0.9200029969215393,0.5622188448905945,-0.31181713938713074,0.9310387969017029,0.5486365556716919,-0.31181713938713074,0.936975359916687,0.5396454930305481,-0.31181713938713074,0.9365241527557373,0.5363932847976685,-0.3118171691894531,0.9324355125427246,0.5328013896942139,-0.3118171691894531,0.9294758439064026,0.5228707790374756,-0.3118171691894531,0.9274302124977112,0.5078692436218262,-0.3118171691894531,0.9260836243629456,0.4890645146369934,-0.3118171691894531,0.9252211451530457,0.4677243232727051,-0.3118171691894531,0.9246277809143066,0.44511640071868896,-0.3118171691894531,0.9240885972976685,0.42250847816467285,-0.3118171691894531,0.923388659954071,0.4011682868003845,-0.3118171691894531,0.9223130345344543,0.38236355781555176,-0.3118171691894531,0.9206467270851135,0.36736202239990234,-0.3118171691894531,0.9181748032569885,0.35743144154548645,-0.3118171691894531,0.9146823883056641,0.35383954644203186,-0.3118172287940979,0.9063452482223511,0.35383954644203186,-0.3118172287940979,0.891594648361206,0.35383954644203186,-0.3118172287940979,0.8716476559638977,0.35383954644203186,-0.3118172287940979,0.8477213978767395,0.35383954644203186,-0.3118172287940979,0.8210329413414001,0.35383954644203186,-0.3118172287940979,0.7927993535995483,0.35383954644203186,-0.3118172287940979,0.7642377614974976,0.35383954644203186,-0.3118172287940979,0.7365652322769165,0.35383954644203186,-0.3118172287940979,0.7109988331794739,0.35383954644203186,-0.3118172287940979,0.6887556314468384,0.35383954644203186,-0.3118172287940979,0.6710527539253235,0.35383954644203186,-0.3118172287940979,0.6591072082519531,0.35383954644203186,-0.3118172287940979,0.5955121517181396,0.3606835603713989,-0.3118172287940979,0.5507078766822815,0.379605233669281,-0.3118172287940979,0.522556483745575,0.4081890285015106,-0.3118172287940979,0.5089201331138611,0.4440194368362427,-0.3118172287940979,0.507660984992981,0.4846808910369873,-0.3118172287940979,0.5166411399841309,0.5277578830718994,-0.3118172287940979,0.5337227582931519,0.5708348751068115,-0.3118172287940979,0.556768000125885,0.6114963293075562,-0.3118172287940979,0.5836389660835266,0.6473267078399658,-0.3118172287940979,0.6121978759765625,0.6759105324745178,-0.3118172287940979,0.6403067708015442,0.6948322057723999,-0.3118172287940979,0.6658279895782471,0.7016762495040894,-0.31181713938713074,0.6962798237800598,0.6948322653770447,-0.31181713938713074,0.7249024510383606,0.6759105920791626,-0.31181713938713074,0.7504767179489136,0.6473267674446106,-0.31181713938713074,0.7717834115028381,0.6114963889122009,-0.31181713938713074,0.7876034379005432,0.5708349347114563,-0.31181713938713074,0.7967175841331482,0.5277579426765442,-0.31181713938713074,0.7979066371917725,0.4846809506416321,-0.31181713938713074,0.789951503276825,0.44401946663856506,-0.31181713938713074,0.771632969379425,0.408189058303833,-0.31181713938713074,0.7417318820953369,0.379605233669281,-0.31181713938713074,0.6990290880203247,0.3606835603713989,-0.31181713938713074,0.6423053741455078,0.35383954644203186,-0.3118172287940979,0.6321523785591125,0.35383954644203186,-0.3118172287940979,0.6127614378929138,0.35383954644203186,-0.3118172287940979,0.5859940648078918,0.35383954644203186,-0.3118172287940979,0.5537118911743164,0.35383954644203186,-0.3118172287940979,0.5177764296531677,0.35383954644203186,-0.3118172287940979,0.4800493121147156,0.35383954644203186,-0.3118172287940979,0.44239214062690735,0.35383954644203186,-0.3118172287940979,0.40666645765304565,0.35383954644203186,-0.3118172287940979,0.3747338652610779,0.35383954644203186,-0.3118172287940979,0.34845593571662903,0.35383954644203186,-0.3118172287940979,0.3296942710876465,0.35383954644203186,-0.3118172287940979,0.32031047344207764,0.35383954644203186,-0.3118172287940979,0.3154708743095398,0.3606835603713989,-0.3118172287940979,0.3104928135871887,0.379605233669281,-0.3118172287940979,0.3055131733417511,0.4081890285015106,-0.3118172287940979,0.300668865442276,0.4440194368362427,-0.3118172287940979,0.2960967719554901,0.4846808910369873,-0.3118172287940979,0.2919337749481201,0.5277578830718994,-0.3118172287940979,0.2883167862892151,0.5708348751068115,-0.3118172287940979,0.2853826880455017,0.6114963293075562,-0.3118172287940979,0.28326839208602905,0.6473267078399658,-0.3118172287940979,0.2821107804775238,0.6759105324745178,-0.3118172287940979,0.28204676508903503,0.6948322057723999,-0.3118172287940979,0.2832132577896118,0.7016762495040894,-0.3118172287940979,0.28675031661987305,0.6948322653770447,-0.3118172287940979,0.29120469093322754,0.6759105920791626,-0.3118172287940979,0.2962843179702759,0.6473267674446106,-0.3118172287940979,0.3016971945762634,0.6114963889122009,-0.3118172287940979,0.30715128779411316,0.5708349347114563,-0.3118172287940979,0.31235453486442566,0.5277579426765442,-0.3118172287940979,0.3170149326324463,0.4846809506416321,-0.3118172287940979,0.32084041833877563,0.44401946663856506,-0.3118172287940979,0.32353898882865906,0.408189058303833,-0.3118172287940979,0.32481861114501953,0.379605233669281,-0.3118172287940979,0.32438722252845764,0.3606835603713989,-0.3118172287940979,0.32195281982421875,0.35383954644203186,-0.3118172287940979,0.3099130392074585,0.35383954644203186,-0.3118172287940979,0.29100489616394043,0.35383954644203186,-0.3118172287940979,0.2668173611164093,0.35383954644203186,-0.3118172287940979,0.23893935978412628,0.35383954644203186,-0.3118172287940979,0.20895984768867493,0.35383954644203186,-0.3118172287940979,0.1784677803516388,0.35383954644203186,-0.3118172287940979,0.14905208349227905,0.35383954644203186,-0.3118172287940979,0.12230172753334045,0.35383954644203186,-0.3118172287940979,0.09980565309524536,0.35383954644203186,-0.3118172287940979,0.08315280079841614,0.35383954644203186,-0.3118172287940979,0.07393212616443634,0.35383954644203186,-0.3118172287940979,0.07373255491256714,0.35383954644203186,-0.3118172287940979,0.07820785045623779,0.35743147134780884,-0.3118172287940979,0.07927686721086502,0.36736205220222473,-0.3118172287940979,0.07773317396640778,0.38236358761787415,-0.3118172287940979,0.07437033206224442,0.4011683166027069,-0.3118172287940979,0.0699819028377533,0.42250850796699524,-0.3118172287940979,0.06536144018173218,0.44511643052101135,-0.3118172287940979,0.06130251660943031,0.46772435307502747,-0.3118172287940979,0.05859868973493576,0.4890645444393158,-0.3118172287940979,0.05804351717233658,0.5078692436218262,-0.3118172287940979,0.06043056398630142,0.5228707790374756,-0.3118172287940979,0.06655339151620865,0.5328013896942139,-0.3118172287940979,0.07720553874969482,0.5363932847976685,-0.3118172287940979,0.0958285927772522,0.5363932847976685,-0.3118172287940979,0.11062298715114594,0.5363932847976685,-0.3118172287940979,0.12214063107967377,0.5363932847976685,-0.3118172287940979,0.13093343377113342,0.5363932847976685,-0.3118172287940979,0.13755330443382263,0.5363932847976685,-0.3118172287940979,0.14255213737487793,0.5363932847976685,-0.3118172287940979,0.14648185670375824,0.5363932847976685,-0.3118172287940979,0.1498943567276001,0.5363932847976685,-0.3118172287940979,0.15334154665470123,0.5363932847976685,-0.3118172287940979,0.15737533569335938,0.5363932847976685,-0.3118172287940979,0.16254761815071106,0.5363932847976685,-0.3118172287940979,0.16941028833389282,0.5363932847976685,-0.3118172287940979,0.17771577835083008,0.5363932847976685,-0.3118172287940979,0.1797894835472107,0.5363932847976685,-0.3118172287940979,0.1765943020582199,0.5363932847976685,-0.3118172287940979,0.16909314692020416,0.5363932847976685,-0.3118172287940979,0.1582489162683487,0.5363932847976685,-0.3118172287940979,0.14502450823783875,0.5363932847976685,-0.3118172287940979,0.13038282096385956,0.5363932847976685,-0.3118172287940979,0.11528676748275757,0.5363932847976685,-0.3118172287940979,0.10069925338029861,0.5363932847976685,-0.3118172287940979,0.08758317679166794,0.5363932847976685,-0.3118172287940979,0.07690143585205078,0.5363932847976685,-0.3118172287940979,0.06961691379547119,0.5363932847976685,-0.3118172287940979,0.06661383807659149,0.5396453738212585,-0.3118172287940979,0.06319121271371841,0.5486364364624023,-0.3118172287940979,0.0595376081764698,0.5622187256813049,-0.3118172287940979,0.0558415986597538,0.5792443752288818,-0.3118172287940979,0.05229175463318825,0.5985656380653381,-0.3118172287940979,0.04907665029168129,0.6190347075462341,-0.3118172287940979,0.04638485610485077,0.6395037770271301,-0.3118172287940979,0.04440494254231453,0.6588250398635864,-0.3118172287940979,0.04332548379898071,0.6758506894111633,-0.3118172287940979,0.04333505034446716,0.6894329786300659,-0.3118172287940979,0.04462221637368202,0.6984240412712097,-0.3118172287940979,0.04737555980682373,0.7016762495040894,-0.3118172287940979,0.06492961198091507,0.7016762495040894,-0.3118172287940979,0.08253654837608337,0.7016762495040894,-0.3118172287940979,0.09982635825872421,0.7016762495040894,-0.3118172287940979,0.11642903089523315,0.7016762495040894,-0.3118172287940979,0.13197454810142517,0.7016762495040894,-0.3118172287940979,0.14609289169311523,0.7016762495040894,-0.3118172287940979,0.1584140509366989,0.7016762495040894,-0.3118172287940979,0.16856801509857178,0.7016762495040894,-0.3118172287940979,0.1761847734451294,0.7016762495040894,-0.3118172287940979,0.18089430034160614,0.7016762495040894,-0.3118172287940979,0.18232659995555878,0.7016762495040894,-0.3118172287940979,0.18011164665222168,0.7016762495040894,-0.3118172287940979,0.16494202613830566,0.7016762495040894,-0.3118172287940979,0.15055502951145172,0.7016762495040894,-0.3118172287940979,0.1369822472333908,0.7016762495040894,-0.3118172287940979,0.12425524741411209,0.7016762495040894,-0.3118172287940979,0.11240562796592712,0.7016762495040894,-0.3118172287940979,0.10146496444940567,0.7016762495040894,-0.3118172287940979,0.09146483987569809,0.7016762495040894,-0.3118172287940979,0.08243684470653534,0.7016762495040894,-0.3118172287940979,0.07441255450248718,0.7016762495040894,-0.3118172287940979,0.06742355227470398,0.7016762495040894,-0.3118172287940979,0.06150142848491669,0.7016762495040894,-0.3118172287940979,0.05667775869369507,0.7016762495040894,-0.3118172287940979,0.05289589241147041,0.6948322653770447,-0.3118172287940979,0.05197961628437042,0.6759105920791626,-0.3118172287940979,0.05334515497088432,0.6473267674446106,-0.3118172287940979,0.056408729404211044,0.6114963889122009,-0.3118172287940979,0.060586560517549515,0.5708349347114563,-0.3118172287940979,0.06529486924409866,0.5277579426765442,-0.3118172287940979,0.06994988024234772,0.4846809506416321,-0.3118172287940979,0.0739678144454956,0.44401946663856506,-0.3118172287940979,0.07676488906145096,0.408189058303833,-0.3118172287940979,0.077757328748703,0.379605233669281,-0.3118172287940979,0.07636135816574097,0.3606835603713989,-0.3118172287940979,0.07199317216873169,0.35383954644203186,-0.3118172287940979,0.06778938323259354,0.35383954644203186,-0.3118172287940979,0.06027170270681381,0.35383954644203186,-0.3118172287940979,0.05002831295132637,0.35383954644203186,-0.3118172287940979,0.037647396326065063,0.35383954644203186,-0.3118172287940979,0.023717137053608894,0.35383954644203186,-0.3118172287940979,0.00882571842521429,0.35383954644203186,-0.3118172287940979,-0.006438675336539745,0.35383954644203186,-0.3118172287940979,-0.02148786187171936,0.35383954644203186,-0.3118172287940979,-0.0357336550951004,0.35383954644203186,-0.3118172287940979,-0.048587873578071594,0.35383954644203186,-0.3118172287940979,-0.05946233123540878,0.35383954644203186,-0.3118172287940979,-0.06776884198188782,0.35383954644203186,-0.3118172287940979,-0.07602961361408234,0.35743147134780884,-0.3118172287940979,-0.08939492702484131,0.36736205220222473,-0.3118172287940979,-0.10650292783975601,0.38236358761787415,-0.3118172287940979,-0.12599176168441772,0.4011683166027069,-0.3118172287940979,-0.14649955928325653,0.42250850796699524,-0.3118172287940979,-0.1666644811630249,0.44511643052101135,-0.3118172287940979,-0.18512465059757233,0.46772435307502747,-0.3118172287940979,-0.20051822066307068,0.4890645444393158,-0.3118172287940979,-0.21148332953453064,0.5078692436218262,-0.3118172287940979,-0.21665813028812408,0.5228707790374756,-0.3118172287940979,-0.2146807461977005,0.5328013896942139,-0.3118172287940979,-0.20418938994407654,0.5363932847976685,-0.3118172287940979,-0.19548502564430237,0.5396453738212585,-0.3118172287940979,-0.1848105788230896,0.5486364364624023,-0.3118172287940979,-0.17272284626960754,0.5622187256813049,-0.3118172287940979,-0.15977859497070312,0.5792443752288818,-0.3118172287940979,-0.14653460681438446,0.5985656380653381,-0.3118172287940979,-0.13354766368865967,0.6190347075462341,-0.3118172287940979,-0.12137455493211746,0.6395037770271301,-0.3118172287940979,-0.11057205498218536,0.6588250398635864,-0.3118172287940979,-0.10169695317745209,0.6758506894111633,-0.3118172287940979,-0.09530603140592575,0.6894329786300659,-0.3118172287940979,-0.09195607155561447,0.6984240412712097,-0.3118172287940979,-0.09220385551452637,0.7016762495040894,-0.3118172287940979,-0.09853236377239227,0.6984241604804993,-0.3118172287940979,-0.1073848307132721,0.6894330978393555,-0.3118172287940979,-0.11817900836467743,0.6758508086204529,-0.3118172287940979,-0.13033264875411987,0.658825159072876,-0.3118172287940979,-0.14326351881027222,0.6395038962364197,-0.3118172287940979,-0.15638938546180725,0.6190348267555237,-0.3118172287940979,-0.16912800073623657,0.5985657572746277,-0.3118172287940979,-0.18089711666107178,0.5792444944381714,-0.3118172287940979,-0.19111450016498566,0.5622188448905945,-0.3118172287940979,-0.1991979032754898,0.5486365556716919,-0.3118172287940979,-0.20456509292125702,0.5396454930305481,-0.3118172287940979,-0.2066338062286377,0.5363932847976685,-0.3118172287940979,-0.20824618637561798,0.5328013896942139,-0.3118172287940979,-0.21041524410247803,0.5228707790374756,-0.3118172287940979,-0.21289727091789246,0.5078692436218262,-0.3118172287940979,-0.2154485136270523,0.4890645146369934,-0.3118172287940979,-0.217825248837471,0.4677243232727051,-0.3118172287940979,-0.2197837382555008,0.44511640071868896,-0.3118172287940979,-0.2210802584886551,0.42250847816467285,-0.3118172287940979,-0.22147108614444733,0.4011682868003845,-0.3118172287940979,-0.22071248292922974,0.38236355781555176,-0.3118172287940979,-0.21856071054935455,0.36736202239990234,-0.3118172287940979,-0.2147720456123352,0.35743144154548645,-0.3118172287940979,-0.20910274982452393,0.35383954644203186,-0.3118172287940979,-0.20483893156051636,0.3606835603713989,-0.3118172287940979,-0.20332804322242737,0.379605233669281,-0.3118172287940979,-0.2041446417570114,0.4081890285015106,-0.3118172287940979,-0.20686329901218414,0.4440194368362427,-0.3118172287940979,-0.2110585719347,0.4846808910369873,-0.3118172287940979,-0.21630503237247467,0.5277578830718994,-0.3118172287940979,-0.22217723727226257,0.5708348751068115,-0.3118172287940979,-0.22824975848197937,0.6114963293075562,-0.3118172287940979,-0.23409715294837952,0.6473267078399658,-0.3118172287940979,-0.23929399251937866,0.6759105324745178,-0.3118172287940979,-0.24341483414173126,0.6948322057723999,-0.3118172287940979,-0.24603420495986938,0.7016762495040894,-0.3118172287940979,-0.24889397621154785,0.7016762495040894,-0.3118172287940979,-0.25392237305641174,0.7016762495040894,-0.3118172287940979,-0.26078298687934875,0.7016762495040894,-0.3118172287940979,-0.2691394090652466,0.7016762495040894,-0.3118172287940979,-0.2786552608013153,0.7016762495040894,-0.3118172287940979,-0.2889941334724426,0.7016762495040894,-0.3118172287940979,-0.29981961846351624,0.7016762495040894,-0.3118172287940979,-0.3107953369617462,0.7016762495040894,-0.3118172287940979,-0.32158488035202026,0.7016762495040894,-0.3118172287940979,-0.3318518400192261,0.7016762495040894,-0.3118172287940979,-0.34125980734825134,0.7016762495040894,-0.3118172287940979,-0.3494723439216614,0.7016762495040894,-0.3118172287940979,-0.35096198320388794,0.6948322653770447,-0.3118172287940979,-0.3512822091579437,0.6759105920791626,-0.3118172287940979,-0.3506058156490326,0.6473267674446106,-0.3118172287940979,-0.349105566740036,0.6114963889122009,-0.3118172287940979,-0.3469542860984802,0.5708349347114563,-0.3118172287940979,-0.3443247377872467,0.5277579426765442,-0.3118172287940979,-0.3413896858692169,0.4846809506416321,-0.3118172287940979,-0.3383219540119171,0.44401946663856506,-0.3118172287940979,-0.33529430627822876,0.408189058303833,-0.3118172287940979,-0.3324795067310333,0.379605233669281,-0.3118172287940979,-0.33005037903785706,0.3606835603713989,-0.3118172287940979,-0.32817962765693665,0.35383954644203186,-0.3118172287940979,-0.32984572649002075,0.3606835603713989,-0.3118172287940979,-0.33824431896209717,0.379605233669281,-0.3118172287940979,-0.3520021438598633,0.4081890285015106,-0.3118172287940979,-0.36974596977233887,0.4440194368362427,-0.3118172287940979,-0.3901025354862213,0.4846808910369873,-0.3118172287940979,-0.411698579788208,0.5277578830718994,-0.3118172287940979,-0.43316084146499634,0.5708348751068115,-0.3118172287940979,-0.4531160891056061,0.6114963293075562,-0.3118172287940979,-0.4701910614967346,0.6473267078399658,-0.3118172287940979,-0.48301246762275696,0.6759105324745178,-0.3118172287940979,-0.49020710587501526,0.6948322057723999,-0.3118172287940979,-0.49040162563323975,0.7016762495040894,-0.3118172287940979,-0.4848279654979706,0.6948322653770447,-0.3118172287940979,-0.4806818962097168,0.6759105920791626,-0.3118172287940979,-0.4778245687484741,0.6473267674446106,-0.3118172287940979,-0.47611719369888306,0.6114963889122009,-0.3118172287940979,-0.4754209816455841,0.5708349347114563,-0.3118172287940979,-0.475597083568573,0.5277579426765442,-0.3118172287940979,-0.47650671005249023,0.4846809506416321,-0.3118172287940979,-0.47801104187965393,0.44401946663856506,-0.3118172287940979,-0.4799712598323822,0.408189058303833,-0.3118172287940979,-0.48224857449531555,0.379605233669281,-0.3118172287940979,-0.4847041666507721,0.3606835603713989,-0.3118172287940979,-0.48719924688339233,0.35383954644203186,-0.3118172287940979,-0.4905678927898407,0.35383954644203186,-0.3118172287940979,-0.49667930603027344,0.35383954644203186,-0.3118172287940979,-0.5051348209381104,0.35383954644203186,-0.3118172287940979,-0.5155357122421265,0.35383954644203186,-0.3118172287940979,-0.5274832844734192,0.35383954644203186,-0.3118172287940979,-0.5405788421630859,0.35383954644203186,-0.3118172287940979,-0.5544236898422241,0.35383954644203186,-0.3118172287940979,-0.5686191320419312,0.35383954644203186,-0.3118172287940979,-0.5827664732933044,0.35383954644203186,-0.3118172287940979,-0.5964670181274414,0.35383954644203186,-0.3118172287940979,-0.6093220710754395,0.35383954644203186,-0.3118172287940979,-0.6209327578544617,0.35383954644203186,-0.3118172287940979,-0.6250043511390686,0.3606835603713989,-0.3118172287940979,-0.6282945275306702,0.379605233669281,-0.3118172287940979,-0.630818784236908,0.4081890285015106,-0.3118172287940979,-0.6325926780700684,0.4440194368362427,-0.3118172287940979,-0.633631706237793,0.4846808910369873,-0.3118172287940979,-0.6339514255523682,0.5277578830718994,-0.3118172287940979,-0.6335673332214355,0.5708348751068115,-0.3118172287940979,-0.6324949860572815,0.6114963293075562,-0.3118172287940979,-0.6307498812675476,0.6473267078399658,-0.3118172287940979,-0.6283475756645203,0.6759105324745178,-0.3118172287940979,-0.6253036260604858,0.6948322057723999,-0.3118172287940979,-0.6216335892677307,0.7016762495040894,-0.3118172287940979,-0.6160169243812561,0.6948322653770447,-0.3118172287940979,-0.6120364665985107,0.6759105920791626,-0.3118172287940979,-0.6095439791679382,0.6473267674446106,-0.3118172287940979,-0.6083911657333374,0.6114963889122009,-0.3118172287940979,-0.6084298491477966,0.5708349347114563,-0.3118172287940979,-0.6095117330551147,0.5277579426765442,-0.3118172287940979,-0.6114885807037354,0.4846809506416321,-0.3118172287940979,-0.614212155342102,0.44401946663856506,-0.3118172287940979,-0.6175342202186584,0.408189058303833,-0.3118172287940979,-0.6213064789772034,0.379605233669281,-0.3118172287940979,-0.6253807544708252,0.3606835603713989,-0.3118172287940979,-0.629608690738678,0.35383954644203186,-0.3118172287940979,-0.6364642381668091,0.35383954644203186,-0.3118172287940979,-0.6449212431907654,0.35383954644203186,-0.3118172287940979,-0.6546836495399475,0.35383954644203186,-0.3118172287940979,-0.6654554605484009,0.35383954644203186,-0.3118172287940979,-0.6769406795501709,0.35383954644203186,-0.3118172287940979,-0.688843309879303,0.35383954644203186,-0.3118172287940979,-0.7008672952651978,0.35383954644203186,-0.3118172287940979,-0.7127166390419006,0.35383954644203186,-0.3118172287940979,-0.7240952849388123,0.35383954644203186,-0.3118172287940979,-0.734707236289978,0.35383954644203186,-0.3118172287940979,-0.7442564964294434,0.35383954644203186,-0.3118172287940979,-0.7524470686912537,0.35383954644203186,-0.3118172287940979,-0.7647664546966553,0.3606835603713989,-0.3118172287940979,-0.7736745476722717,0.379605233669281,-0.3118172287940979,-0.7795583009719849,0.4081890285015106,-0.3118172287940979,-0.7828047871589661,0.4440194368362427,-0.3118172287940979,-0.7838009595870972,0.4846808910369873,-0.3118172287940979,-0.7829338908195496,0.5277578830718994,-0.3118172287940979,-0.7805905342102051,0.5708348751068115,-0.3118172287940979,-0.7771579623222351,0.6114963293075562,-0.3118172287940979,-0.7730231285095215,0.6473267078399658,-0.3118172287940979,-0.7685731053352356,0.6759105324745178,-0.3118172287940979,-0.7641948461532593,0.6948322057723999,-0.3118172287940979,-0.7602754235267639,0.7016762495040894,-0.3118172287940979,-0.7552564740180969,0.6948322653770447,-0.3118172287940979,-0.7529676556587219,0.6759105920791626,-0.3118172287940979,-0.7531503438949585,0.6473267674446106,-0.3118172287940979,-0.7555459141731262,0.6114963889122009,-0.3118172287940979,-0.7598957419395447,0.5708349347114563,-0.3118172287940979,-0.7659412622451782,0.5277579426765442,-0.3118172287940979,-0.7734237909317017,0.4846809506416321,-0.3118172287940979,-0.7820847034454346,0.44401946663856506,-0.3118172287940979,-0.7916654348373413,0.408189058303833,-0.3118172287940979,-0.8019073009490967,0.379605233669281,-0.3118172287940979,-0.812551736831665,0.3606835603713989,-0.3118172287940979,-0.8233399987220764,0.35383954644203186,-0.3118172287940979,-0.8533371090888977,0.35383954644203186,-0.3118172287940979,-0.8834032416343689,0.35383954644203186,-0.3118172287940979,-0.9127537608146667,0.35383954644203186,-0.3118172287940979,-0.9406042098999023,0.35383954644203186,-0.3118172287940979,-0.9661699533462524,0.35383954644203186,-0.3118172287940979,-0.9886664748191833,0.35383954644203186,-0.3118172287940979,-1.0073091983795166,0.35383954644203186,-0.3118172287940979,-1.0213135480880737,0.35383954644203186,-0.3118172287940979,-1.0298950672149658,0.35383954644203186,-0.3118172287940979,-1.0322691202163696,0.35383954644203186,-0.3118172287940979,-1.027651071548462,0.35383954644203186,-0.3118172287940979,-1.015256643295288,0.35383954644203186,-0.3118172287940979,-1.0041842460632324,0.35743147134780884,-0.3118172287940979,-0.996766209602356,0.36736205220222473,-0.3118172287940979,-0.9923796653747559,0.38236358761787415,-0.3118172287940979,-0.9904016852378845,0.4011683166027069,-0.3118172287940979,-0.9902093410491943,0.42250850796699524,-0.3118172287940979,-0.9911797046661377,0.44511643052101135,-0.3118172287940979,-0.9926899075508118,0.46772435307502747,-0.3118172287940979,-0.994117021560669,0.4890645444393158,-0.3118172287940979,-0.9948381781578064,0.5078692436218262,-0.3118172287940979,-0.9942304491996765,0.5228707790374756,-0.3118172287940979,-0.9916709065437317,0.5328013896942139,-0.3118172287940979,-0.9865366220474243,0.5363932847976685,-0.3118172287940979,-0.9483978152275085,0.5396453738212585,-0.3118172287940979,-0.91752690076828,0.5486364364624023,-0.3118172287940979,-0.8936695456504822,0.5622187256813049,-0.3118172287940979,-0.8765714168548584,0.5792443752288818,-0.3118172287940979,-0.8659781813621521,0.5985656380653381,-0.3118172287940979,-0.8616355657577515,0.6190347075462341,-0.3118172287940979,-0.8632892370223999,0.6395037770271301,-0.3118172287940979,-0.8706848621368408,0.6588250398635864,-0.3118172287940979,-0.8835681676864624,0.6758506894111633,-0.3118172287940979,-0.9016848206520081,0.6894329786300659,-0.3118172287940979,-0.9247804880142212,0.6984240412712097,-0.3118172287940979,-0.9526008367538452,0.7016762495040894,-0.3118172287940979,-0.9647248387336731,0.6948322653770447,-0.3118172287940979,-0.9729315042495728,0.6759105920791626,-0.3118172287940979,-0.978039562702179,0.6473267674446106,-0.3118172287940979,-0.9808677434921265,0.6114963889122009,-0.3118172287940979,-0.9822348356246948,0.5708349347114563,-0.3118172287940979,-0.982959508895874,0.5277579426765442,-0.3118172287940979,-0.9838605523109436,0.4846809506416321,-0.3118172287940979,-0.9857566952705383,0.44401946663856506,-0.3118172287940979,-0.9894666075706482,0.408189058303833,-0.3118172287940979,-0.9958091378211975,0.379605233669281,-0.3118172287940979,-1.0056029558181763,0.3606835603713989,-0.3118172287940979,-1.0196666717529297,0.35383954644203186,-0.3118172287940979]
var neonRibbonPoints=[-0.5754169821739197,-0.17024126648902893,6.33904733149393e-08,-0.5609080791473389,-0.16330541670322418,-0.07562494277954102,-0.5526660084724426,-0.14412981271743774,-0.12499994784593582,-0.5496178269386292,-0.11516241729259491,-0.15187494456768036,-0.5506904721260071,-0.07885117828845978,-0.15999993681907654,-0.5548109412193298,-0.03764403983950615,-0.15312492847442627,-0.560906171798706,0.006011050194501877,-0.13499991595745087,-0.5679032206535339,0.0496661402285099,-0.10937491059303284,-0.5747290253639221,0.09087328612804413,-0.0799999013543129,-0.5803106427192688,0.12718454003334045,-0.05062489211559296,-0.5835750102996826,0.15615195035934448,-0.024999884888529778,-0.583449125289917,0.17532756924629211,-0.006874879822134972,-0.5788598656654358,0.1822633147239685,1.2270555771465297e-07,-0.542055070400238,0.17879930138587952,1.209153595027601e-07,-0.5150969624519348,0.16922232508659363,1.1895770057890331e-07,-0.4968843460083008,0.15475498139858246,1.1689157730643274e-07,-0.4863159954547882,0.13661986589431763,1.147759931541259e-07,-0.48229068517684937,0.11603955924510956,1.1266995159076032e-07,-0.4837071895599365,0.09423665702342987,1.1063245608511352e-07,-0.48946431279182434,0.07243375480175018,1.0872250300053565e-07,-0.4984607994556427,0.051853448152542114,1.0699909580580425e-07,-0.5095954537391663,0.033718325197696686,1.0552123796969681e-07,-0.5217670798301697,0.019250979647040367,1.0434793296099087e-07,-0.5338744521141052,0.009674004279077053,1.0353818424846395e-07,-0.5448163747787476,0.006209999322891235,1.031509881954662e-07,-0.5528678297996521,0.0027381572872400284,1.0310657216905383e-07,-0.5527084469795227,-0.006860464811325073,1.0333324951261602e-07,-0.5456504821777344,-0.02136051096022129,1.0378008852285348e-07,-0.5330061912536621,-0.039536625146865845,1.0439615039103955e-07,-0.5160878896713257,-0.060163453221321106,1.0513049630844762e-07,-0.4962078034877777,-0.08201563358306885,1.0593219457177838e-07,-0.4746781885623932,-0.10386781394481659,1.067503063723052e-07,-0.4528113007545471,-0.12449464201927185,1.0753389290130144e-07,-0.4319194257259369,-0.14267075061798096,1.0823201535004046e-07,-0.4133148193359375,-0.15717080235481262,1.087937349097956e-07,-0.39830973744392395,-0.16676943004131317,1.091681198772676e-07,-0.38821643590927124,-0.17024126648902893,1.0930423854915716e-07,-0.38224756717681885,-0.16330541670322418,1.1061185034577647e-07,-0.37845122814178467,-0.14412981271743774,1.1422700652019557e-07,-0.3763929307460785,-0.11516241729259491,1.1968820956553827e-07,-0.3756381869316101,-0.07885117828845978,1.2653393355321896e-07,-0.37575244903564453,-0.03764403983950615,1.3430268097636144e-07,-0.37630122900009155,0.006011050194501877,1.4253294011723483e-07,-0.3768500089645386,0.0496661402285099,1.5076319925810822e-07,-0.376964271068573,0.09087328612804413,1.585319466812507e-07,-0.3762095272541046,0.12718454003334045,1.653776706689314e-07,-0.37415122985839844,0.15615195035934448,1.7083885950341937e-07,-0.37035489082336426,0.17532756924629211,1.7445401567783847e-07,-0.36438602209091187,0.1822633147239685,1.7576162747445778e-07,-0.3589530289173126,0.17532746493816376,1.7456717671393562e-07,-0.35663822293281555,0.15615186095237732,1.712648867169264e-07,-0.35681799054145813,0.12718446552753448,1.6627632248855662e-07,-0.35886865854263306,0.09087322652339935,1.600230490339527e-07,-0.3621666133403778,0.049666088074445724,1.5292663135824114e-07,-0.36608821153640747,0.006010998040437698,1.454086486774031e-07,-0.37000980973243713,-0.03764409199357033,1.3789066599656508e-07,-0.3733077645301819,-0.07885123789310455,1.307942483208535e-07,-0.3753584325313568,-0.11516248434782028,1.245409748662496e-07,-0.375538170337677,-0.1441298872232437,1.195524106378798e-07,-0.37322336435317993,-0.16330549120903015,1.1625012064087059e-07,-0.3677903413772583,-0.17024126648902893,1.1505566988034843e-07,-0.3606802225112915,-0.17024126648902893,1.1604954863742023e-07,-0.35372862219810486,-0.17024126648902893,1.187973239780149e-07,-0.34690386056900024,-0.17024126648902893,1.2294822226976976e-07,-0.34017422795295715,-0.17024126648902893,1.281514556694674e-07,-0.3335080146789551,-0.17024126648902893,1.3405625054474513e-07,-0.3268734812736511,-0.17024126648902893,1.403118261578129e-07,-0.32023894786834717,-0.17024126648902893,1.4656740177088068e-07,-0.3135727047920227,-0.17024126648902893,1.524721966461584e-07,-0.3068430423736572,-0.17024126648902893,1.5767543004585605e-07,-0.3000182509422302,-0.17024126648902893,1.6182632123218355e-07,-0.2930666208267212,-0.17024126648902893,1.6457408946735086e-07,-0.2859565019607544,-0.17024126648902893,1.6556796822442266e-07,-0.2807004451751709,-0.16330541670322418,1.6670543345753686e-07,-0.27887794375419617,-0.14412981271743774,1.6984661499463982e-07,-0.27980750799179077,-0.11516241729259491,1.745847413303636e-07,-0.28280767798423767,-0.07885117828845978,1.8051301253763086e-07,-0.28719696402549744,-0.03764403983950615,1.872246429002189e-07,-0.292293906211853,0.006011050194501877,1.9431284670190507e-07,-0.2974170446395874,0.0496661402285099,2.0137083822646673e-07,-0.30188488960266113,0.09087328612804413,2.079918317576812e-07,-0.3050159811973572,0.12718454003334045,2.1376902736847114e-07,-0.3061288297176361,0.15615195035934448,2.1829563934261387e-07,-0.3045419752597809,0.17532756924629211,2.2116488196388673e-07,-0.29957395792007446,0.1822633147239685,2.2196998372692178e-07,-0.2528446316719055,0.17879930138587952,2.1906346603373095e-07,-0.22245082259178162,0.16922232508659363,2.162247056958222e-07,-0.2059479057788849,0.15475498139858246,2.1347403844629298e-07,-0.20089125633239746,0.13661986589431763,2.1083181422909547e-07,-0.20483623445034027,0.11603955924510956,2.0831836877732712e-07,-0.21533821523189545,0.09423665702342987,2.059540378240854e-07,-0.22995257377624512,0.07243375480175018,2.0375917131332244e-07,-0.24623467028141022,0.051853448152542114,2.0175410497813573e-07,-0.2617398798465729,0.033718325197696686,1.9995918876247742e-07,-0.2740235924720764,0.019250979647040367,1.9839474418859027e-07,-0.2806411385536194,0.009674004279077053,1.9708113541128114e-07,-0.2791478633880615,0.006209999322891235,1.960386981636475e-07,-0.22956515848636627,0.0027381572872400284,1.8851406480280275e-07,-0.1975766122341156,-0.006860464811325073,1.8258553780015063e-07,-0.1805310994386673,-0.02136051096022129,1.780736056389287e-07,-0.17577752470970154,-0.039536625146865845,1.7479877101322927e-07,-0.1806647926568985,-0.060163453221321106,1.7258150819543516e-07,-0.19254179298877716,-0.08201563358306885,1.7124229145792924e-07,-0.2087574154138565,-0.10386781394481659,1.706016234948038e-07,-0.2266605645418167,-0.12449464201927185,1.7047999278929638e-07,-0.24360013008117676,-0.14267075061798096,1.7069787361378985e-07,-0.25692498683929443,-0.15717080235481262,1.710757544515218e-07,-0.2639840543270111,-0.16676943004131317,1.7143412378572975e-07,-0.2621261477470398,-0.17024126648902893,1.715934700996513e-07,-0.2524731457233429,-0.17024126648902893,1.7265509200115048e-07,-0.23849135637283325,-0.17024126648902893,1.7559017351231887e-07,-0.22104652225971222,-0.17024126648902893,1.8002401702688076e-07,-0.20100440084934235,-0.17024126648902893,1.855819249385604e-07,-0.17923076450824738,-0.17024126648902893,1.918892138519368e-07,-0.15659137070178986,-0.17024126648902893,1.9857120037158893e-07,-0.13395197689533234,-0.17024126648902893,2.0525318689124106e-07,-0.11217834055423737,-0.17024126648902893,2.1156047580461745e-07,-0.09213623404502869,-0.17024126648902893,2.171183837162971e-07,-0.07469140738248825,-0.17024126648902893,2.21552227230859e-07,-0.060709625482559204,-0.17024126648902893,2.2448730874202738e-07,-0.051056623458862305,-0.17024126648902893,2.2554891643267183e-07,-0.04553941637277603,-0.16330541670322418,2.2673840760489838e-07,-0.04299405962228775,-0.14412981271743774,2.300239714259078e-07,-0.042829934507608414,-0.11516241729259491,2.3498125756304944e-07,-0.04445642605423927,-0.07885117828845978,2.411859441053821e-07,-0.04728291928768158,-0.03764403983950615,2.482136380876909e-07,-0.050718795508146286,0.006011050194501877,2.556400318098895e-07,-0.054173439741134644,0.0496661402285099,2.630407607284724e-07,-0.057056233286857605,0.09087328612804413,2.699914887216437e-07,-0.05877656489610672,0.12718454003334045,2.7606785124589805e-07,-0.05874381214380264,0.15615195035934448,2.8084551217943954e-07,-0.05636736378073692,0.17532756924629211,2.839001354004722e-07,-0.051056623458862305,0.1822633147239685,2.848073563654907e-07,-0.006665464490652084,0.1787828654050827,2.823298643761518e-07,0.021793778985738754,0.1691625714302063,2.79636310551723e-07,0.03672576695680618,0.15463398396968842,2.767943385606486e-07,0.04053516685962677,0.13642865419387817,2.738716773365013e-07,0.03562663495540619,0.11577814817428589,2.7093597054772545e-07,0.02440483495593071,0.09391400963068008,2.680549471278937e-07,0.009274427779018879,0.07206779718399048,2.652962507454504e-07,-0.007359924726188183,0.05147106200456619,2.6272758191225876e-07,-0.023093562573194504,0.033355362713336945,2.6041664114018204e-07,-0.035521820187568665,0.018952252343297005,2.58431100519374e-07,-0.042240042239427567,0.009493285790085793,2.568386321399885e-07,-0.04084360599517822,0.006209999322891235,2.557069649355981e-07,0.010802317410707474,0.004526002798229456,2.4791106056909484e-07,0.04385502263903618,-0.0039053489454090595,2.41782629473164e-07,0.06112184375524521,-0.01777004636824131,2.3713309360573476e-07,0.06541012227535248,-0.03575407713651657,2.3377380387046287e-07,0.0595271959900856,-0.05654343590140343,2.3151613959271344e-07,0.046280406415462494,-0.07882411032915115,2.301714800978516e-07,0.02847708761692047,-0.10128208994865417,2.2955120471124246e-07,0.008924579247832298,-0.12260337173938751,2.2946667854739644e-07,-0.00956977903842926,-0.1414739489555359,2.2972928093167866e-07,-0.02419864945113659,-0.15657979249954224,2.3015039118945424e-07,-0.03215469419956207,-0.16660690307617188,2.305413886460883e-07,-0.030630528926849365,-0.17024126648902893,2.3071360999438184e-07,-0.01814374513924122,-0.17024126648902893,2.3063923038080247e-07,0.0034895148128271103,-0.17024126648902893,2.3044017893880664e-07,0.032128579914569855,-0.17024126648902893,2.3015257966108038e-07,0.06563277542591095,-0.17024126648902893,2.2981255654030974e-07,0.10186142474412918,-0.17024126648902893,2.2945623356918077e-07,0.13867385685443878,-0.17024126648902893,2.291197347403795e-07,0.1739293932914734,-0.17024126648902893,2.2883918404659198e-07,0.20548737049102783,-0.17024126648902893,2.2865071969135897e-07,0.23120711743831635,-0.17024126648902893,2.2859046566736652e-07,0.24894796311855316,-0.17024126648902893,2.2869454596730066e-07,0.2565692365169525,-0.17024126648902893,2.2899908458384743e-07,0.25193023681640625,-0.17024126648902893,2.2954017708798347e-07,0.21392235159873962,-0.16330541670322418,2.3285966221919807e-07,0.1851121336221695,-0.14412981271743774,2.3759648115628806e-07,0.16504554450511932,-0.11516241729259491,2.4341906623703835e-07,0.15326856076717377,-0.07885117828845978,2.4999584979923384e-07,0.14932715892791748,-0.03764403983950615,2.5699523575895e-07,0.15276731550693512,0.006011050194501877,2.640856848756812e-07,0.16313499212265015,0.0496661402285099,2.7093560106550285e-07,0.1799761801958084,0.09087328612804413,2.772134166661999e-07,0.20283684134483337,0.12718454003334045,2.8258753559384786e-07,0.2312629520893097,0.15615195035934448,2.86726418607941e-07,0.264800488948822,0.17532756924629211,2.8929846962455485e-07,0.3029954433441162,0.1822633147239685,2.8997206413805543e-07,0.3362554609775543,0.17532746493816376,2.8866205070698925e-07,0.36434000730514526,0.15615186095237732,2.856238268122979e-07,0.38691017031669617,0.12718446552753448,2.811699459925876e-07,0.40362703800201416,0.09087322652339935,2.7561299020817387e-07,0.41415169835090637,0.049666088074445724,2.692655129976629e-07,0.41814523935317993,0.006010998040437698,2.624400678996608e-07,0.41526874899864197,-0.03764409199357033,2.5544920845277375e-07,0.4051832854747772,-0.07885123789310455,2.4860551661731733e-07,0.3875499665737152,-0.11516248434782028,2.422215459318977e-07,0.3620298504829407,-0.1441298872232437,2.366098357242663e-07,0.32828405499458313,-0.16330549120903015,2.320829679547387e-07,0.2859736680984497,-0.17024126648902893,2.2895348195106635e-07,0.2699623703956604,-0.17024126648902893,2.2798795384915138e-07,0.2671881318092346,-0.17024126648902893,2.273819461606763e-07,0.27551260590553284,-0.17024126648902893,2.2708293556661374e-07,0.29279741644859314,-0.17024126648902893,2.270383987479363e-07,0.3169041872024536,-0.17024126648902893,2.271958123856166e-07,0.34569454193115234,-0.17024126648902893,2.2750263894977252e-07,0.3770301342010498,-0.17024126648902893,2.279063693322314e-07,0.4087725579738617,-0.17024126648902893,2.2835448021396587e-07,0.4387834668159485,-0.17024126648902893,2.287944340650938e-07,0.46492448449134827,-0.17024126648902893,2.2917372177744255e-07,0.4850572347640991,-0.17024126648902893,2.2943980582113e-07,0.497043251991272,-0.17024126648902893,2.2954017708798347e-07,0.5024762153625488,-0.16330541670322418,2.3075232036262605e-07,0.5047910213470459,-0.14412981271743774,2.341035383324197e-07,0.5046112537384033,-0.11516241729259491,2.3916601321616326e-07,0.502560555934906,-0.07885117828845978,2.455119272326556e-07,0.49926260113716125,-0.03764403983950615,2.527134768115502e-07,0.4953410029411316,0.006011050194501877,2.603428299607913e-07,0.49141940474510193,0.0496661402285099,2.6797218311003235e-07,0.4881214499473572,0.09087328612804413,2.75173732688927e-07,0.48607078194618225,0.12718454003334045,2.815196467054193e-07,0.48589104413986206,0.15615195035934448,2.8658212158916285e-07,0.48820585012435913,0.17532756924629211,2.899333253481018e-07,0.49363887310028076,0.1822633147239685,2.911455112553085e-07,0.5029569268226624,0.17532746493816376,2.899218145557825e-07,0.5160127878189087,0.15615186095237732,2.865386932171532e-07,0.532058835029602,0.12718446552753448,2.8142801511421567e-07,0.5503475666046143,0.09087322652339935,2.750216481217649e-07,0.5701314210891724,0.049666088074445724,2.677515169580147e-07,0.5906627774238586,0.006010998040437698,2.600494894977601e-07,0.6111941337585449,-0.03764409199357033,2.5234746203750547e-07,0.630977988243103,-0.07885123789310455,2.4507733087375527e-07,0.6492667198181152,-0.11516248434782028,2.386709638813045e-07,0.6653127670288086,-0.1441298872232437,2.3356027156751225e-07,0.6783686280250549,-0.16330549120903015,2.3017713601802825e-07,0.6876866817474365,-0.17024126648902893,2.2895348195106635e-07,0.6942583918571472,-0.16330541670322418,2.3021179629267863e-07,0.6997214555740356,-0.14412981271743774,2.3369067037037894e-07,0.7042975425720215,-0.11516241729259491,2.389460007634625e-07,0.7082083821296692,-0.07885117828845978,2.4553366984036984e-07,0.711675763130188,-0.03764403983950615,2.5300957418039616e-07,0.7149214148521423,0.006011050194501877,2.6092956773027254e-07,0.7181670665740967,0.0496661402285099,2.688495612801489e-07,0.7216344475746155,0.09087328612804413,2.7632546562017524e-07,0.7255452871322632,0.12718454003334045,2.8291313469708257e-07,0.730121374130249,0.15615195035934448,2.881684508793114e-07,0.7355844378471375,0.17532756924629211,2.9164732495701173e-07,0.7421561479568481,0.1822633147239685,2.9290566772033344e-07]
var neonVitalmotionPoints=[0.5548555850982666,0.5976371765136719,1.4425931738060171e-07,0.5527830719947815,0.5821043252944946,1.440781289829829e-07,0.5510291457176208,0.5629297494888306,1.4392479386060586e-07,0.5494838356971741,0.5405735969543457,1.4378969126482843e-07,0.5480369925498962,0.5154959559440613,1.4366320044700842e-07,0.5465785264968872,0.48815688490867615,1.4353570065850363e-07,0.5449984073638916,0.45901650190353394,1.4339755693981715e-07,0.5431865453720093,0.42853492498397827,1.432391627531615e-07,0.5410328507423401,0.397172212600708,1.430508831390398e-07,0.5384272336959839,0.3653884828090668,1.4282309734880982e-07,0.5352596044540405,0.3336438536643982,1.4254617042297468e-07,0.5314199328422546,0.3023983836174011,1.422104958237469e-07,0.5267980098724365,0.2721121609210968,1.4180643859162956e-07,0.5222431421279907,0.265847384929657,1.4140823623165488e-07,0.5134608149528503,0.2727297246456146,1.4064045217310195e-07,0.5008541941642761,0.2906363904476166,1.3953834354651917e-07,0.4848265051841736,0.31744465231895447,1.3813715327160025e-07,0.46578097343444824,0.35103175044059753,1.364721384788936e-07,0.4441208243370056,0.389274924993515,1.3457854208809295e-07,0.42024925351142883,0.43005141615867615,1.3249162122974667e-07,0.394569456577301,0.47123846411705017,1.302466188235485e-07,0.3674846887588501,0.5107133388519287,1.2787879200004681e-07,0.3393981158733368,0.5463532209396362,1.2542338367893535e-07,0.310712993144989,0.5760353803634644,1.2291565099076251e-07,0.2818324565887451,0.5976371765136719,1.2039087948778615e-07,0.2737777531147003,0.5970432162284851,1.1968671742579318e-07,0.27213945984840393,0.5831292867660522,1.1954350043197337e-07,0.2751999497413635,0.558444082736969,1.198110624045512e-07,0.2812415659427643,0.525536298751831,1.203392372417511e-07,0.28854671120643616,0.4869547486305237,1.2097787305265228e-07,0.29539769887924194,0.44524815678596497,1.215768037354792e-07,0.3000769317150116,0.4029652774333954,1.21985877399311e-07,0.3008667826652527,0.36265483498573303,1.2205492794237216e-07,0.2960495948791504,0.326865553855896,1.2163378926288715e-07,0.2839077115058899,0.29814621806144714,1.2057230946993513e-07,0.26272353529930115,0.2790455222129822,1.1872032956716794e-07,0.23077940940856934,0.2721121609210968,1.1592767634738266e-07,0.21283717453479767,0.27170082926750183,1.1435911773105545e-07,0.1880200356245041,0.27061644196510315,1.1218953233083084e-07,0.15859819948673248,0.2690833508968353,1.0961739604908871e-07,0.12684185802936554,0.26732590794563293,1.068411705773542e-07,0.09502122551202774,0.26556846499443054,1.0405932471257984e-07,0.06540650129318237,0.2640353739261627,1.0147032725171812e-07,0.04026788845658302,0.26295098662376404,9.92726398862942e-08,0.021875590085983276,0.26253965497016907,9.766473851868795e-08,0.012499810196459293,0.26302576065063477,9.684508484042453e-08,0.01441075187176466,0.2646336555480957,9.701214764845645e-08,0.02987861819565296,0.26758766174316406,9.836438863430885e-08,0.06117367744445801,0.2721121609210968,1.011002694895069e-07,0.09012938290834427,0.28211262822151184,1.0363165614535319e-07,0.11371727287769318,0.30220112204551697,1.0569377195679408e-07,0.13185352087020874,0.3302854299545288,1.0727929122822388e-07,0.14445433020591736,0.3642733097076416,1.0838088826403691e-07,0.15143588185310364,0.4020725190639496,1.0899123736862748e-07,0.15271437168121338,0.4415908455848694,1.0910300574096254e-07,0.14820599555969238,0.48073604702949524,1.0870886768543642e-07,0.13782691955566406,0.5174158811569214,1.0780150461187077e-07,0.12149335443973541,0.5495381355285645,1.063735766138052e-07,0.09912148118019104,0.5750105977058411,1.0441776510106138e-07,0.07062748819589615,0.5917410254478455,1.0192674437803362e-07,0.035927534103393555,0.5976371765136719,9.889318164368888e-08,0.007210172712802887,0.5931164622306824,9.638262810085507e-08,-0.02111038565635681,0.5806503295898438,9.390676325438108e-08,-0.04776590317487717,0.5613892674446106,9.157646729818225e-08,-0.0714881420135498,0.536483883857727,8.950260621531925e-08,-0.09100885689258575,0.5070847272872925,8.779605309428007e-08,-0.10505981743335724,0.47434237599372864,8.656768102355272e-08,-0.11237278580665588,0.4394073784351349,8.592836309162522e-08,-0.11167952418327332,0.4034302830696106,8.598897238698555e-08,-0.10171178728342056,0.3675616383552551,8.686038199812174e-08,-0.08120134472846985,0.33295202255249023,8.865346501352178e-08,-0.0488799586892128,0.3007519841194153,9.147909452167369e-08,-0.0034793615341186523,0.2721121609210968,9.544812940021075e-08,-0.0008955164812505245,0.2696842551231384,9.567401804133624e-08,-0.004010549280792475,0.2680990993976593,9.540169543242882e-08,-0.011980883777141571,0.26723629236221313,9.470490880403304e-08,-0.023962944746017456,0.26697543263435364,9.365740538669343e-08,-0.039113156497478485,0.2671961486339569,9.233293241095453e-08,-0.05658794194459915,0.26777803897857666,9.080523710736088e-08,-0.07554372400045395,0.268600732088089,8.914807381188439e-08,-0.09513692557811737,0.2695437967777252,8.743518264964223e-08,-0.11452396959066391,0.27048686146736145,8.574031085117895e-08,-0.13286128640174866,0.2713095545768738,8.413721275246644e-08,-0.1493052840232849,0.27189144492149353,8.269963558404925e-08,-0.16301238536834717,0.2721121609210968,8.15013123656172e-08,-0.17428693175315857,0.2785171568393707,8.05156616934255e-08,-0.1820305734872818,0.29622510075569153,7.983869210193006e-08,-0.18662811815738678,0.32297542691230774,7.943675939259265e-08,-0.18846437335014343,0.3565075099468231,7.927622647230237e-08,-0.18792416155338287,0.3945607841014862,7.932345624794834e-08,-0.18539227545261383,0.43487465381622314,7.954479741556497e-08,-0.18125353753566742,0.4751885235309601,7.990661998746873e-08,-0.17589275538921356,0.5132418274879456,8.037527265969402e-08,-0.16969473659992218,0.5467739105224609,8.091711833912996e-08,-0.1630442887544632,0.5735242366790771,8.149851993266566e-08,-0.15632621943950653,0.591232180595398,8.208583324176288e-08,-0.1499253511428833,0.5976371765136719,8.26454140678834e-08,-0.1511954963207245,0.5976371765136719,8.25343704491388e-08,-0.1680111438035965,0.5976371765136719,8.10643001614153e-08,-0.19728681445121765,0.5976371765136719,7.850493943806214e-08,-0.23593702912330627,0.5976371765136719,7.512603161785592e-08,-0.2808763086795807,0.5976371765136719,7.119731293414588e-08,-0.329019159078598,0.5976371765136719,6.698853383113601e-08,-0.3772800862789154,0.5976371765136719,6.276943054217554e-08,-0.42257362604141235,0.5976371765136719,5.880974285332741e-08,-0.461814284324646,0.5976371765136719,5.537921410336821e-08,-0.49191659688949585,0.5976371765136719,5.274758407836089e-08,-0.509795069694519,0.5976371765136719,5.118459611708204e-08,-0.5123642683029175,0.5976371765136719,5.095999711102195e-08,-0.5030921101570129,0.5976371765136719,5.1770598474831786e-08,-0.4907614290714264,0.5976371765136719,5.284858062282183e-08,-0.4760075807571411,0.5976371765136719,5.4138403982051386e-08,-0.4594658613204956,0.5976371765136719,5.5584525426866094e-08,-0.44177162647247314,0.5976371765136719,5.713140538432526e-08,-0.42356017231941223,0.5976371765136719,5.8723500728774525e-08,-0.40546679496765137,0.5976371765136719,6.030527543998687e-08,-0.38812685012817383,0.5976371765136719,6.182118283959426e-08,-0.3721756339073181,0.5976371765136719,6.321567980194231e-08,-0.3582484722137451,0.5976371765136719,6.443323030680403e-08,-0.34698066115379333,0.5976371765136719,6.541829122852505e-08,-0.33900749683380127,0.5976371765136719,6.611532654687835e-08,-0.3332584798336029,0.591232180595398,6.66179218455909e-08,-0.33066821098327637,0.5735242366790771,6.684437181547764e-08,-0.33062857389450073,0.5467739105224609,6.684783926402815e-08,-0.3325314223766327,0.5132418274879456,6.6681486998732e-08,-0.33576861023902893,0.47518855333328247,6.639848493250611e-08,-0.33973202109336853,0.43487468361854553,6.60519887674127e-08,-0.34381353855133057,0.3945608139038086,6.569516841636869e-08,-0.34740501642227173,0.3565075397491455,6.538119379229101e-08,-0.3498983085155487,0.3229754567146301,6.516322059724189e-08,-0.3506852984428406,0.2962251305580139,6.509441874413824e-08,-0.3491578698158264,0.2785171568393707,6.522795104046963e-08,-0.3447078466415405,0.2721121609210968,6.5616987399153e-08,-0.3446941375732422,0.2717907130718231,6.561818821637644e-08,-0.35793352127075195,0.27090397477149963,6.446076383781474e-08,-0.3817533850669861,0.26956841349601746,6.23783620312679e-08,-0.4134811460971832,0.2679004669189453,5.960463411724959e-08,-0.45044422149658203,0.26601657271385193,5.637322075813245e-08,-0.48996999859809875,0.26403316855430603,5.291776972171647e-08,-0.5293858647346497,0.26206672191619873,4.9471925223087965e-08,-0.5660192370414734,0.26023367047309875,4.626933503004693e-08,-0.5971975326538086,0.25865042209625244,4.3543643357679684e-08,-0.6202481389045715,0.2574334740638733,4.152849442107254e-08,-0.6324985027313232,0.25669923424720764,4.0457535988025484e-08,-0.6312758922576904,0.2565641403198242,4.056441227362484e-08,-0.5998919010162354,0.2638460695743561,4.3308087782634175e-08,-0.5662509799003601,0.2827772796154022,4.6249066798509375e-08,-0.5327332615852356,0.31101661920547485,4.917927753922413e-08,-0.5017188787460327,0.34622299671173096,5.1890644670038455e-08,-0.4755879044532776,0.38605523109436035,5.417508930349868e-08,-0.4567204415798187,0.42817220091819763,5.582453610486482e-08,-0.447496622800827,0.470232754945755,5.6630909739396884e-08,-0.450296550989151,0.5098957419395447,5.638613131964121e-08,-0.46750032901763916,0.5448200702667236,5.488212906357148e-08,-0.5014880895614624,0.5726645588874817,5.191082408373404e-08,-0.5546399354934692,0.591088056564331,4.7264141045388897e-08,-0.6293359994888306,0.5977495908737183,4.073400106108238e-08,-0.6621384024620056,0.5910241603851318,3.786632518654187e-08,-0.6910423040390015,0.5724303722381592,3.533946468792237e-08,-0.7155651450157166,0.5443418622016907,3.319560804015964e-08,-0.7352243661880493,0.5091323256492615,3.147694371818943e-08,-0.7495374083518982,0.46917545795440674,3.02256601969475e-08,-0.7580216526985168,0.42684489488601685,2.9483942398655927e-08,-0.7601945996284485,0.38451433181762695,2.9293978798250464e-08,-0.7555736303329468,0.34455743432044983,2.969795609431003e-08,-0.7436761856079102,0.30934789776802063,3.073806098541354e-08,-0.7240197658538818,0.2812593877315521,3.245648372285359e-08,-0.6961216926574707,0.2626655697822571,3.489540745249542e-08,-0.6594995260238647,0.2559402585029602,3.809702064927478e-08,-0.6466101408004761,0.25625845789909363,3.9223845504920973e-08,-0.6448661088943481,0.257138192653656,3.9376313765160376e-08,-0.6525009870529175,0.2584671378135681,3.870885123546941e-08,-0.6677483320236206,0.2601329982280731,3.73758837213245e-08,-0.6888417601585388,0.2620234489440918,3.553183702820206e-08,-0.7140148282051086,0.2640262246131897,3.33311405142922e-08,-0.7415010929107666,0.2660290002822876,3.092821643235766e-08,-0.7695341110229492,0.26791948080062866,2.8477494140588533e-08,-0.796347439289093,0.26958534121513367,2.6133397668104408e-08,-0.8201746940612793,0.2709142863750458,2.4050354596738543e-08,-0.8392494320869446,0.27179402112960815,2.2382788955610522e-08,-0.8518050909042358,0.2721121609210968,2.128513543198096e-08,-0.8592764139175415,0.2785171568393707,2.0631972574847168e-08,-0.8639777898788452,0.29622510075569153,2.0220966234774096e-08,-0.8664577007293701,0.32297542691230774,2.0004167211595814e-08,-0.8672645688056946,0.3565075099468231,1.993362808150323e-08,-0.8669468760490417,0.3945607841014862,1.9961401420687253e-08,-0.8660531044006348,0.43487465381622314,2.003953980533879e-08,-0.865131676197052,0.4751885235309601,2.0120094035291913e-08,-0.8647310733795166,0.5132418274879456,2.015511668673753e-08,-0.8653997778892517,0.5467739105224609,2.0096658559509706e-08,-0.8676862120628357,0.5735242366790771,1.9896772229799353e-08,-0.8721388578414917,0.591232180595398,1.950751027379738e-08,-0.8793060779571533,0.5976371765136719,1.8880923491337853e-08,-0.8885592222213745,0.594921350479126,1.8071988350243373e-08,-0.8981868028640747,0.5874128341674805,1.7230318505312425e-08,-0.9081084132194519,0.5760701894760132,1.6362944776915356e-08,-0.9182436466217041,0.5618519186973572,1.547689620906567e-08,-0.9285120368003845,0.5457165837287903,1.4579202733955299e-08,-0.9388332366943359,0.5286227464675903,1.3676895171954584e-08,-0.9491267800331116,0.5115289092063904,1.2777003455255453e-08,-0.9593122601509094,0.4953936040401459,1.1886558404228253e-08,-0.9693092703819275,0.48117536306381226,1.101258995106491e-08,-0.9790374040603638,0.46983271837234497,1.0162128916135771e-08,-0.9884162545204163,0.46232420206069946,9.342205231632761e-09,-0.997365415096283,0.45960837602615356,8.559848829747807e-09,-1.007492184638977,0.46232423186302185,7.674539226343313e-09,-1.0195350646972656,0.46983274817466736,6.621716508448117e-09,-1.0331053733825684,0.48117539286613464,5.435366823292043e-09,-1.0478142499923706,0.49539363384246826,4.1494763181049166e-09,-1.0632729530334473,0.5115289688110352,2.798030251938144e-09,-1.0790928602218628,0.5286228060722351,1.4150144389546426e-09,-1.0948851108551025,0.5457166433334351,3.4414804339633065e-11,-1.1102609634399414,0.561851978302002,-1.3097829487662693e-09,-1.1248316764831543,0.576070249080658,-2.583592895177844e-09,-1.1382085084915161,0.5874128937721252,-3.7530294427767785e-09,-1.1500027179718018,0.5949214100837708,-4.784106888422457e-09,-1.159825325012207,0.5976371765136719,-5.642842637598733e-09,-1.16615891456604,0.591232180595398,-6.196544610759247e-09,-1.1677149534225464,0.5735242366790771,-6.33257313253921e-09,-1.1654433012008667,0.5467739105224609,-6.133979990607941e-09,-1.1602940559387207,0.5132418274879456,-5.683816972634759e-09,-1.1532171964645386,0.47518855333328247,-5.065134978110564e-09,-1.1451627016067505,0.43487468361854553,-4.360985794704675e-09,-1.1370805501937866,0.3945608139038086,-3.6544207659972017e-09,-1.1299207210540771,0.3565075397491455,-3.0284912355682536e-09,-1.1246333122253418,0.3229754567146301,-2.566248769042545e-09,-1.1221681833267212,0.2962251305580139,-2.3507449320447904e-09,-1.123475432395935,0.2785171568393707,-2.465030846110494e-09,-1.129504919052124,0.2721121609210968,-2.9921585209535806e-09,-1.1401586532592773,0.27217206358909607,-3.921246438665094e-09,-1.1536192893981934,0.2723318040370941,-5.091679966540141e-09,-1.1692535877227783,0.2725614011287689,-6.448902301059434e-09,-1.186428189277649,0.27283090353012085,-7.9383575268821e-09,-1.2045097351074219,0.27311035990715027,-9.505489728667271e-09,-1.2228649854660034,0.27336978912353516,-1.1095742102895656e-08,-1.2408607006072998,0.2735792100429535,-1.2654559178315594e-08,-1.2578635215759277,0.273708701133728,-1.4127384595497006e-08,-1.2732402086257935,0.27372825145721436,-1.545966199500981e-08,-1.2863574028015137,0.27360793948173523,-1.6596835905602347e-08,-1.2965818643569946,0.27331778407096863,-1.7484348191487697e-08,-1.3032801151275635,0.27282777428627014,-1.80676433814142e-08,-1.3107867240905762,0.27753883600234985,-1.872389177037803e-08,-1.3156733512878418,0.2926793694496155,-1.9151091379399077e-08,-1.3183194398880005,0.31635361909866333,-1.9382424554237332e-08,-1.3191046714782715,0.3466658294200897,-1.9451075417009633e-08,-1.3184086084365845,0.38172024488449097,-1.9390226313475978e-08,-1.3166108131408691,0.419621080160141,-1.9233059589396362e-08,-1.3140908479690552,0.4584725797176361,-1.901275936688762e-08,-1.3112282752990723,0.496379017829895,-1.8762507991709754e-08,-1.30840265750885,0.5314446091651917,-1.8515487809622755e-08,-1.3059935569763184,0.5617735981941223,-1.830488294274346e-08,-1.3043806552886963,0.5854701995849609,-1.816387396047503e-08,-1.3039435148239136,0.6006386280059814,-1.8125644984934297e-08,-1.3041919469833374,0.5981388688087463,-1.8147359170939126e-08,-1.3046857118606567,0.5832006335258484,-1.819052641849339e-08,-1.3054132461547852,0.5582147836685181,-1.8254128875128117e-08,-1.3063628673553467,0.5255721807479858,-1.8337146912017488e-08,-1.3075230121612549,0.487663596868515,-1.8438566229406206e-08,-1.3088818788528442,0.44687989354133606,-1.8557367198468455e-08,-1.3104280233383179,0.40561187267303467,-1.86925337430921e-08,-1.3121496438980103,0.3662503659725189,-1.884304623445132e-08,-1.314035177230835,0.3311862051486969,-1.9007888596433986e-08,-1.3160730600357056,0.3028102219104767,-1.9186044752927955e-08,-1.3182514905929565,0.28351324796676636,-1.9376495075107414e-08,-1.320559024810791,0.27568602561950684,-1.9578223486860225e-08,-1.3290526866912842,0.27109211683273315,-2.0323060567761786e-08,-1.3353805541992188,0.2678089439868927,-2.0882604090388668e-08,-1.3399200439453125,0.2656632661819458,-2.1289025653459248e-08,-1.343048334121704,0.2644818425178528,-2.1574498632048744e-08,-1.3451426029205322,0.2640914022922516,-2.1771192848518695e-08,-1.346580147743225,0.2643187642097473,-2.1911281677944316e-08,-1.3477381467819214,0.2649906575679779,-2.2026936719043988e-08,-1.3489940166473389,0.2659338414669037,-2.2150329570536087e-08,-1.3507248163223267,0.266975075006485,-2.231363183113899e-08,-1.353307843208313,0.2679411470890045,-2.254901509957108e-08,-1.357120394706726,0.2686587870121002,-2.2888652750907568e-08,-1.3625397682189941,0.26895472407341003,-2.3364712831153156e-08,-1.3717045783996582,0.27452176809310913,-2.4163702150303834e-08,-1.3811299800872803,0.2899634838104248,-2.4981837043469568e-08,-1.3908287286758423,0.3135078549385071,-2.5821439209039454e-08,-1.4008134603500366,0.3433828055858612,-2.6684830345402588e-08,-1.4110968112945557,0.37781625986099243,-2.7574330374591227e-08,-1.4216915369033813,0.4150362014770508,-2.8492259218637628e-08,-1.432610273361206,0.4532705843448639,-2.9440938575930886e-08,-1.4438656568527222,0.490747332572937,-3.042268659214642e-08,-1.455470323562622,0.5256944298744202,-3.1439828518387e-08,-1.4674370288848877,0.5563398003578186,-3.2494682500328054e-08,-1.4797784090042114,0.58091139793396,-3.358956846000183e-08,-1.492506980895996,0.5976371765136719,-3.4726806319440584e-08,-1.4944874048233032,0.5979477763175964,-3.4910137003407726e-08,-1.4888285398483276,0.5879949331283569,-3.4417674044107116e-08,-1.4778262376785278,0.5700589418411255,-3.3451946990226133e-08,-1.4637762308120728,0.5464200973510742,-3.2215496048593195e-08,-1.448974370956421,0.51935875415802,-3.091085076789568e-08,-1.4357165098190308,0.491155207157135,-2.974054780224833e-08,-1.4262984991073608,0.4640897512435913,-2.8907122029409038e-08,-1.42301607131958,0.4404427111148834,-2.8613108327135706e-08,-1.4281649589538574,0.42249438166618347,-2.906104157318623e-08,-1.4440410137176514,0.41252511739730835,-3.045345664531851e-08,-1.4729400873184204,0.4128151834011078,-3.2992886644933606e-08,-1.517158031463623,0.4256449341773987,-3.6881864673432574e-08,-1.5249453783035278,0.4259355664253235,-3.7564294785852326e-08,-1.531518578529358,0.4209631383419037,-3.813516968875774e-08,-1.5370547771453857,0.41152864694595337,-3.861099173718685e-08,-1.541731357574463,0.3984330892562866,-3.9008259733464e-08,-1.5457254648208618,0.38247740268707275,-3.9343472479913544e-08,-1.549214482307434,0.36446261405944824,-3.963312877885983e-08,-1.5523755550384521,0.3451896607875824,-3.989373098534088e-08,-1.5553860664367676,0.3254595398902893,-4.014177790168105e-08,-1.5584231615066528,0.30607324838638306,-4.039377188291837e-08,-1.56166410446167,0.28783175349235535,-4.066621173137719e-08,-1.5652862787246704,0.27153605222702026,-4.097559624938185e-08,-1.5694668292999268,0.2579871714115143,-4.133843134468407e-08,-1.5704433917999268,0.2573644816875458,-4.142610166013583e-08,-1.567374348640442,0.27107104659080505,-4.1164131658888437e-08,-1.5611588954925537,0.29638588428497314,-4.0630329323221304e-08,-1.5526963472366333,0.33058807253837585,-3.990250263541384e-08,-1.5428860187530518,0.3709566593170166,-3.905846313045913e-08,-1.5326271057128906,0.4147707223892212,-3.817601523792291e-08,-1.5228188037872314,0.45930930972099304,-3.733296694008459e-08,-1.5143605470657349,0.501851499080658,-3.660712977193725e-08,-1.5081515312194824,0.539676308631897,-3.607630816304663e-08,-1.5050909519195557,0.5700628161430359,-3.581831009569214e-08,-1.5060781240463257,0.5902900695800781,-3.5910947104866864e-08,-1.5120124816894531,0.5976371765136719,-3.6432020067422854e-08,-1.5245877504348755,0.5976371765136719,-3.753137889361824e-08,-1.5433999300003052,0.5976371765136719,-3.917599045166753e-08,-1.5671961307525635,0.5976371765136719,-4.125632102613963e-08,-1.5947234630584717,0.5976371765136719,-4.366283690160344e-08,-1.624729037284851,0.5976371765136719,-4.6286004362627864e-08,-1.6559598445892334,0.5976371765136719,-4.90162896937818e-08,-1.68716299533844,0.5976371765136719,-5.174415917963415e-08,-1.717085599899292,0.5976371765136719,-5.436007910475382e-08,-1.7444747686386108,0.5976371765136719,-5.675451575370971e-08,-1.7680774927139282,0.5976371765136719,-5.881793541107072e-08,-1.7866408824920654,0.5976371765136719,-6.044080436140575e-08,-1.7989120483398438,0.5976371765136719,-6.151358888928371e-08,-1.8034794330596924,0.5976371765136719,-6.19128783796441e-08,-1.8001521825790405,0.5976371765136719,-6.162200349990599e-08,-1.790503740310669,0.5976371765136719,-6.077851111285781e-08,-1.7761075496673584,0.5976371765136719,-5.95199516340017e-08,-1.7585369348526,0.5976371765136719,-5.7983875478839764e-08,-1.7393652200698853,0.5976371765136719,-5.6307833062874124e-08,-1.7201659679412842,0.5976371765136719,-5.46293748016069e-08,-1.7025123834609985,0.5976371765136719,-5.308605111054021e-08,-1.6879780292510986,0.5976371765136719,-5.1815412405176176e-08,-1.6781362295150757,0.5976371765136719,-5.095500910101691e-08,-1.674560308456421,0.5976371765136719,-5.064239161356454e-08,-1.6788235902786255,0.5976371765136719,-5.101512101646222e-08,-1.6856868267059326,0.591232180595398,-5.161512461882012e-08,-1.6888924837112427,0.5735242366790771,-5.189536977923126e-08,-1.6894816160202026,0.5467739105224609,-5.194687346943283e-08,-1.688495397567749,0.5132418274879456,-5.18606562138757e-08,-1.6869750022888184,0.47518855333328247,-5.172773853701074e-08,-1.6859614849090576,0.43487468361854553,-5.163913741057513e-08,-1.6864961385726929,0.3945608139038086,-5.168587335901975e-08,-1.689620018005371,0.3565075397491455,-5.195896690679547e-08,-1.6963741779327393,0.3229754567146301,-5.254943502563947e-08,-1.7077999114990234,0.2962251305580139,-5.35483017927163e-08,-1.7249382734298706,0.2785171568393707,-5.504658417976316e-08,-1.7488301992416382,0.2721121609210968,-5.713529560580355e-08,-1.7584211826324463,0.2721121609210968,-5.7973768008423576e-08,-1.7689828872680664,0.2721121609210968,-5.889710052997543e-08,-1.780315637588501,0.2721121609210968,-5.988783868815517e-08,-1.7922197580337524,0.2721121609210968,-6.092852800065884e-08,-1.8044955730438232,0.2721121609210968,-6.200171043246883e-08,-1.8169434070587158,0.2721121609210968,-6.308993505399485e-08,-1.8293635845184326,0.2721121609210968,-6.417573672479193e-08,-1.841556429862976,0.2721121609210968,-6.524167162069716e-08,-1.8533223867416382,0.2721121609210968,-6.627028170669291e-08,-1.8644616603851318,0.2721121609210968,-6.724410894776156e-08,-1.8747745752334595,0.2721121609210968,-6.814569530888548e-08,-1.884061574935913,0.2721121609210968,-6.89575898604744e-08,-1.891418695449829,0.2777804732322693,-6.960021181612319e-08,-1.895724892616272,0.29354625940322876,-6.997520785034794e-08,-1.8974502086639404,0.3175507187843323,-7.012397418293403e-08,-1.8970646858215332,0.34793514013290405,-7.00878999282395e-08,-1.895038366317749,0.38284072279930115,-6.990837420062235e-08,-1.891841173171997,0.4204087257385254,-6.962679321986798e-08,-1.887943148612976,0.4587804079055786,-6.928455320576177e-08,-1.8838143348693848,0.49609699845314026,-6.892304327266174e-08,-1.8799246549606323,0.5304996967315674,-6.858365253492593e-08,-1.876744270324707,0.5601298213005066,-6.830777721233972e-08,-1.874743103981018,0.5831285715103149,-6.813681352468848e-08,-1.8743910789489746,0.5976371765136719,-6.81121576917576e-08,-1.8749176263809204,0.5988089442253113,-6.816389941377565e-08,-1.8754146099090576,0.5860478281974792,-6.821107945143012e-08,-1.876023292541504,0.5619900822639465,-6.826632414913547e-08,-1.876884937286377,0.5292720198631287,-6.834226695673351e-08,-1.8781406879425049,0.49052995443344116,-6.84515342186387e-08,-1.8799318075180054,0.4484001696109772,-6.860675227926549e-08,-1.882399559020996,0.4055189788341522,-6.882055458845571e-08,-1.8856850862503052,0.36452266573905945,-6.91055674906238e-08,-1.8899296522140503,0.3280475437641144,-6.947442443561158e-08,-1.8952745199203491,0.29872989654541016,-6.993975176783351e-08,-1.9018608331680298,0.2792060375213623,-7.051418293713141e-08,-1.90982985496521,0.2721121609210968,-7.121033718249237e-08,-1.9202563762664795,0.27208948135375977,-7.21214234999934e-08,-1.933127760887146,0.27202677726745605,-7.324549500253852e-08,-1.9479496479034424,0.27193203568458557,-7.45394714840586e-08,-1.9642274379730225,0.2718132734298706,-7.596026563305713e-08,-1.98146653175354,0.27167850732803345,-7.746480434889236e-08,-1.999172568321228,0.2715357542037964,-7.901000742549513e-08,-2.0168509483337402,0.2713930010795593,-8.055279465679632e-08,-2.0340070724487305,0.27125823497772217,-8.205007873129944e-08,-2.0501465797424316,0.2711394727230072,-8.34587865483627e-08,-2.064774990081787,0.2710447311401367,-8.473583790191697e-08,-2.077397584915161,0.270982027053833,-8.583815258589311e-08,-2.087519884109497,0.27095934748649597,-8.6722650394222e-08,-2.0936384201049805,0.2766300141811371,-8.725771039053143e-08,-2.0944979190826416,0.2924048900604248,-8.733330503218895e-08,-2.090970993041992,0.3164283037185669,-8.702573239816047e-08,-2.083930492401123,0.3468445837497711,-8.641129056741192e-08,-2.074249029159546,0.38179805874824524,-8.556627761890923e-08,-2.0627994537353516,0.419433057308197,-8.456699873704565e-08,-2.050454616546631,0.45789390802383423,-8.348975200078712e-08,-2.0380871295928955,0.49532490968704224,-8.241083548909955e-08,-2.0265698432922363,0.5298703908920288,-8.140654017552151e-08,-2.016775608062744,0.5596746802330017,-8.055317834987363e-08,-2.0095770359039307,0.5828821063041687,-7.992704098569448e-08,-2.0058469772338867,0.5976371765136719,-7.96044190565226e-08,-2.0062077045440674,0.5993579626083374,-7.963648585018746e-08,-2.009945869445801,0.588228166103363,-7.995922857162441e-08,-2.0164482593536377,0.5665294528007507,-8.052037259176359e-08,-2.02510142326355,0.5365434885025024,-8.126764328153513e-08,-2.035291910171509,0.5005519390106201,-8.214876601186916e-08,-2.0464062690734863,0.46083641052246094,-8.311147325912316e-08,-2.057831287384033,0.41967856884002686,-8.410349039422726e-08,-2.068953514099121,0.37936004996299744,-8.50725427881116e-08,-2.079159736633301,0.34216251969337463,-8.596635581170631e-08,-2.087836503982544,0.3103676438331604,-8.673266194136886e-08,-2.0943703651428223,0.2862570583820343,-8.731918654802939e-08,-2.0981483459472656,0.2721121609210968,-8.767365500261803e-08,-2.1029164791107178,0.27127984166145325,-8.811134932784626e-08,-2.112893581390381,0.2818620800971985,-8.899718295651837e-08,-2.127202033996582,0.30199357867240906,-9.025546887642122e-08,-2.1449642181396484,0.3298090398311615,-9.181052007534163e-08,-2.1653025150299072,0.36344316601753235,-9.358665664649379e-08,-2.1873395442962646,0.40103065967559814,-9.55081986830919e-08,-2.210197687149048,0.4407062530517578,-9.74994591729228e-08,-2.232999324798584,0.4806046187877655,-9.94847511037733e-08,-2.2548670768737793,0.5188604593276978,-1.0138839456885762e-07,-2.274923324584961,0.5536085367202759,-1.0313470966138993e-07,-2.292290687561035,0.5829834938049316,-1.0464800936915708e-07,-2.30609130859375,0.605120062828064,-1.0585260667994589e-07]
var neonXmenPoints=[1.6508467197418213,0.3482019305229187,3.199846833012998e-05,1.6361654996871948,0.34144407510757446,3.199634375050664e-05,1.626242995262146,0.32276058197021484,3.199500133632682e-05,1.620095133781433,0.2945365905761719,3.199429556843825e-05,1.616737723350525,0.2591572403907776,3.199407001375221e-05,1.6151865720748901,0.21900764107704163,3.199417915311642e-05,1.6144574880599976,0.17647291719913483,3.199447019142099e-05,1.6135663986206055,0.13393819332122803,3.199479033355601e-05,1.6115291118621826,0.09378859400749207,3.199499406036921e-05,1.6073615550994873,0.05840924754738808,3.1994924938771874e-05,1.6000795364379883,0.0301852785050869,3.1994437449611723e-05,1.5886988639831543,0.011501811444759369,3.199337879777886e-05,1.5722355842590332,0.00474393367767334,3.1991596188163385e-05,1.5586031675338745,0.011501788161695004,3.1990155548555776e-05,1.5439858436584473,0.030185267329216003,3.198879130650312e-05,1.528331995010376,0.05840924754738808,3.198746344423853e-05,1.511589765548706,0.09378860145807266,3.198613194399513e-05,1.4937074184417725,0.13393820822238922,3.198475678800605e-05,1.4746332168579102,0.17647293210029602,3.1983301596483216e-05,1.454315423965454,0.21900765597820282,3.198172271368094e-05,1.4327023029327393,0.2591572403907776,3.197998375981115e-05,1.4097421169281006,0.2945365905761719,3.197804107912816e-05,1.385383129119873,0.32276055216789246,3.1975858291843906e-05,1.3595736026763916,0.3414440155029297,3.1973395380191505e-05,1.3322619199752808,0.3482019305229187,3.197061232640408e-05,1.3233754634857178,0.34144407510757446,3.1969644624041393e-05,1.3211559057235718,0.32276058197021484,3.196932448190637e-05,1.3237805366516113,0.2945365905761719,3.196948455297388e-05,1.329426646232605,0.2591572403907776,3.19699574902188e-05,1.3362715244293213,0.21900764107704163,3.19705723086372e-05,1.3424924612045288,0.17647291719913483,3.197116166120395e-05,1.346266746520996,0.13393819332122803,3.1971558200893924e-05,1.3457715511322021,0.09378859400749207,3.197159094270319e-05,1.339184284210205,0.05840924754738808,3.197108890162781e-05,1.3246822357177734,0.0301852785050869,3.196988836862147e-05,1.3004426956176758,0.011501811444759369,3.1967814720701426e-05,1.2646429538726807,0.00474393367767334,3.196470424882136e-05,1.227232813835144,0.00474393367767334,3.196126999682747e-05,1.1983133554458618,0.00474393367767334,3.195829413016327e-05,1.1762886047363281,0.00474393367767334,3.195568933733739e-05,1.159562587738037,0.00474393367767334,3.195337194483727e-05,1.146539330482483,0.00474393367767334,3.195125827915035e-05,1.1356227397918701,0.00474393367767334,3.194926830474287e-05,1.1252169609069824,0.00474393367767334,3.1947314710123464e-05,1.113726019859314,0.00474393367767334,3.1945313821779564e-05,1.0995538234710693,0.00474393367767334,3.1943185604177415e-05,1.0811045169830322,0.00474393367767334,3.194084274582565e-05,1.0567821264266968,0.00474393367767334,3.193820521119051e-05,1.0249905586242676,0.00474393367767334,3.193518932675943e-05,1.0171022415161133,0.008270489983260632,3.193448719684966e-05,1.0109716653823853,0.018020380288362503,3.1933956051943824e-05,1.0063012838363647,0.03274893760681152,3.193356315023266e-05,1.002793550491333,0.05121149867773056,3.1933279387885705e-05,1.0001509189605713,0.07216339558362961,3.193307566107251e-05,0.9980759024620056,0.09435995668172836,3.19329192279838e-05,0.9962708353996277,0.11655651777982712,3.1932777346810326e-05,0.9944382309913635,0.13750840723514557,3.193262091372162e-05,0.9922805428504944,0.155970960855484,3.193242082488723e-05,0.9895002245903015,0.17069952189922333,3.193214433849789e-05,0.9857996702194214,0.18044941127300262,3.193176235072315e-05,0.9808815717697144,0.1839759647846222,3.193124939571135e-05,0.9839552044868469,0.1839759647846222,3.193144220858812e-05,1.0009554624557495,0.1839759647846222,3.193288284819573e-05,1.028477668762207,0.1839759647846222,3.1935269362293184e-05,1.0631170272827148,0.1839759647846222,3.1938296160660684e-05,1.1014689207077026,0.1839759647846222,3.194166492903605e-05,1.1401286125183105,0.1839759647846222,3.1945073715178296e-05,1.1756914854049683,0.1839759647846222,3.194822056684643e-05,1.2047526836395264,0.1839759647846222,3.195079989382066e-05,1.2239075899124146,0.1839759647846222,3.19525133818388e-05,1.229751467704773,0.1839759647846222,3.195305907865986e-05,1.2188795804977417,0.1839759647846222,3.1952131394064054e-05,1.187887191772461,0.1839759647846222,3.1949428375810385e-05,1.152618408203125,0.1839759647846222,3.1946350645739585e-05,1.1295616626739502,0.1839759647846222,3.1944349757395685e-05,1.1162782907485962,0.1839759647846222,3.1943211070029065e-05,1.1103299856185913,0.1839759647846222,3.194271994289011e-05,1.1092783212661743,0.1839759647846222,3.194265445927158e-05,1.1106847524642944,0.1839759647846222,3.1942799978423864e-05,1.1121108531951904,0.1839759647846222,3.194294185959734e-05,1.111118197441101,0.1839759647846222,3.1942861824063584e-05,1.1052682399749756,0.1839759647846222,3.194234523107298e-05,1.0921226739883423,0.1839759647846222,3.1941173801897094e-05,1.0692429542541504,0.1839759647846222,3.193912925780751e-05,1.0341907739639282,0.1839759647846222,3.19359969580546e-05,1.0056194067001343,0.18720726668834686,3.193342126905918e-05,0.984883189201355,0.196140855550766,3.1931504054227844e-05,0.9709668755531311,0.20963627099990845,3.193017255398445e-05,0.9628551006317139,0.2265530675649643,3.192934673279524e-05,0.9595325589179993,0.2457507848739624,3.1928950193105265e-05,0.9599839448928833,0.26608896255493164,3.192890653735958e-05,0.963193953037262,0.2864271402359009,3.1929139368003234e-05,0.9681472778320312,0.3056248426437378,3.192956864950247e-05,0.9738286137580872,0.32254165410995483,3.193011798430234e-05,0.9792226552963257,0.3360370695590973,3.193070733686909e-05,0.9833140969276428,0.3449706733226776,3.193126030964777e-05,0.9850876927375793,0.3482019305229187,3.1931704143062234e-05,0.9929842352867126,0.3482019305229187,3.1932642741594464e-05,1.013968586921692,0.3482019305229187,3.193463999195956e-05,1.0447160005569458,0.3482019305229187,3.193741576978937e-05,1.0819016695022583,0.3482019305229187,3.194069358869456e-05,1.122200846672058,0.3482019305229187,3.194419332430698e-05,1.162288784980774,0.3482019305229187,3.1947638490237296e-05,1.1988407373428345,0.3482019305229187,3.195074896211736e-05,1.2285319566726685,0.3482019305229187,3.195324825355783e-05,1.2480376958847046,0.3482019305229187,3.1954856240190566e-05,1.2540332078933716,0.3482019305229187,3.1955296435626224e-05,1.2431936264038086,0.3482019305229187,3.195428871549666e-05,1.2121944427490234,0.3482019305229187,3.1951552955433726e-05,1.1762207746505737,0.3482019305229187,3.194840610376559e-05,1.1512125730514526,0.3482019305229187,3.194621967850253e-05,1.134976863861084,0.3482019305229187,3.1944800866767764e-05,1.125320553779602,0.3482019305229187,3.194395685568452e-05,1.1200505495071411,0.3482019305229187,3.194349483237602e-05,1.1169737577438354,0.3482019305229187,3.194322562194429e-05,1.1138972043991089,0.3482019305229187,3.194295641151257e-05,1.1086276769638062,0.3482019305229187,3.1942498026182875e-05,1.098972201347351,0.3482019305229187,3.194165401509963e-05,1.0827378034591675,0.3482019305229187,3.1940235203364864e-05,1.0577312707901,0.3482019305229187,3.19380487781018e-05,1.0217593908309937,0.3482019305229187,3.193490920239128e-05,0.9880314469337463,0.34144407510757446,3.193196243955754e-05,0.9692288041114807,0.32276058197021484,3.193031807313673e-05,0.9623663425445557,0.2945365905761719,3.192971780663356e-05,0.9644590020179749,0.2591572403907776,3.1929899705573916e-05,0.9725216627120972,0.21900764107704163,3.193060547346249e-05,0.9835692644119263,0.17647291719913483,3.193156953784637e-05,0.994616687297821,0.13393819332122803,3.193253360223025e-05,1.0026788711547852,0.09378859400749207,3.193323937011883e-05,1.0047707557678223,0.05840924754738808,3.193342126905918e-05,0.9979071617126465,0.0301852785050869,3.193282100255601e-05,0.9791030883789062,0.011501811444759369,3.1931176636135206e-05,0.9453734159469604,0.00474393367767334,3.192822987330146e-05,0.9109455347061157,0.00474393367767334,3.192499207216315e-05,0.8902203440666199,0.00474393367767334,3.19225546263624e-05,0.8804729580879211,0.00474393367767334,3.19207611028105e-05,0.8789785504341125,0.00474393367767334,3.191946234437637e-05,0.8830122351646423,0.00474393367767334,3.19185019179713e-05,0.8898491859436035,0.00474393367767334,3.1917730666464195e-05,0.8967645168304443,0.00474393367767334,3.191699579474516e-05,0.9010334014892578,0.00474393367767334,3.1916140869725496e-05,0.899931013584137,0.00474393367767334,3.1915016734274104e-05,0.89073246717453,0.00474393367767334,3.191347059328109e-05,0.8707128763198853,0.00474393367767334,3.191134601365775e-05,0.8371473550796509,0.00474393367767334,3.190849383827299e-05,0.815661609172821,0.011501788161695004,3.1906798540148884e-05,0.8014320731163025,0.030185267329216003,3.1905685318633914e-05,0.7932490110397339,0.05840924754738808,3.190505594830029e-05,0.7899026870727539,0.09378860145807266,3.1904808565741405e-05,0.7901833653450012,0.13393820822238922,3.190484130755067e-05,0.7928812503814697,0.17647293210029602,3.190505231032148e-05,0.7967866659164429,0.21900765597820282,3.190534334862605e-05,0.8006898164749146,0.2591572403907776,3.190561619703658e-05,0.8033810257911682,0.2945365905761719,3.190576535416767e-05,0.8036504983901978,0.32276055216789246,3.190569259459153e-05,0.8002884984016418,0.3414440155029297,3.1905296054901555e-05,0.7920852303504944,0.3482019305229187,3.1904470233712345e-05,0.7833224534988403,0.3449706435203552,3.190364805050194e-05,0.7730943560600281,0.3360370397567749,3.190273491782136e-05,0.761695384979248,0.32254162430763245,3.1901745387585834e-05,0.7494200468063354,0.3056248426437378,3.19007012876682e-05,0.7365628480911255,0.2864271402359009,3.1899617169983685e-05,0.7234182357788086,0.26608896255493164,3.189851122442633e-05,0.7102806568145752,0.2457507848739624,3.189740527886897e-05,0.6974446773529053,0.2265530675649643,3.1896313885226846e-05,0.6852046847343445,0.20963627099990845,3.189525887137279e-05,0.6738552451133728,0.1961408406496048,3.189425842720084e-05,0.6636908054351807,0.18720725178718567,3.1893327104626223e-05,0.6550058722496033,0.1839759647846222,3.1892486731521785e-05,0.6473880410194397,0.18720726668834686,3.189171548001468e-05,0.6393898725509644,0.196140855550766,3.189090057276189e-05,0.6310561895370483,0.20963627099990845,3.189005656167865e-05,0.6224316954612732,0.2265530675649643,3.188920163665898e-05,0.6135610938072205,0.2457507848739624,3.1888346711639315e-05,0.6044891476631165,0.26608896255493164,3.188750633853488e-05,0.5952606201171875,0.2864271402359009,3.1886695069260895e-05,0.5859202146530151,0.3056248426437378,3.18859274557326e-05,0.5765126943588257,0.32254165410995483,3.1885218049865216e-05,0.5670827627182007,0.3360370695590973,3.1884581403573975e-05,0.5576751232147217,0.3449706733226776,3.1884032068774104e-05,0.548334538936615,0.3482019305229187,3.1883580959402025e-05,0.5303380489349365,0.34144407510757446,3.188286427757703e-05,0.520344078540802,0.32276058197021484,3.188254777342081e-05,0.5165784358978271,0.2945365905761719,3.1882518669590354e-05,0.5172670483589172,0.2591572403907776,3.188266418874264e-05,0.520635724067688,0.21900764107704163,3.1882867915555835e-05,0.5249103307723999,0.17647291719913483,3.1883017072686926e-05,0.5283167362213135,0.13393819332122803,3.188299888279289e-05,0.5290807485580444,0.09378859400749207,3.188270056853071e-05,0.5254282355308533,0.05840924754738808,3.1882005714578554e-05,0.5155850648880005,0.0301852785050869,3.188080154359341e-05,0.4977771043777466,0.011501811444759369,3.187897527823225e-05,0.47023019194602966,0.00474393367767334,3.1876414141152054e-05,0.43615981936454773,0.00474393367767334,3.187316906405613e-05,0.416044145822525,0.00474393367767334,3.187086622347124e-05,0.4071098268032074,0.00474393367767334,3.186932372045703e-05,0.4065834879875183,0.00474393367767334,3.186836693203077e-05,0.4116917550563812,0.00474393367767334,3.186781032127328e-05,0.4196612536907196,0.00474393367767334,3.186747926520184e-05,0.4277186393737793,0.00474393367767334,3.1867191864876077e-05,0.4330905079841614,0.00474393367767334,3.1866769859334454e-05,0.4330035150051117,0.00474393367767334,3.186603498761542e-05,0.4246842861175537,0.00474393367767334,3.1864805350778624e-05,0.4053594470024109,0.00474393367767334,3.1862902687862515e-05,0.3722555637359619,0.00474393367767334,3.186014509992674e-05,0.34681883454322815,0.011501788161695004,3.1857987778494135e-05,0.3188483417034149,0.030185267329216003,3.185537934768945e-05,0.28919070959091187,0.05840924754738808,3.185242530889809e-05,0.2586926221847534,0.09378860145807266,3.184923480148427e-05,0.22820068895816803,0.13393820822238922,3.1845916964812204e-05,0.19856154918670654,0.17647293210029602,3.18425809382461e-05,0.170621857047081,0.21900765597820282,3.1839335861150175e-05,0.14522825181484222,0.2591572403907776,3.183629087288864e-05,0.12322737276554108,0.2945365905761719,3.18335514748469e-05,0.1054658591747284,0.32276055216789246,3.1831230444367975e-05,0.09279035776853561,0.3414440155029297,3.182943328283727e-05,0.0860474705696106,0.3482019305229187,3.1828276405576617e-05,0.08129613101482391,0.3449706435203552,3.1826741178520024e-05,0.08417380601167679,0.3360370397567749,3.182621003361419e-05,0.09320040047168732,0.32254162430763245,3.1826515623833984e-05,0.1068957969546318,0.3056248426437378,3.182748696417548e-05,0.12377990037202835,0.2864271402359009,3.1828953069634736e-05,0.14237259328365326,0.26608896255493164,3.183074659318663e-05,0.16119378805160522,0.2457507848739624,3.183269654982723e-05,0.17876335978507996,0.2265530675649643,3.1834631954552606e-05,0.19360122084617615,0.20963627099990845,3.1836385460337624e-05,0.2042272537946701,0.1961408406496048,3.183778972015716e-05,0.20916135609149933,0.18720725178718567,3.183867011102848e-05,0.20692336559295654,0.1839759647846222,3.1838862923905253e-05,0.20150743424892426,0.18720726668834686,3.183881926815957e-05,0.20426791906356812,0.196140855550766,3.183928856742568e-05,0.2136012762784958,0.20963627099990845,3.1840168958297e-05,0.22790394723415375,0.2265530675649643,3.184135493938811e-05,0.24557237327098846,0.2457507848739624,3.184274464729242e-05,0.2650029957294464,0.26608896255493164,3.184423621860333e-05,0.28459227085113525,0.2864271402359009,3.184572415193543e-05,0.30273663997650146,0.3056248426437378,3.184710658388212e-05,0.3178325295448303,0.32254165410995483,3.184827801305801e-05,0.3282763957977295,0.3360370695590973,3.184913657605648e-05,0.33246469497680664,0.3449706733226776,3.184957677149214e-05,0.32879382371902466,0.3482019305229187,3.184950037393719e-05,0.31801915168762207,0.34387311339378357,3.1848903745412827e-05,0.3053226172924042,0.33159342408180237,3.18480197165627e-05,0.29041197896003723,0.31242308020591736,3.18468373734504e-05,0.27299508452415466,0.2874222695827484,3.1845353078097105e-05,0.25277969241142273,0.2576512098312378,3.18435559165664e-05,0.22947362065315247,0.22417011857032776,3.184143497492187e-05,0.20278465747833252,0.18803918361663818,3.183898297720589e-05,0.17242060601711273,0.15031859278678894,3.183619264746085e-05,0.13808926939964294,0.11206857115030289,3.1833056709729135e-05,0.0994984433054924,0.0743493139743805,3.182956425007433e-05,0.056355927139520645,0.038221023976802826,3.182570799253881e-05,0.008369505405426025,0.00474393367767334,3.1821484299143776e-05]
var neonZuulPoints=[0.07956287264823914,0.8550736904144287,1.1628148399722704e-07,0.09946952760219574,0.8550736904144287,-0.07352419942617416,0.12362322211265564,0.8550736904144287,-0.12152768671512604,0.15117454528808594,0.8550736904144287,-0.1476561725139618,0.18127410113811493,0.8550736904144287,-0.15555548667907715,0.21307246387004852,0.8550736904144287,-0.14887146651744843,0.24572023749351501,0.8550736904144287,-0.13124994933605194,0.2783679962158203,0.8550736904144287,-0.10633675754070282,0.3101663589477539,0.8550736904144287,-0.07777773588895798,0.3402658998966217,0.8550736904144287,-0.049218714237213135,0.367817223072052,0.8550736904144287,-0.024305526167154312,0.3919709324836731,0.8550736904144287,-0.006684005260467529,0.41187766194343567,0.8550736904144287,7.515293276583179e-08,0.41801947355270386,0.8477250933647156,7.389590450657124e-08,0.40428897738456726,0.8274083137512207,7.042059024797709e-08,0.3749523162841797,0.7967169880867004,6.517065287425794e-08,0.33427560329437256,0.7582448124885559,5.8589744611481365e-08,0.2865249812602997,0.7145853638648987,5.112152479114229e-08,0.23596656322479248,0.6683322787284851,4.320964563930829e-08,0.18686646223068237,0.6220791935920715,3.529776648747429e-08,0.14349082112312317,0.5784197449684143,2.782954489077838e-08,0.11010576039552689,0.5399475693702698,2.1248636628001805e-08,0.09097740054130554,0.5092562437057495,1.5998699254282656e-08,0.09037187695503235,0.48893946409225464,1.2523388548402181e-08,0.11255547404289246,0.48159080743789673,1.126636206549847e-08,0.14572522044181824,0.48159080743789673,1.1543836109240146e-08,0.17566506564617157,0.48159080743789673,1.231097090936828e-08,0.20302098989486694,0.48159080743789673,1.3469834136969894e-08,0.22843897342681885,0.48159080743789673,1.4922493463132014e-08,0.2525649964809418,0.48159080743789673,1.6571018335298504e-08,0.276045024394989,0.48159080743789673,1.831747553637797e-08,0.29952505230903625,0.48159080743789673,2.0063932737457435e-08,0.3236510753631592,0.48159080743789673,2.1712457609623925e-08,0.3490690588951111,0.48159080743789673,2.3165117823964465e-08,0.37642496824264526,0.48159080743789673,2.432398105156608e-08,0.4063647985458374,0.48159080743789673,2.5091116739872632e-08,0.4395344853401184,0.48159080743789673,2.536858900725747e-08,0.4736844599246979,0.48159080743789673,2.5438170681013617e-08,0.5056480169296265,0.48159080743789673,2.5630541244936467e-08,0.5346958041191101,0.48159080743789673,2.592114434207815e-08,0.5600984692573547,0.48159080743789673,2.628542006277712e-08,0.5811265707015991,0.48159080743789673,2.6698812050085508e-08,0.5970507264137268,0.48159080743789673,2.7136762170698603e-08,0.6071415543556213,0.48159080743789673,2.7574712291311698e-08,0.6106696128845215,0.48159080743789673,2.7988104278620085e-08,0.6069055795669556,0.48159080743789673,2.8352379999319055e-08,0.5951200723648071,0.48159080743789673,2.864298309646074e-08,0.5745836496353149,0.48159080743789673,2.883535366038359e-08,0.5445668697357178,0.48159080743789673,2.8904935334139736e-08,0.5218667387962341,0.48893943428993225,2.997983372665658e-08,0.5086795091629028,0.5092561841011047,3.295161477012698e-08,0.5035718083381653,0.539947509765625,3.744089838164655e-08,0.5051103234291077,0.5784196853637695,4.306831158373825e-08,0.5118617415428162,0.6220791339874268,4.9454477846211375e-08,0.5223926901817322,0.6683322191238403,5.622002063887521e-08,0.5352698564529419,0.7145853042602539,6.298556343153905e-08,0.5490598678588867,0.7582447528839111,6.937172969401217e-08,0.5623294711112976,0.7967169284820557,7.499914289610388e-08,0.573645293712616,0.8274082541465759,7.948843006033712e-08,0.5815739631652832,0.8477250337600708,8.246021110380752e-08,0.5846821665763855,0.8550736904144287,8.353509883818333e-08,0.5817404985427856,0.8477250933647156,8.250036387380533e-08,0.5737116932868958,0.8274083137512207,7.963961934365216e-08,0.5624511241912842,0.7967169880867004,7.53180700030498e-08,0.5498142838478088,0.7582448124885559,6.990091350189687e-08,0.5376566648483276,0.7145853638648987,6.375335459551934e-08,0.5278336405754089,0.6683322787284851,5.724059093381584e-08,0.5222006440162659,0.6220791935920715,5.0727827272112336e-08,0.5226131677627563,0.5784197449684143,4.458026836573481e-08,0.5309266448020935,0.5399475693702698,3.916311186458188e-08,0.5489965081214905,0.5092562437057495,3.484155897126584e-08,0.5786781907081604,0.48893946409225464,3.198081088839899e-08,0.6218270063400269,0.48159080743789673,3.094607237130731e-08,0.650558352470398,0.48159080743789673,3.1103063236059825e-08,0.6682272553443909,0.48159080743789673,3.15370947134852e-08,0.6770462393760681,0.48159080743789673,3.219276223376255e-08,0.6792278289794922,0.48159080743789673,3.3014654121643616e-08,0.676984429359436,0.48159080743789673,3.394736225459383e-08,0.6725285649299622,0.48159080743789673,3.493547851007861e-08,0.6680727005004883,0.48159080743789673,3.5923594765563394e-08,0.6658293008804321,0.48159080743789673,3.6856302898513604e-08,0.6680108308792114,0.48159080743789673,3.767819478639467e-08,0.6768298149108887,0.48159080743789673,3.833386230667202e-08,0.6944987177848816,0.48159080743789673,3.8767893784097396e-08,0.7232300043106079,0.48159080743789673,3.892489175427727e-08,0.7524660229682922,0.48893943428993225,3.9945049934431154e-08,0.771221399307251,0.5092561841011047,4.276548537518465e-08,0.7810673117637634,0.539947509765625,4.702614120333237e-08,0.7835748195648193,0.5784196853637695,5.2366964098382596e-08,0.780315101146698,0.6220791339874268,5.842790073984361e-08,0.7728592157363892,0.6683322191238403,6.484889070179634e-08,0.7627783417701721,0.7145853042602539,7.126988066374906e-08,0.7516435980796814,0.7582447528839111,7.733081730521008e-08,0.7410261034965515,0.7967169284820557,8.26716402002603e-08,0.732496976852417,0.8274082541465759,8.693229602840802e-08,0.7276273369789124,0.8477250337600708,8.975273146916152e-08,0.7279883027076721,0.8550736904144287,9.077289320202908e-08,0.7336028814315796,0.8477250933647156,8.979396426411768e-08,0.7425716519355774,0.8274083137512207,8.708752119446217e-08,0.7535820603370667,0.7967169880867004,8.299906539832591e-08,0.7653216123580933,0.7582448124885559,7.787409828097225e-08,0.7764778733253479,0.7145853638648987,7.205812835309189e-08,0.7857382893562317,0.6683322787284851,6.589665701994818e-08,0.7917903661727905,0.6220791935920715,5.973518568680447e-08,0.7933216094970703,0.5784197449684143,5.391921575892411e-08,0.7890195250511169,0.5399475693702698,4.879425219428413e-08,0.7775716185569763,0.5092562437057495,4.470579639814787e-08,0.7576653957366943,0.48893946409225464,4.199935332849236e-08,0.7279883027076721,0.48159080743789673,4.102043504872199e-08,0.7175350189208984,0.48159080743789673,4.119030805327384e-08,0.7199888825416565,0.48159080743789673,4.165995903804287e-08,0.7329596281051636,0.48159080743789673,4.236942885427197e-08,0.754056990146637,0.48159080743789673,4.325876545863139e-08,0.7808907628059387,0.48159080743789673,4.4268013255077676e-08,0.8110706806182861,0.48159080743789673,4.533721309485372e-08,0.8422064781188965,0.48159080743789673,4.640641293462977e-08,0.8719078898429871,0.48159080743789673,4.741566073107606e-08,0.8977847099304199,0.48159080743789673,4.8304997335435473e-08,0.9174466729164124,0.48159080743789673,4.9014467151664576e-08,0.9285035133361816,0.48159080743789673,4.948411458371993e-08,0.9285650253295898,0.48159080743789673,4.9653987588271775e-08,0.8992522358894348,0.48893943428993225,5.0671559392867493e-08,0.8803531527519226,0.5092561841011047,5.3484850326412925e-08,0.8704267144203186,0.539947509765625,5.773471656311813e-08,0.8680317997932434,0.5784196853637695,6.306201072447948e-08,0.8717274069786072,0.6220791339874268,6.910759253742071e-08,0.8800724148750305,0.6683322191238403,7.55123181761519e-08,0.8916257619857788,0.7145853042602539,8.191704381488307e-08,0.9049463868141174,0.7582447528839111,8.796262562782431e-08,0.918593168258667,0.7967169284820557,9.328991978918566e-08,0.9311250448226929,0.8274082541465759,9.753978247317718e-08,0.9411009550094604,0.8477250337600708,1.0035306985400894e-07,0.9470797777175903,0.8550736904144287,1.0137065942217305e-07,0.9471621513366699,0.8477250933647156,1.0039195785793709e-07,0.9415222406387329,0.8274083137512207,9.768612585503433e-08,0.9318295121192932,0.7967169880867004,9.359859376445456e-08,0.9197534322738647,0.7582448124885559,8.847479193718755e-08,0.9069634675979614,0.7145853638648987,8.266013651336834e-08,0.8951290249824524,0.6683322787284851,7.650005784398672e-08,0.8859195709228516,0.6220791935920715,7.03399791746051e-08,0.8810045719146729,0.5784197449684143,6.45253237507859e-08,0.8820534944534302,0.5399475693702698,5.9401518370805206e-08,0.8907358050346375,0.5092562437057495,5.5313989832939114e-08,0.9087209105491638,0.48893946409225464,5.260816138275004e-08,0.937678337097168,0.48159080743789673,5.16294562658004e-08,0.966926097869873,0.48159080743789673,5.1786447130552915e-08,0.9860228896141052,0.48159080743789673,5.2220478607978293e-08,0.9969988465309143,0.48159080743789673,5.287614612825564e-08,1.0018842220306396,0.48159080743789673,5.3698038016136707e-08,1.002709150314331,0.48159080743789673,5.463074614908692e-08,1.0015039443969727,0.48159080743789673,5.56188624045717e-08,1.0002987384796143,0.48159080743789673,5.6606978660056484e-08,1.0011236667633057,0.48159080743789673,5.7539686793006695e-08,1.0060089826583862,0.48159080743789673,5.836157868088776e-08,1.0169849395751953,0.48159080743789673,5.901724620116511e-08,1.0360816717147827,0.48159080743789673,5.9451277678590486e-08,1.0653295516967773,0.48159080743789673,5.960827564877036e-08,1.0944112539291382,0.48893943428993225,6.053589629573253e-08,1.11273992061615,0.5092561841011047,6.310048661362089e-08,1.1219412088394165,0.539947509765625,6.697464982607926e-08,1.1236406564712524,0.5784196853637695,7.183099626217881e-08,1.1194639205932617,0.6220791339874268,7.734212914556338e-08,1.1110366582870483,0.6683322191238403,8.318065880530412e-08,1.0999844074249268,0.7145853042602539,8.901918846504486e-08,1.0879327058792114,0.7582447528839111,9.453032134842942e-08,1.0765072107315063,0.7967169284820557,9.938666778452898e-08,1.067333459854126,0.8274082541465759,1.0326083099698735e-07,1.0620371103286743,0.8477250337600708,1.0582541420944835e-07,1.0622438192367554,0.8550736904144287,1.0675304906726524e-07,1.067813515663147,0.8477250933647156,1.0592956556365607e-07,1.076772928237915,0.8274083137512207,1.0365286584601563e-07,1.0879976749420166,0.7967169880867004,1.0021359742040659e-07,1.1003633737564087,0.7582448124885559,9.590240779289161e-08,1.112745761871338,0.7145853638648987,9.100993025867865e-08,1.1240205764770508,0.6683322787284851,8.582681232383038e-08,1.1330633163452148,0.6220791935920715,8.064369438898211e-08,1.1387497186660767,0.5784197449684143,7.575121685476915e-08,1.1399554014205933,0.5399475693702698,7.144002722725418e-08,1.1355561017990112,0.5092562437057495,6.800075880164513e-08,1.1244274377822876,0.48893946409225464,6.57240590840047e-08,1.1054449081420898,0.48159080743789673,6.490057558039553e-08,1.0814727544784546,0.48159080743789673,6.50281464231739e-08,1.0771373510360718,0.48159080743789673,6.538084562635049e-08,1.0888099670410156,0.48159080743789673,6.59136460967602e-08,1.1128617525100708,0.48159080743789673,6.658152074123791e-08,1.145664095878601,0.48159080743789673,6.733944246661849e-08,1.1835881471633911,0.48159080743789673,6.81423912851642e-08,1.2230052947998047,0.48159080743789673,6.89453401037099e-08,1.2602866888046265,0.48159080743789673,6.970326182909048e-08,1.2918037176132202,0.48159080743789673,7.037113647356819e-08,1.3139275312423706,0.48159080743789673,7.09039369439779e-08,1.3230293989181519,0.48159080743789673,7.12566361471545e-08,1.3154807090759277,0.48159080743789673,7.138419277907815e-08,1.2853139638900757,0.48893943428993225,7.232019072489493e-08,1.2640538215637207,0.5092561841011047,7.490794473596907e-08,1.2505607604980469,0.539947509765625,7.881710928359098e-08,1.2436950206756592,0.5784196853637695,8.371732462819637e-08,1.2423169612884521,0.6220791339874268,8.927824524107564e-08,1.2452868223190308,0.6683322191238403,9.516951848809185e-08,1.251465082168579,0.7145853042602539,1.0106079173510807e-07,1.2597119808197021,0.7582447528839111,1.0662171234798734e-07,1.2688878774642944,0.7967169284820557,1.1152192769259273e-07,1.2778531312942505,0.8274082541465759,1.1543108513478728e-07,1.2854679822921753,0.8477250337600708,1.1801883914586142e-07,1.2905927896499634,0.8550736904144287,1.1895482998625084e-07,1.2914066314697266,0.8477250933647156,1.1791559018092812e-07,1.2877888679504395,0.8274083137512207,1.1504239694204443e-07,1.2811509370803833,0.7967169880867004,1.107020395352265e-07,1.2729040384292603,0.7582448124885559,1.0526130722610105e-07,1.2644596099853516,0.7145853638648987,9.908699638572216e-08,1.2572288513183594,0.6683322787284851,9.254588917428919e-08,1.2526230812072754,0.6220791935920715,8.600478196285621e-08,1.2520536184310913,0.5784197449684143,7.983047112247732e-08,1.2569317817687988,0.5399475693702698,7.438973881335187e-08,1.2686688899993896,0.5092562437057495,7.004938140653394e-08,1.288676142692566,0.48893946409225464,6.717618816765025e-08,1.3183648586273193,0.48159080743789673,6.613693415147281e-08,1.3472601175308228,0.48159080743789673,6.635018223732914e-08,1.365382194519043,0.48159080743789673,6.693974086147136e-08,1.3748857975006104,0.48159080743789673,6.783035644275515e-08,1.3779253959655762,0.48159080743789673,6.894676118918142e-08,1.3766558170318604,0.48159080743789673,7.021369441417846e-08,1.3732315301895142,0.48159080743789673,7.155588832574722e-08,1.369807243347168,0.48159080743789673,7.289808223731598e-08,1.3685375452041626,0.48159080743789673,7.416501546231302e-08,1.3715771436691284,0.48159080743789673,7.528142020873929e-08,1.3810806274414062,0.48159080743789673,7.617203579002307e-08,1.3992027044296265,0.48159080743789673,7.676160151959266e-08,1.4280979633331299,0.48159080743789673,7.697483539459427e-08]
var groundFragmentShader="precision highp float;uniform float time,stride,pulseIntensity;uniform mat4 viewMatrix,viewProjectionMatrix;uniform vec3 sunDirection,cameraPosition;varying vec3 a,b;vec3 c=vec3(5.8e-6,1.35e-5,3.31e-5);vec3 d=vec3(10);void main(){float e=max(sunDirection.y,0.);vec3 f,g;f=vec3(e);g=f*a+b;gl_FragColor=vec4(g,1);}"
var groundVertexShader="precision highp float;uniform float time,stride,pulseIntensity;uniform mat4 viewMatrix,viewProjectionMatrix;uniform vec3 sunDirection,cameraPosition;varying vec3 a,b;vec3 c=vec3(5.8e-6,1.35e-5,3.31e-5);vec3 d=vec3(10);float r(float e){return 3./(16.*3.1415)*(1.+e*e);}float s(vec3 e,vec3 f){float g,h,i,j;g=dot(f,f);h=2.*dot(e,f);i=dot(e,e)-1.;j=h*h-4.*g*i;return (-h+sqrt(j))/(2.*g);}vec3 t(vec3 e,vec3 f){vec3 g;float h,k,m;h=s(vec3(0,.9,0),e);g=vec3(0);const int i=10;const float j=1./float(i);k=0.;for(int l=0;l<i;l++){k+=j;vec3 m,a,q;m=vec3(0,.9,0)+k*h*e;float n,o,p;n=k*h*6e5;o=(length(m)-.9)*6e5;p=s(m,f)*6e5;a=exp(-p*c);q=exp(-n*.3*c);g+=q*a*c*j*h*6e5;}m=dot(f,e);g*=d*r(m)*(1.+pulseIntensity-mod(time,1.)*pulseIntensity);return g;}attribute float gridIndex;void main(){vec3 e,g,h;e=vec3(mod(gridIndex,stride)-stride*.5,0,floor(gridIndex/stride)-stride*.5);float f,i;f=smoothstep(20.,1e2,length(e.xz));e.xz+=cameraPosition.xz;gl_Position=viewProjectionMatrix*vec4(e,1);g=(viewMatrix*vec4(e,1)).xyz;h=(viewMatrix*vec4(sunDirection,0)).xyz;i=-g.z*2e3;a=(1.-f)*exp(-i*c);b=t(normalize(g),h)*(1.-a);}"
var hatchingVertexShader="//! FRAGMENT"
var modelFragmentShader="precision highp float;uniform float time,ratio;varying vec3 a;void main(){vec3 b=normalize(a);float c=max(dot(b,vec3(0,.707,.707)),0.);gl_FragColor=vec4(c,c,c,1);}"
var modelVertexShader="precision highp float;uniform float time,ratio;varying vec3 a;attribute vec3 position,normal;void main(){float b,c;b=cos(time*.4);c=sin(time*.4);mat2 d=mat2(b,-c,c,b);gl_Position=vec4(position,1);gl_Position.xz=d*gl_Position.xz;gl_Position.x/=ratio;gl_Position.y+=sin(gl_Position.x+time*.2)*.1-.5;gl_Position.w=gl_Position.z+1.8;a=normal;}"
var neonFragmentShader="precision highp float;uniform float time,scale,rainbowFactor,spaceFactor;uniform vec3 origin,sunDirection,cameraZ,direction;uniform mat4 viewMatrix,viewProjectionMatrix;varying vec3 a;varying float b;void main(){vec3 c=vec3(0,pow(1.-length(a)*.5,6.)*b+exp(-mod(time,1.))*.3,0);gl_FragColor=vec4(c,1);}"
var neonVertexShader="precision highp float;uniform float time,scale,rainbowFactor,spaceFactor;uniform vec3 origin,sunDirection,cameraZ,direction;uniform mat4 viewMatrix,viewProjectionMatrix;varying vec3 a;varying float b;attribute vec3 position,tangent;attribute float progress;void main(){vec3 c,d,e;c=cross(cameraZ,tangent);d=direction*position.x+vec3(0,position.y,0);e=origin+d+c*.04;gl_Position=viewProjectionMatrix*vec4(e,1);a=c;b=sin(time-progress)*.5+.5;}"
var rainbowFragmentShader="precision highp float;uniform float time;varying float a;vec3 g(float b){float c,d,e,f;c=floor(b*6.);d=float(c<=2.)+float(c>4.)*.5;e=max(1.-abs(c-2.)*.5,0.);f=(1.-(c-4.)*.5)*float(c>=4.);return vec3(d,e,f);}void main(){gl_FragColor=vec4(g(a),1);}"
var rainbowVertexShader="precision highp float;uniform float time;varying float a;attribute vec2 pos;void main(){a=-pos.y*.5+.5;gl_Position=vec4(pos*vec2(1,sin(pos.x*.8)*.2+.2),0,1);gl_Position.y+=sin(time+pos.x)*.4;}"
var skycolorFragmentShader="vec3 a=vec3(5.8e-6,1.35e-5,3.31e-5);vec3 b=vec3(10);uniform float pulseIntensity;"
var skycolorVertexShader="vec3 a=vec3(5.8e-6,1.35e-5,3.31e-5);vec3 b=vec3(10);uniform float pulseIntensity;"
var skyFragmentShader="precision highp float;uniform float time,tanFov,pulseIntensity;uniform vec2 resolution;uniform mat4 viewMatrix;uniform vec3 sunDirection;vec3 a=vec3(5.8e-6,1.35e-5,3.31e-5);vec3 b=vec3(10);float q(float c){return 3./(16.*3.1415)*(1.+c*c);}float r(vec3 c,vec3 d){float e,f,g,h;e=dot(d,d);f=2.*dot(c,d);g=dot(c,c)-1.;h=f*f-4.*e*g;return (-f+sqrt(h))/(2.*e);}vec3 s(vec3 c,vec3 d){vec3 e;float f,i,k;f=r(vec3(0,.9,0),c);e=vec3(0);const int g=10;const float h=1./float(g);i=0.;for(int j=0;j<g;j++){i+=h;vec3 k,o,p;k=vec3(0,.9,0)+i*f*c;float l,m,n;l=i*f*6e5;m=(length(k)-.9)*6e5;n=r(k,d)*6e5;o=exp(-n*a);p=exp(-l*.3*a);e+=p*o*a*h*f*6e5;}k=dot(d,c);e*=b*q(k)*(1.+pulseIntensity-mod(time,1.)*pulseIntensity);return e;}vec3 t(vec3 c,vec3 d){float e=dot(d,c);vec3 f=b*pow(max(e,0.),1e3+(1.-pulseIntensity*exp(-mod(time,1.)))*3e3);return f;}void main(){vec3 c,d;c=normalize(vec3((gl_FragCoord.x-resolution.x*.5)*tanFov/resolution.y,(gl_FragCoord.y/resolution.y-.5)*tanFov,-1.));c=(viewMatrix*vec4(c,0)).xyz;d=s(c,sunDirection)+t(c,sunDirection);gl_FragColor=vec4(d,1);}"
var skyVertexShader="precision highp float;uniform float time,tanFov,pulseIntensity;uniform vec2 resolution;uniform mat4 viewMatrix;uniform vec3 sunDirection;attribute vec2 position;void main(){gl_Position=vec4(position,1,1);}vec3 a=vec3(5.8e-6,1.35e-5,3.31e-5);vec3 b=vec3(10);"
var wireFragmentShader="precision highp float;uniform float time,ratio;varying vec3 a;void main(){gl_FragColor=vec4(1,1,a.z,1);}"
var wireVertexShader="precision highp float;uniform float time,ratio;varying vec3 a;attribute vec3 position,normal;void main(){float b,c;b=cos(time);c=sin(time);mat2 d=mat2(b,-c,c,b);gl_Position=vec4(position.xzy*.01,1);gl_Position.xz=d*gl_Position.xz;gl_Position.x/=ratio;gl_Position.y+=sin(gl_Position.x+time*5.)*.2-2.;gl_Position.w=gl_Position.z+5.;a=normal;}"
"use strict";

function Background()
{
	this.shader = new ShaderProgram(backgroundVertexShader, backgroundFragmentShader)
	
	// fullscreen quad
	var points = [-1, -1, -1, 1, 1, -1, 1, 1]
	this.mesh = new VertexBuffer(2, gl.FLOAT, new Float32Array(points))
}

Background.prototype.render = function(time, renderParameters)
{
	gl.enable(gl.DEPTH_TEST)
	gl.depthMask(false)
	
	this.shader.bind()
	this.shader.setFloatUniform("time", time)
	this.shader.setVec2Uniform("res", [canvas.width, canvas.height])
	
	var posAttribute = this.shader.getAttributeLocation("vertexPos")
	this.mesh.bind(posAttribute)
	
	gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)
}
"use strict";

function Building(options)
{
	//this.shader = new ShaderProgram(buildingVertexShader, buildingFragmentShader)
	
	/*this.doorMesh = new Mesh(doorMeshBuffer)
	this.windowMesh = new Mesh(windowMeshBuffer)
	this.cornerMesh = new Mesh(cornerMeshBuffer)
	this.roofMesh = new Mesh(roofMeshBuffer)
	this.roofCornerMesh = new Mesh(roofCornerMeshBuffer)
	this.roofTopMesh = new Mesh(roofTopMeshBuffer)*/
	
	this.width = options.width || 4
	this.depth = options.depth || 3
	this.floors = options.floors || 5
	this.origin = options.origin || [0, 0, 0]
	
	var builder = new MeshBuilder()
	
	//this.floors = Math.floor((Math.sin(time * 0.2) + 2.0) * 2.0)
	//this.depth = Math.floor((Math.sin(time * 0.3) + 2.0) * 2.0)
	this.buildWall(builder, [0, 0, 0], this.width - 1, this.floors, 0)
	this.buildWall(builder, [this.width - 1, 0, -1], this.depth - 1, this.floors, Math.PI * 0.5)
	this.buildWall(builder, [this.width - 2, 0, -this.depth], this.width - 1, this.floors, Math.PI)
	this.buildWall(builder, [-1, 0, -this.depth + 1], this.depth - 1, this.floors, -Math.PI * 0.5)
	this.buildRoof(builder, [0, this.floors, -1])
	
	this.mesh = builder.buildMesh()
}

Building.prototype.render = function(positionAttribute, normalAttribute)
{
	/*gl.enable(gl.DEPTH_TEST)
	gl.depthFunc(gl.LEQUAL)
	gl.depthMask(true)
	
	this.shader.bind()
	this.shader.setFloatUniform("time", time)
	this.shader.setFloatUniform("ratio", renderParameters.camera.aspect)
	this.shader.setMat4Uniform("viewProjectionMatrix", renderParameters.camera.viewProjectionMatrix)
	this.shader.setMat4Uniform("viewMatrix", renderParameters.camera.viewMatrix)
	this.shader.setVec3Uniform("sunDirection", renderParameters.sunDirection)
	
	this.shader.setVec3Uniform("origin", this.origin)
	//this.shader.setFloatUniform("angle", 0)
	
	var positionAttribute = this.shader.getAttributeLocation("position")
	var normalAttribute = this.shader.getAttributeLocation("normal")*/
	
	this.mesh.render(positionAttribute, normalAttribute)
}

Building.prototype.buildWall = function(builder, origin, length, height, angle)
{
	var position = vec3.create()
	for (var x = 0; x < length; x++)
	{
		for (var y = 0; y < height; y++)
		{
			//vec3.add(position, this.origin, origin)
			vec3.add(position, origin, [Math.cos(angle) * x, y, -Math.sin(angle) * x])
			
			if (x == length - 1)
			{
				if (y == height - 1)
					builder.appendMeshBuffer(roofCornerMeshBuffer, position, angle)
				else if (y > 0)
					builder.appendMeshBuffer(cornerMeshBuffer, position, angle)
				else
					builder.appendMeshBuffer(cornerBottomMeshBuffer, position, angle)
			}
			else
			{
				if (y == height - 1)
					builder.appendMeshBuffer(roofMeshBuffer, position, angle)
				else if (y > 0)
					builder.appendMeshBuffer(windowMeshBuffer, position, angle)
				else
				{
					if (Math.random() >= 0.5)
						builder.appendMeshBuffer(doorMeshBuffer, position, angle)
					else
						builder.appendMeshBuffer(otherBottomMeshBuffer, position, angle)
				}
			}
		}
	}
}

Building.prototype.buildRoof = function(builder, origin)
{
	var position = vec3.create()
	for (var x = 0; x < this.width - 2; x++)
	{
		for (var z = 0; z < this.depth - 2; z++)
		{
			//vec3.add(position, this.origin, [origin[0] + x, origin[1], origin[2] - z])
			vec3.add(position, origin, [x, 0, -z])
			builder.appendMeshBuffer(roofTopMeshBuffer, position, 0)
		}
	}
}

/*Building.prototype.drawWall = function(origin, length, height, angle, positionAttribute, normalAttribute)
{
	for (var x = 0; x < length; x++)
	{
		for (var y = 0; y < height; y++)
		{
			var position = vec3.clone(this.origin)
			vec3.add(position, position, origin)
			vec3.add(position, position, [Math.cos(angle) * x, y, -Math.sin(angle) * x])
			this.shader.setVec3Uniform("origin", position)
			this.shader.setFloatUniform("angle", angle)
			
			if (x == length - 1)
			{
				if (y == height - 1)
					this.roofCornerMesh.render(positionAttribute, normalAttribute)
				else
					this.cornerMesh.render(positionAttribute, normalAttribute)
			}
			else
			{
				if (y == height - 1)
					this.roofMesh.render(positionAttribute, normalAttribute)
				else if (y > 0)
					this.windowMesh.render(positionAttribute, normalAttribute)
				else
					this.doorMesh.render(positionAttribute, normalAttribute)
			}
		}
	}
}

Building.prototype.drawRoof = function(origin, positionAttribute, normalAttribute)
{
	for (var x = 0; x < this.width - 1; x++)
	{
		for (var z = 0; z < this.depth - 1; z++)
		{
			this.shader.setVec3Uniform("origin", [origin[0] + x, origin[1], origin[2] - z])
			this.shader.setFloatUniform("angle", 0)
			
			this.roofTopMesh.render(positionAttribute, normalAttribute)
		}
	}
}*/
"use strict";

function BuildingText(text)
{
	this.shader = new ShaderProgram(buildingVertexShader, buildingFragmentShader)
	
	this.building = new Building({
		width: 2,
		depth: 2,
		floors: 6
	})
	
	this.computeTextMap(text)
}

BuildingText.prototype.computeTextMap = function(text)
{
	var currentX = -text.length * 2
	this.textMap = []
	
	for (var i = 0; i < text.length; i++)
	{
		var chr = text.charAt(i)
		
		if (chr in this.characterPoints)
		{
			var points = this.characterPoints[chr]
			var startIndex = this.textMap.length
			this.textMap.length += points.length
			
			for (var j = 0; j < points.length; j += 2)
			{
				this.textMap[startIndex + j + 0] = points[j + 0] + currentX
				this.textMap[startIndex + j + 1] = points[j + 1]
			}
		}
		
		// each character is 3 pixels wide
		currentX += 4
	}
}

BuildingText.prototype.render = function(time, renderParameters)
{
	gl.enable(gl.DEPTH_TEST)
	gl.depthFunc(gl.LEQUAL)
	gl.depthMask(true)
	
	this.shader.bind()
	this.shader.setFloatUniform("time", time)
	this.shader.setFloatUniform("ratio", renderParameters.camera.aspect)
	this.shader.setMat4Uniform("viewProjectionMatrix", renderParameters.camera.viewProjectionMatrix)
	this.shader.setMat4Uniform("viewMatrix", renderParameters.camera.viewMatrix)
	this.shader.setVec3Uniform("sunDirection", renderParameters.sunDirection)
	
	var positionAttribute = this.shader.getAttributeLocation("position")
	var normalAttribute = this.shader.getAttributeLocation("normal")
	
	var beat = Math.exp(-(time % 1.0))
	for (var i = 0; i < this.textMap.length; i += 2)
	{
		this.shader.setVec3Uniform("origin", [this.textMap[i + 0] * 3, 0, this.textMap[i + 1] * 3])
		var height = ((3527 * i) % 3) / 3
		this.shader.setFloatUniform("scale", height + beat)
		this.shader.setFloatUniform("rainbowFactor", beat * 0.8)
		this.building.render(positionAttribute, normalAttribute)
	}
}

BuildingText.prototype.characterPoints = {
	"J": [2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 1, 4, 0, 4, 0, 3],
	"S": [0, 0, 1, 0, 2, 0, 0, 1, 0, 2, 1, 2, 2, 2, 2, 3, 0, 4, 1, 4, 2, 4],
	"-": [0, 2, 1, 2, 2, 2],
	"P": [0, 0, 1, 0, 2, 0, 0, 1, 2, 1, 0, 2, 1, 2, 2, 2, 0, 3, 0, 4],
	"R": [0, 0, 1, 0, 2, 0, 0, 1, 2, 1, 0, 2, 1, 2, 2, 2, 0, 3, 0, 4, 1, 3, 2, 4],
	"I": [0, 0, 1, 0, 2, 0, 1, 1, 1, 2, 1, 3, 0, 4, 1, 4, 2, 4],
	"D": [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 1, 0, 1, 4, 2, 1, 2, 2, 2, 3],
	"E": [0, 0, 1, 0, 2, 0, 0, 1, 0, 2, 1, 2, 0, 3, 0, 4, 1, 4, 2, 4],
	"T": [0, 0, 1, 0, 2, 0, 1, 1, 1, 2, 1, 3, 1, 4],
	"K": [0, 0, 2, 0, 0, 1, 2, 1, 0, 2, 1, 2, 0, 3, 2, 3, 0, 4, 2, 4],
	"O": [0, 0, 1, 0, 2, 0, 0, 1, 2, 1, 0, 2, 2, 2, 0, 3, 2, 3, 0, 4, 1, 4, 2, 4],
	"W": [0, 0, 2, 0, 0, 1, 2, 1, 0, 2, 2, 2, 0, 3, 1, 3, 2, 3, 0, 4, 2, 4],
	"M": [0, 0, 2, 0, 0, 1, 1, 1, 2, 1, 0, 2, 2, 2, 0, 3, 2, 3, 0, 4, 2, 4],
	"N": [0, 0, 2, 0, 0, 1, 1, 1, 2, 1, 0, 2, 1, 2, 2, 2, 0, 3, 2, 3, 0, 4, 2, 4],
	"A": [1, 0, 0, 1, 2, 1, 0, 2, 1, 2, 2, 2, 0, 3, 2, 3, 0, 4, 2, 4]
}
"use strict";

function Camera()
{
	// view parameters
	
	this._origin = vec3.create()
	Object.defineProperty(this, "origin", {
		get: function() { return vec3.clone(this._origin) },
		set: function(origin) { vec3.copy(this._origin, origin); this._rebuildMatrix() }
	})
	
	this._target = vec3.clone([0, 0, -1])
	Object.defineProperty(this, "target", {
		get: function() { return vec3.clone(this._target) },
		set: function(target) { vec3.copy(this._target, target); this._rebuildMatrix() }
	})
	
	this._up = vec3.clone([0, 1, 0])
	Object.defineProperty(this, "up", {
		get: function() { return vec3.clone(this._up) },
		set: function(up) { vec3.copy(this._up, up); this._rebuildMatrix() }
	})
	
	// projection parameters
	
	this._fov = Math.PI * 0.5
	Object.defineProperty(this, "fov", {
		get: function() { return this._fov },
		set: function(fov) { this._fov = fov; this._rebuildMatrix() }
	})
	
	this._aspect = 1.0
	Object.defineProperty(this, "aspect", {
		get: function() { return this._aspect },
		set: function(aspect) { this._aspect = aspect; this._rebuildMatrix() }
	})
	
	this._nearPlane = 0.1
	Object.defineProperty(this, "nearPlane", {
		get: function() { return this._nearPlane },
		set: function(nearPlane) { this._nearPlane = nearPlane; this._rebuildMatrix() }
	})
	
	this._farPlane = 200.0
	Object.defineProperty(this, "farPlane", {
		get: function() { return this._farPlane },
		set: function(farPlane) { this._farPlane = farPlane; this._rebuildMatrix() }
	})
	
	// derived values
	this._viewMatrix = mat4.create()
	Object.defineProperty(this, "viewMatrix", {
		get: function() { return mat4.clone(this._viewMatrix) }
	})
	
	this._projectionMatrix = mat4.create()
	Object.defineProperty(this, "projectionMatrix", {
		get: function() { return mat4.clone(this._projectionMatrix) }
	})
	
	this._viewProjectionMatrix = mat4.create()
	Object.defineProperty(this, "viewProjectionMatrix", {
		get: function() { return mat4.clone(this._viewProjectionMatrix) }
	})
	
	Object.defineProperty(this, "axisZ", {
		get: function()
		{
			var result = vec3.create()
			vec3.subtract(result, result, this._origin, this._target)
			vec3.normalize(result, result)
			return result
		}
	})
}

Camera.prototype._rebuildMatrix = function()
{
	mat4.lookAt(this._viewMatrix, this._origin, this._target, this._up)
	mat4.perspective(this._projectionMatrix, this._fov, this._aspect, this._nearPlane, this._farPlane)
	mat4.multiply(this._viewProjectionMatrix, this._projectionMatrix, this._viewMatrix)
}
"use strict";

function Demo()
{
	if (!gl.getExtension("OES_element_index_uint"))
	{
		alert("Your browser does not support OES_element_index_uint!")
	}
	
	Math.seedrandom("plop")
	
	// load sound
	this.audio = new Audio()
	this.audio.src = "Pissaladiere04_mix.mp3"
	//this.audio.volume = 0
	this.bpm = 128
	
	var self = this
	this.audio.addEventListener("loadedmetadata", function()
	{
		// wait to have the actual audio duration (not NaN)
		self.beatDuration = self.audio.duration * self.bpm / 60.0
		self.timeline = new Timeline(self.beatDuration)
		self.audio.play()
	})
	
	/*$(window).keydown(function(event)
	{
		if (String.fromCharCode(event.keyCode) == ' ')
		{
			if (self.audio.paused)
				self.audio.play()
			else
				self.audio.pause()
			
			return false;
		}
		
		return true;
	})*/
	
	$("#timeline .content").mousedown(function(downEvent)
	{
		if (downEvent.button == 0)
		{
			//debugger;
			self.seek((downEvent.clientX - downEvent.delegateTarget.offsetLeft) * self.beatDuration / this.clientWidth)
			
			// start dragging
			$("#timeline .content").mousemove(function(moveEvent)
			{
				self.seek((moveEvent.clientX - moveEvent.delegateTarget.offsetLeft) * self.beatDuration / this.clientWidth)
			})
		}
	})
	
	$(document).mouseup(function(event)
	{
		// stop dragging
		$("#timeline .content").off("mousemove")
	})
}

Demo.prototype.update = function()
{
	if (!this.timeline)
		return
	
	var demoTime = this.audio.currentTime * this.bpm / 60.0
	//$(".clips li").text(demoTime)
	
	//this._updateCursor(demoTime)
	
	gl.clearColor(0.0, 0.0, 0.0, 1.0)
	gl.clearDepth(1.0)
	gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
	
	gl.enable(gl.CULL_FACE)
	gl.cullFace(gl.BACK)
	gl.frontFace(gl.CW)
	
	var renderParameters = {
		camera: new Camera(),
		sunDirection: vec3.clone([0, 1, 0])
	}
	
	// default aspect
	renderParameters.camera.aspect = canvas.width / canvas.height
	
	this.timeline.render(demoTime, renderParameters)
}

Demo.prototype.seek = function(time)
{
	// seek audio track
	this.audio.currentTime = time * 60.0 / this.bpm
	
	// update time cursor
	this._updateCursor(time)
}

Demo.prototype._updateCursor = function(time)
{
	var cursorPosition = time * $("#timeline .content").width() / this.beatDuration;
	
	$("#cursor").css("left", cursorPosition)
}
"use strict";

function Environment(options)
{
	this.initialTime = options.initialTime || 12
	this.speed = options.speed || 0
}

Environment.prototype.render = function(time, renderParameters)
{
	// compute sun direction based on time of day
	var currentTime = this.initialTime + time * this.speed
	var currentPhase = currentTime * Math.PI / 12 // half a cycle every 12 hours
	//var sun = vec3.clone([Math.sin(currentPhase), -Math.cos(currentPhase), 0.0])
	var sun = vec3.clone([-0.3, -Math.cos(currentPhase), -Math.sin(currentPhase)])
	vec3.normalize(sun, sun)
	renderParameters.sunDirection = sun
	
	renderParameters.pulseIntensity = (time > 24) ? 0.2 : 0.0
}
"use strict";

function Equalizer(options)
{
	this.shader = new ShaderProgram(buildingVertexShader, buildingFragmentShader)
	
	this.building = new Building({
		width: 3,
		depth: 3,
		floors: 6
	})
}

Equalizer.prototype.render = function(time, renderParameters)
{
	gl.enable(gl.DEPTH_TEST)
	gl.depthFunc(gl.LEQUAL)
	gl.depthMask(true)
	
	this.shader.bind()
	this.shader.setFloatUniform("time", time)
	this.shader.setFloatUniform("ratio", renderParameters.camera.aspect)
	this.shader.setMat4Uniform("viewProjectionMatrix", renderParameters.camera.viewProjectionMatrix)
	this.shader.setMat4Uniform("viewMatrix", renderParameters.camera.viewMatrix)
	this.shader.setVec3Uniform("sunDirection", renderParameters.sunDirection)
	
	var positionAttribute = this.shader.getAttributeLocation("position")
	var normalAttribute = this.shader.getAttributeLocation("normal")
	
	var beat = Math.exp(-(time % 1.0))
	for (var x = 0; x < 6; x++)
	{
		this.shader.setVec3Uniform("origin", [x * 4 - 10.5, 0, 0])
		var height = ((Math.floor(time) * 3527 * x) % 5) / 3
		this.shader.setFloatUniform("scale", height + beat)
		this.shader.setFloatUniform("rainbowFactor", beat)
		this.building.render(positionAttribute, normalAttribute)
	}
}
"use strict";

function FixedCamera(options)
{
	this.origin = options.origin || [0, 0, 0]
	this.target = options.target || [0, 0, -1]
	this.fov = options.fov || Math.PI * 0.5
	this.shake = options.shake || 0
}

FixedCamera.prototype.render = function(time, renderParameters)
{
	renderParameters.camera.origin = this.origin
	renderParameters.camera.target = this.target
	var beat = time % 4
	var lastBeat = (beat > 3) ? beat - 3 : 0
	var lastStep = Math.floor(lastBeat * 2) / 2
	var rand = ((Math.floor(time) * 5987) % 40) / 40
	renderParameters.camera.fov = this.fov + (1.0 - Math.exp(-lastStep)) * this.shake * 0.2
	
	var up = renderParameters.camera.up
	up[0] = this.shake * lastStep * (rand - 0.5) * 3.0
	vec3.normalize(up, up)
	renderParameters.camera.up = up
}
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.2.0
 */
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
;(function(e){"use strict";var t={};typeof exports=="undefined"?typeof define=="function"&&typeof define.amd=="object"&&define.amd?(t.exports={},define(function(){return t.exports})):t.exports=typeof window!="undefined"?window:e:t.exports=exports,function(e){if(!t)var t=1e-6;if(!n)var n=typeof Float32Array!="undefined"?Float32Array:Array;if(!r)var r=Math.random;var i={};i.setMatrixArrayType=function(e){n=e},typeof e!="undefined"&&(e.glMatrix=i);var s={};s.create=function(){var e=new n(2);return e[0]=0,e[1]=0,e},s.clone=function(e){var t=new n(2);return t[0]=e[0],t[1]=e[1],t},s.fromValues=function(e,t){var r=new n(2);return r[0]=e,r[1]=t,r},s.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e},s.set=function(e,t,n){return e[0]=t,e[1]=n,e},s.add=function(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e},s.subtract=function(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e},s.sub=s.subtract,s.multiply=function(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e},s.mul=s.multiply,s.divide=function(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e},s.div=s.divide,s.min=function(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e},s.max=function(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e},s.scale=function(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e},s.scaleAndAdd=function(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e},s.distance=function(e,t){var n=t[0]-e[0],r=t[1]-e[1];return Math.sqrt(n*n+r*r)},s.dist=s.distance,s.squaredDistance=function(e,t){var n=t[0]-e[0],r=t[1]-e[1];return n*n+r*r},s.sqrDist=s.squaredDistance,s.length=function(e){var t=e[0],n=e[1];return Math.sqrt(t*t+n*n)},s.len=s.length,s.squaredLength=function(e){var t=e[0],n=e[1];return t*t+n*n},s.sqrLen=s.squaredLength,s.negate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e},s.normalize=function(e,t){var n=t[0],r=t[1],i=n*n+r*r;return i>0&&(i=1/Math.sqrt(i),e[0]=t[0]*i,e[1]=t[1]*i),e},s.dot=function(e,t){return e[0]*t[0]+e[1]*t[1]},s.cross=function(e,t,n){var r=t[0]*n[1]-t[1]*n[0];return e[0]=e[1]=0,e[2]=r,e},s.lerp=function(e,t,n,r){var i=t[0],s=t[1];return e[0]=i+r*(n[0]-i),e[1]=s+r*(n[1]-s),e},s.random=function(e,t){t=t||1;var n=r()*2*Math.PI;return e[0]=Math.cos(n)*t,e[1]=Math.sin(n)*t,e},s.transformMat2=function(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[2]*i,e[1]=n[1]*r+n[3]*i,e},s.transformMat2d=function(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[2]*i+n[4],e[1]=n[1]*r+n[3]*i+n[5],e},s.transformMat3=function(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[3]*i+n[6],e[1]=n[1]*r+n[4]*i+n[7],e},s.transformMat4=function(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[4]*i+n[12],e[1]=n[1]*r+n[5]*i+n[13],e},s.forEach=function(){var e=s.create();return function(t,n,r,i,s,o){var u,a;n||(n=2),r||(r=0),i?a=Math.min(i*n+r,t.length):a=t.length;for(u=r;u<a;u+=n)e[0]=t[u],e[1]=t[u+1],s(e,e,o),t[u]=e[0],t[u+1]=e[1];return t}}(),s.str=function(e){return"vec2("+e[0]+", "+e[1]+")"},typeof e!="undefined"&&(e.vec2=s);var o={};o.create=function(){var e=new n(3);return e[0]=0,e[1]=0,e[2]=0,e},o.clone=function(e){var t=new n(3);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t},o.fromValues=function(e,t,r){var i=new n(3);return i[0]=e,i[1]=t,i[2]=r,i},o.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e},o.set=function(e,t,n,r){return e[0]=t,e[1]=n,e[2]=r,e},o.add=function(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e},o.subtract=function(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e},o.sub=o.subtract,o.multiply=function(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e},o.mul=o.multiply,o.divide=function(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e},o.div=o.divide,o.min=function(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e},o.max=function(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e},o.scale=function(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e},o.scaleAndAdd=function(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e},o.distance=function(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2];return Math.sqrt(n*n+r*r+i*i)},o.dist=o.distance,o.squaredDistance=function(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2];return n*n+r*r+i*i},o.sqrDist=o.squaredDistance,o.length=function(e){var t=e[0],n=e[1],r=e[2];return Math.sqrt(t*t+n*n+r*r)},o.len=o.length,o.squaredLength=function(e){var t=e[0],n=e[1],r=e[2];return t*t+n*n+r*r},o.sqrLen=o.squaredLength,o.negate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e},o.normalize=function(e,t){var n=t[0],r=t[1],i=t[2],s=n*n+r*r+i*i;return s>0&&(s=1/Math.sqrt(s),e[0]=t[0]*s,e[1]=t[1]*s,e[2]=t[2]*s),e},o.dot=function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]},o.cross=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=n[0],u=n[1],a=n[2];return e[0]=i*a-s*u,e[1]=s*o-r*a,e[2]=r*u-i*o,e},o.lerp=function(e,t,n,r){var i=t[0],s=t[1],o=t[2];return e[0]=i+r*(n[0]-i),e[1]=s+r*(n[1]-s),e[2]=o+r*(n[2]-o),e},o.random=function(e,t){t=t||1;var n=r()*2*Math.PI,i=r()*2-1,s=Math.sqrt(1-i*i)*t;return e[0]=Math.cos(n)*s,e[1]=Math.sin(n)*s,e[2]=i*t,e},o.transformMat4=function(e,t,n){var r=t[0],i=t[1],s=t[2];return e[0]=n[0]*r+n[4]*i+n[8]*s+n[12],e[1]=n[1]*r+n[5]*i+n[9]*s+n[13],e[2]=n[2]*r+n[6]*i+n[10]*s+n[14],e},o.transformMat3=function(e,t,n){var r=t[0],i=t[1],s=t[2];return e[0]=r*n[0]+i*n[3]+s*n[6],e[1]=r*n[1]+i*n[4]+s*n[7],e[2]=r*n[2]+i*n[5]+s*n[8],e},o.transformQuat=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=n[0],u=n[1],a=n[2],f=n[3],l=f*r+u*s-a*i,c=f*i+a*r-o*s,h=f*s+o*i-u*r,p=-o*r-u*i-a*s;return e[0]=l*f+p*-o+c*-a-h*-u,e[1]=c*f+p*-u+h*-o-l*-a,e[2]=h*f+p*-a+l*-u-c*-o,e},o.forEach=function(){var e=o.create();return function(t,n,r,i,s,o){var u,a;n||(n=3),r||(r=0),i?a=Math.min(i*n+r,t.length):a=t.length;for(u=r;u<a;u+=n)e[0]=t[u],e[1]=t[u+1],e[2]=t[u+2],s(e,e,o),t[u]=e[0],t[u+1]=e[1],t[u+2]=e[2];return t}}(),o.str=function(e){return"vec3("+e[0]+", "+e[1]+", "+e[2]+")"},typeof e!="undefined"&&(e.vec3=o);var u={};u.create=function(){var e=new n(4);return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e},u.clone=function(e){var t=new n(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},u.fromValues=function(e,t,r,i){var s=new n(4);return s[0]=e,s[1]=t,s[2]=r,s[3]=i,s},u.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},u.set=function(e,t,n,r,i){return e[0]=t,e[1]=n,e[2]=r,e[3]=i,e},u.add=function(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e},u.subtract=function(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e},u.sub=u.subtract,u.multiply=function(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e[3]=t[3]*n[3],e},u.mul=u.multiply,u.divide=function(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e[3]=t[3]/n[3],e},u.div=u.divide,u.min=function(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e[3]=Math.min(t[3],n[3]),e},u.max=function(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e[3]=Math.max(t[3],n[3]),e},u.scale=function(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e},u.scaleAndAdd=function(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e},u.distance=function(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2],s=t[3]-e[3];return Math.sqrt(n*n+r*r+i*i+s*s)},u.dist=u.distance,u.squaredDistance=function(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2],s=t[3]-e[3];return n*n+r*r+i*i+s*s},u.sqrDist=u.squaredDistance,u.length=function(e){var t=e[0],n=e[1],r=e[2],i=e[3];return Math.sqrt(t*t+n*n+r*r+i*i)},u.len=u.length,u.squaredLength=function(e){var t=e[0],n=e[1],r=e[2],i=e[3];return t*t+n*n+r*r+i*i},u.sqrLen=u.squaredLength,u.negate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e},u.normalize=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=n*n+r*r+i*i+s*s;return o>0&&(o=1/Math.sqrt(o),e[0]=t[0]*o,e[1]=t[1]*o,e[2]=t[2]*o,e[3]=t[3]*o),e},u.dot=function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]},u.lerp=function(e,t,n,r){var i=t[0],s=t[1],o=t[2],u=t[3];return e[0]=i+r*(n[0]-i),e[1]=s+r*(n[1]-s),e[2]=o+r*(n[2]-o),e[3]=u+r*(n[3]-u),e},u.random=function(e,t){return t=t||1,e[0]=r(),e[1]=r(),e[2]=r(),e[3]=r(),u.normalize(e,e),u.scale(e,e,t),e},u.transformMat4=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3];return e[0]=n[0]*r+n[4]*i+n[8]*s+n[12]*o,e[1]=n[1]*r+n[5]*i+n[9]*s+n[13]*o,e[2]=n[2]*r+n[6]*i+n[10]*s+n[14]*o,e[3]=n[3]*r+n[7]*i+n[11]*s+n[15]*o,e},u.transformQuat=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=n[0],u=n[1],a=n[2],f=n[3],l=f*r+u*s-a*i,c=f*i+a*r-o*s,h=f*s+o*i-u*r,p=-o*r-u*i-a*s;return e[0]=l*f+p*-o+c*-a-h*-u,e[1]=c*f+p*-u+h*-o-l*-a,e[2]=h*f+p*-a+l*-u-c*-o,e},u.forEach=function(){var e=u.create();return function(t,n,r,i,s,o){var u,a;n||(n=4),r||(r=0),i?a=Math.min(i*n+r,t.length):a=t.length;for(u=r;u<a;u+=n)e[0]=t[u],e[1]=t[u+1],e[2]=t[u+2],e[3]=t[u+3],s(e,e,o),t[u]=e[0],t[u+1]=e[1],t[u+2]=e[2],t[u+3]=e[3];return t}}(),u.str=function(e){return"vec4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"},typeof e!="undefined"&&(e.vec4=u);var a={};a.create=function(){var e=new n(4);return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e},a.clone=function(e){var t=new n(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},a.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},a.identity=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e},a.transpose=function(e,t){if(e===t){var n=t[1];e[1]=t[2],e[2]=n}else e[0]=t[0],e[1]=t[2],e[2]=t[1],e[3]=t[3];return e},a.invert=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=n*s-i*r;return o?(o=1/o,e[0]=s*o,e[1]=-r*o,e[2]=-i*o,e[3]=n*o,e):null},a.adjoint=function(e,t){var n=t[0];return e[0]=t[3],e[1]=-t[1],e[2]=-t[2],e[3]=n,e},a.determinant=function(e){return e[0]*e[3]-e[2]*e[1]},a.multiply=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=n[0],a=n[1],f=n[2],l=n[3];return e[0]=r*u+i*f,e[1]=r*a+i*l,e[2]=s*u+o*f,e[3]=s*a+o*l,e},a.mul=a.multiply,a.rotate=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=Math.sin(n),a=Math.cos(n);return e[0]=r*a+i*u,e[1]=r*-u+i*a,e[2]=s*a+o*u,e[3]=s*-u+o*a,e},a.scale=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=n[0],a=n[1];return e[0]=r*u,e[1]=i*a,e[2]=s*u,e[3]=o*a,e},a.str=function(e){return"mat2("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"},typeof e!="undefined"&&(e.mat2=a);var f={};f.create=function(){var e=new n(6);return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e},f.clone=function(e){var t=new n(6);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t},f.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e},f.identity=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e},f.invert=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=t[4],u=t[5],a=n*s-r*i;return a?(a=1/a,e[0]=s*a,e[1]=-r*a,e[2]=-i*a,e[3]=n*a,e[4]=(i*u-s*o)*a,e[5]=(r*o-n*u)*a,e):null},f.determinant=function(e){return e[0]*e[3]-e[1]*e[2]},f.multiply=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=n[0],l=n[1],c=n[2],h=n[3],p=n[4],d=n[5];return e[0]=r*f+i*c,e[1]=r*l+i*h,e[2]=s*f+o*c,e[3]=s*l+o*h,e[4]=f*u+c*a+p,e[5]=l*u+h*a+d,e},f.mul=f.multiply,f.rotate=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=Math.sin(n),l=Math.cos(n);return e[0]=r*l+i*f,e[1]=-r*f+i*l,e[2]=s*l+o*f,e[3]=-s*f+l*o,e[4]=l*u+f*a,e[5]=l*a-f*u,e},f.scale=function(e,t,n){var r=n[0],i=n[1];return e[0]=t[0]*r,e[1]=t[1]*i,e[2]=t[2]*r,e[3]=t[3]*i,e[4]=t[4]*r,e[5]=t[5]*i,e},f.translate=function(e,t,n){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4]+n[0],e[5]=t[5]+n[1],e},f.str=function(e){return"mat2d("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+")"},typeof e!="undefined"&&(e.mat2d=f);var l={};l.create=function(){var e=new n(9);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e},l.fromMat4=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e},l.clone=function(e){var t=new n(9);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},l.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e},l.identity=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e},l.transpose=function(e,t){if(e===t){var n=t[1],r=t[2],i=t[5];e[1]=t[3],e[2]=t[6],e[3]=n,e[5]=t[7],e[6]=r,e[7]=i}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e},l.invert=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=t[4],u=t[5],a=t[6],f=t[7],l=t[8],c=l*o-u*f,h=-l*s+u*a,p=f*s-o*a,d=n*c+r*h+i*p;return d?(d=1/d,e[0]=c*d,e[1]=(-l*r+i*f)*d,e[2]=(u*r-i*o)*d,e[3]=h*d,e[4]=(l*n-i*a)*d,e[5]=(-u*n+i*s)*d,e[6]=p*d,e[7]=(-f*n+r*a)*d,e[8]=(o*n-r*s)*d,e):null},l.adjoint=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=t[4],u=t[5],a=t[6],f=t[7],l=t[8];return e[0]=o*l-u*f,e[1]=i*f-r*l,e[2]=r*u-i*o,e[3]=u*a-s*l,e[4]=n*l-i*a,e[5]=i*s-n*u,e[6]=s*f-o*a,e[7]=r*a-n*f,e[8]=n*o-r*s,e},l.determinant=function(e){var t=e[0],n=e[1],r=e[2],i=e[3],s=e[4],o=e[5],u=e[6],a=e[7],f=e[8];return t*(f*s-o*a)+n*(-f*i+o*u)+r*(a*i-s*u)},l.multiply=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=t[6],l=t[7],c=t[8],h=n[0],p=n[1],d=n[2],v=n[3],m=n[4],g=n[5],y=n[6],b=n[7],w=n[8];return e[0]=h*r+p*o+d*f,e[1]=h*i+p*u+d*l,e[2]=h*s+p*a+d*c,e[3]=v*r+m*o+g*f,e[4]=v*i+m*u+g*l,e[5]=v*s+m*a+g*c,e[6]=y*r+b*o+w*f,e[7]=y*i+b*u+w*l,e[8]=y*s+b*a+w*c,e},l.mul=l.multiply,l.translate=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=t[6],l=t[7],c=t[8],h=n[0],p=n[1];return e[0]=r,e[1]=i,e[2]=s,e[3]=o,e[4]=u,e[5]=a,e[6]=h*r+p*o+f,e[7]=h*i+p*u+l,e[8]=h*s+p*a+c,e},l.rotate=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=t[6],l=t[7],c=t[8],h=Math.sin(n),p=Math.cos(n);return e[0]=p*r+h*o,e[1]=p*i+h*u,e[2]=p*s+h*a,e[3]=p*o-h*r,e[4]=p*u-h*i,e[5]=p*a-h*s,e[6]=f,e[7]=l,e[8]=c,e},l.scale=function(e,t,n){var r=n[0],i=n[1];return e[0]=r*t[0],e[1]=r*t[1],e[2]=r*t[2],e[3]=i*t[3],e[4]=i*t[4],e[5]=i*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e},l.fromMat2d=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=0,e[3]=t[2],e[4]=t[3],e[5]=0,e[6]=t[4],e[7]=t[5],e[8]=1,e},l.fromQuat=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=n+n,u=r+r,a=i+i,f=n*o,l=n*u,c=n*a,h=r*u,p=r*a,d=i*a,v=s*o,m=s*u,g=s*a;return e[0]=1-(h+d),e[3]=l+g,e[6]=c-m,e[1]=l-g,e[4]=1-(f+d),e[7]=p+v,e[2]=c+m,e[5]=p-v,e[8]=1-(f+h),e},l.normalFromMat4=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=t[4],u=t[5],a=t[6],f=t[7],l=t[8],c=t[9],h=t[10],p=t[11],d=t[12],v=t[13],m=t[14],g=t[15],y=n*u-r*o,b=n*a-i*o,w=n*f-s*o,E=r*a-i*u,S=r*f-s*u,x=i*f-s*a,T=l*v-c*d,N=l*m-h*d,C=l*g-p*d,k=c*m-h*v,L=c*g-p*v,A=h*g-p*m,O=y*A-b*L+w*k+E*C-S*N+x*T;return O?(O=1/O,e[0]=(u*A-a*L+f*k)*O,e[1]=(a*C-o*A-f*N)*O,e[2]=(o*L-u*C+f*T)*O,e[3]=(i*L-r*A-s*k)*O,e[4]=(n*A-i*C+s*N)*O,e[5]=(r*C-n*L-s*T)*O,e[6]=(v*x-m*S+g*E)*O,e[7]=(m*w-d*x-g*b)*O,e[8]=(d*S-v*w+g*y)*O,e):null},l.str=function(e){return"mat3("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+")"},typeof e!="undefined"&&(e.mat3=l);var c={};c.create=function(){var e=new n(16);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},c.clone=function(e){var t=new n(16);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t},c.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e},c.identity=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},c.transpose=function(e,t){if(e===t){var n=t[1],r=t[2],i=t[3],s=t[6],o=t[7],u=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=r,e[9]=s,e[11]=t[14],e[12]=i,e[13]=o,e[14]=u}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e},c.invert=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=t[4],u=t[5],a=t[6],f=t[7],l=t[8],c=t[9],h=t[10],p=t[11],d=t[12],v=t[13],m=t[14],g=t[15],y=n*u-r*o,b=n*a-i*o,w=n*f-s*o,E=r*a-i*u,S=r*f-s*u,x=i*f-s*a,T=l*v-c*d,N=l*m-h*d,C=l*g-p*d,k=c*m-h*v,L=c*g-p*v,A=h*g-p*m,O=y*A-b*L+w*k+E*C-S*N+x*T;return O?(O=1/O,e[0]=(u*A-a*L+f*k)*O,e[1]=(i*L-r*A-s*k)*O,e[2]=(v*x-m*S+g*E)*O,e[3]=(h*S-c*x-p*E)*O,e[4]=(a*C-o*A-f*N)*O,e[5]=(n*A-i*C+s*N)*O,e[6]=(m*w-d*x-g*b)*O,e[7]=(l*x-h*w+p*b)*O,e[8]=(o*L-u*C+f*T)*O,e[9]=(r*C-n*L-s*T)*O,e[10]=(d*S-v*w+g*y)*O,e[11]=(c*w-l*S-p*y)*O,e[12]=(u*N-o*k-a*T)*O,e[13]=(n*k-r*N+i*T)*O,e[14]=(v*b-d*E-m*y)*O,e[15]=(l*E-c*b+h*y)*O,e):null},c.adjoint=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=t[4],u=t[5],a=t[6],f=t[7],l=t[8],c=t[9],h=t[10],p=t[11],d=t[12],v=t[13],m=t[14],g=t[15];return e[0]=u*(h*g-p*m)-c*(a*g-f*m)+v*(a*p-f*h),e[1]=-(r*(h*g-p*m)-c*(i*g-s*m)+v*(i*p-s*h)),e[2]=r*(a*g-f*m)-u*(i*g-s*m)+v*(i*f-s*a),e[3]=-(r*(a*p-f*h)-u*(i*p-s*h)+c*(i*f-s*a)),e[4]=-(o*(h*g-p*m)-l*(a*g-f*m)+d*(a*p-f*h)),e[5]=n*(h*g-p*m)-l*(i*g-s*m)+d*(i*p-s*h),e[6]=-(n*(a*g-f*m)-o*(i*g-s*m)+d*(i*f-s*a)),e[7]=n*(a*p-f*h)-o*(i*p-s*h)+l*(i*f-s*a),e[8]=o*(c*g-p*v)-l*(u*g-f*v)+d*(u*p-f*c),e[9]=-(n*(c*g-p*v)-l*(r*g-s*v)+d*(r*p-s*c)),e[10]=n*(u*g-f*v)-o*(r*g-s*v)+d*(r*f-s*u),e[11]=-(n*(u*p-f*c)-o*(r*p-s*c)+l*(r*f-s*u)),e[12]=-(o*(c*m-h*v)-l*(u*m-a*v)+d*(u*h-a*c)),e[13]=n*(c*m-h*v)-l*(r*m-i*v)+d*(r*h-i*c),e[14]=-(n*(u*m-a*v)-o*(r*m-i*v)+d*(r*a-i*u)),e[15]=n*(u*h-a*c)-o*(r*h-i*c)+l*(r*a-i*u),e},c.determinant=function(e){var t=e[0],n=e[1],r=e[2],i=e[3],s=e[4],o=e[5],u=e[6],a=e[7],f=e[8],l=e[9],c=e[10],h=e[11],p=e[12],d=e[13],v=e[14],m=e[15],g=t*o-n*s,y=t*u-r*s,b=t*a-i*s,w=n*u-r*o,E=n*a-i*o,S=r*a-i*u,x=f*d-l*p,T=f*v-c*p,N=f*m-h*p,C=l*v-c*d,k=l*m-h*d,L=c*m-h*v;return g*L-y*k+b*C+w*N-E*T+S*x},c.multiply=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=t[6],l=t[7],c=t[8],h=t[9],p=t[10],d=t[11],v=t[12],m=t[13],g=t[14],y=t[15],b=n[0],w=n[1],E=n[2],S=n[3];return e[0]=b*r+w*u+E*c+S*v,e[1]=b*i+w*a+E*h+S*m,e[2]=b*s+w*f+E*p+S*g,e[3]=b*o+w*l+E*d+S*y,b=n[4],w=n[5],E=n[6],S=n[7],e[4]=b*r+w*u+E*c+S*v,e[5]=b*i+w*a+E*h+S*m,e[6]=b*s+w*f+E*p+S*g,e[7]=b*o+w*l+E*d+S*y,b=n[8],w=n[9],E=n[10],S=n[11],e[8]=b*r+w*u+E*c+S*v,e[9]=b*i+w*a+E*h+S*m,e[10]=b*s+w*f+E*p+S*g,e[11]=b*o+w*l+E*d+S*y,b=n[12],w=n[13],E=n[14],S=n[15],e[12]=b*r+w*u+E*c+S*v,e[13]=b*i+w*a+E*h+S*m,e[14]=b*s+w*f+E*p+S*g,e[15]=b*o+w*l+E*d+S*y,e},c.mul=c.multiply,c.translate=function(e,t,n){var r=n[0],i=n[1],s=n[2],o,u,a,f,l,c,h,p,d,v,m,g;return t===e?(e[12]=t[0]*r+t[4]*i+t[8]*s+t[12],e[13]=t[1]*r+t[5]*i+t[9]*s+t[13],e[14]=t[2]*r+t[6]*i+t[10]*s+t[14],e[15]=t[3]*r+t[7]*i+t[11]*s+t[15]):(o=t[0],u=t[1],a=t[2],f=t[3],l=t[4],c=t[5],h=t[6],p=t[7],d=t[8],v=t[9],m=t[10],g=t[11],e[0]=o,e[1]=u,e[2]=a,e[3]=f,e[4]=l,e[5]=c,e[6]=h,e[7]=p,e[8]=d,e[9]=v,e[10]=m,e[11]=g,e[12]=o*r+l*i+d*s+t[12],e[13]=u*r+c*i+v*s+t[13],e[14]=a*r+h*i+m*s+t[14],e[15]=f*r+p*i+g*s+t[15]),e},c.scale=function(e,t,n){var r=n[0],i=n[1],s=n[2];return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*i,e[5]=t[5]*i,e[6]=t[6]*i,e[7]=t[7]*i,e[8]=t[8]*s,e[9]=t[9]*s,e[10]=t[10]*s,e[11]=t[11]*s,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e},c.rotate=function(e,n,r,i){var s=i[0],o=i[1],u=i[2],a=Math.sqrt(s*s+o*o+u*u),f,l,c,h,p,d,v,m,g,y,b,w,E,S,x,T,N,C,k,L,A,O,M,_;return Math.abs(a)<t?null:(a=1/a,s*=a,o*=a,u*=a,f=Math.sin(r),l=Math.cos(r),c=1-l,h=n[0],p=n[1],d=n[2],v=n[3],m=n[4],g=n[5],y=n[6],b=n[7],w=n[8],E=n[9],S=n[10],x=n[11],T=s*s*c+l,N=o*s*c+u*f,C=u*s*c-o*f,k=s*o*c-u*f,L=o*o*c+l,A=u*o*c+s*f,O=s*u*c+o*f,M=o*u*c-s*f,_=u*u*c+l,e[0]=h*T+m*N+w*C,e[1]=p*T+g*N+E*C,e[2]=d*T+y*N+S*C,e[3]=v*T+b*N+x*C,e[4]=h*k+m*L+w*A,e[5]=p*k+g*L+E*A,e[6]=d*k+y*L+S*A,e[7]=v*k+b*L+x*A,e[8]=h*O+m*M+w*_,e[9]=p*O+g*M+E*_,e[10]=d*O+y*M+S*_,e[11]=v*O+b*M+x*_,n!==e&&(e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15]),e)},c.rotateX=function(e,t,n){var r=Math.sin(n),i=Math.cos(n),s=t[4],o=t[5],u=t[6],a=t[7],f=t[8],l=t[9],c=t[10],h=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=s*i+f*r,e[5]=o*i+l*r,e[6]=u*i+c*r,e[7]=a*i+h*r,e[8]=f*i-s*r,e[9]=l*i-o*r,e[10]=c*i-u*r,e[11]=h*i-a*r,e},c.rotateY=function(e,t,n){var r=Math.sin(n),i=Math.cos(n),s=t[0],o=t[1],u=t[2],a=t[3],f=t[8],l=t[9],c=t[10],h=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=s*i-f*r,e[1]=o*i-l*r,e[2]=u*i-c*r,e[3]=a*i-h*r,e[8]=s*r+f*i,e[9]=o*r+l*i,e[10]=u*r+c*i,e[11]=a*r+h*i,e},c.rotateZ=function(e,t,n){var r=Math.sin(n),i=Math.cos(n),s=t[0],o=t[1],u=t[2],a=t[3],f=t[4],l=t[5],c=t[6],h=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=s*i+f*r,e[1]=o*i+l*r,e[2]=u*i+c*r,e[3]=a*i+h*r,e[4]=f*i-s*r,e[5]=l*i-o*r,e[6]=c*i-u*r,e[7]=h*i-a*r,e},c.fromRotationTranslation=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=r+r,a=i+i,f=s+s,l=r*u,c=r*a,h=r*f,p=i*a,d=i*f,v=s*f,m=o*u,g=o*a,y=o*f;return e[0]=1-(p+v),e[1]=c+y,e[2]=h-g,e[3]=0,e[4]=c-y,e[5]=1-(l+v),e[6]=d+m,e[7]=0,e[8]=h+g,e[9]=d-m,e[10]=1-(l+p),e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e},c.fromQuat=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=n+n,u=r+r,a=i+i,f=n*o,l=n*u,c=n*a,h=r*u,p=r*a,d=i*a,v=s*o,m=s*u,g=s*a;return e[0]=1-(h+d),e[1]=l+g,e[2]=c-m,e[3]=0,e[4]=l-g,e[5]=1-(f+d),e[6]=p+v,e[7]=0,e[8]=c+m,e[9]=p-v,e[10]=1-(f+h),e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},c.frustum=function(e,t,n,r,i,s,o){var u=1/(n-t),a=1/(i-r),f=1/(s-o);return e[0]=s*2*u,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s*2*a,e[6]=0,e[7]=0,e[8]=(n+t)*u,e[9]=(i+r)*a,e[10]=(o+s)*f,e[11]=-1,e[12]=0,e[13]=0,e[14]=o*s*2*f,e[15]=0,e},c.perspective=function(e,t,n,r,i){var s=1/Math.tan(t/2),o=1/(r-i);return e[0]=s/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(i+r)*o,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*i*r*o,e[15]=0,e},c.ortho=function(e,t,n,r,i,s,o){var u=1/(t-n),a=1/(r-i),f=1/(s-o);return e[0]=-2*u,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*a,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*f,e[11]=0,e[12]=(t+n)*u,e[13]=(i+r)*a,e[14]=(o+s)*f,e[15]=1,e},c.lookAt=function(e,n,r,i){var s,o,u,a,f,l,h,p,d,v,m=n[0],g=n[1],y=n[2],b=i[0],w=i[1],E=i[2],S=r[0],x=r[1],T=r[2];return Math.abs(m-S)<t&&Math.abs(g-x)<t&&Math.abs(y-T)<t?c.identity(e):(h=m-S,p=g-x,d=y-T,v=1/Math.sqrt(h*h+p*p+d*d),h*=v,p*=v,d*=v,s=w*d-E*p,o=E*h-b*d,u=b*p-w*h,v=Math.sqrt(s*s+o*o+u*u),v?(v=1/v,s*=v,o*=v,u*=v):(s=0,o=0,u=0),a=p*u-d*o,f=d*s-h*u,l=h*o-p*s,v=Math.sqrt(a*a+f*f+l*l),v?(v=1/v,a*=v,f*=v,l*=v):(a=0,f=0,l=0),e[0]=s,e[1]=a,e[2]=h,e[3]=0,e[4]=o,e[5]=f,e[6]=p,e[7]=0,e[8]=u,e[9]=l,e[10]=d,e[11]=0,e[12]=-(s*m+o*g+u*y),e[13]=-(a*m+f*g+l*y),e[14]=-(h*m+p*g+d*y),e[15]=1,e)},c.str=function(e){return"mat4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+", "+e[9]+", "+e[10]+", "+e[11]+", "+e[12]+", "+e[13]+", "+e[14]+", "+e[15]+")"},typeof e!="undefined"&&(e.mat4=c);var h={};h.create=function(){var e=new n(4);return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e},h.rotationTo=function(){var e=o.create(),t=o.fromValues(1,0,0),n=o.fromValues(0,1,0);return function(r,i,s){var u=o.dot(i,s);return u<-0.999999?(o.cross(e,t,i),o.length(e)<1e-6&&o.cross(e,n,i),o.normalize(e,e),h.setAxisAngle(r,e,Math.PI),r):u>.999999?(r[0]=0,r[1]=0,r[2]=0,r[3]=1,r):(o.cross(e,i,s),r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=1+u,h.normalize(r,r))}}(),h.setAxes=function(){var e=l.create();return function(t,n,r,i){return e[0]=r[0],e[3]=r[1],e[6]=r[2],e[1]=i[0],e[4]=i[1],e[7]=i[2],e[2]=n[0],e[5]=n[1],e[8]=n[2],h.normalize(t,h.fromMat3(t,e))}}(),h.clone=u.clone,h.fromValues=u.fromValues,h.copy=u.copy,h.set=u.set,h.identity=function(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e},h.setAxisAngle=function(e,t,n){n*=.5;var r=Math.sin(n);return e[0]=r*t[0],e[1]=r*t[1],e[2]=r*t[2],e[3]=Math.cos(n),e},h.add=u.add,h.multiply=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=n[0],a=n[1],f=n[2],l=n[3];return e[0]=r*l+o*u+i*f-s*a,e[1]=i*l+o*a+s*u-r*f,e[2]=s*l+o*f+r*a-i*u,e[3]=o*l-r*u-i*a-s*f,e},h.mul=h.multiply,h.scale=u.scale,h.rotateX=function(e,t,n){n*=.5;var r=t[0],i=t[1],s=t[2],o=t[3],u=Math.sin(n),a=Math.cos(n);return e[0]=r*a+o*u,e[1]=i*a+s*u,e[2]=s*a-i*u,e[3]=o*a-r*u,e},h.rotateY=function(e,t,n){n*=.5;var r=t[0],i=t[1],s=t[2],o=t[3],u=Math.sin(n),a=Math.cos(n);return e[0]=r*a-s*u,e[1]=i*a+o*u,e[2]=s*a+r*u,e[3]=o*a-i*u,e},h.rotateZ=function(e,t,n){n*=.5;var r=t[0],i=t[1],s=t[2],o=t[3],u=Math.sin(n),a=Math.cos(n);return e[0]=r*a+i*u,e[1]=i*a-r*u,e[2]=s*a+o*u,e[3]=o*a-s*u,e},h.calculateW=function(e,t){var n=t[0],r=t[1],i=t[2];return e[0]=n,e[1]=r,e[2]=i,e[3]=-Math.sqrt(Math.abs(1-n*n-r*r-i*i)),e},h.dot=u.dot,h.lerp=u.lerp,h.slerp=function(e,t,n,r){var i=t[0],s=t[1],o=t[2],u=t[3],a=n[0],f=n[1],l=n[2],c=n[3],h,p,d,v,m;return p=i*a+s*f+o*l+u*c,p<0&&(p=-p,a=-a,f=-f,l=-l,c=-c),1-p>1e-6?(h=Math.acos(p),d=Math.sin(h),v=Math.sin((1-r)*h)/d,m=Math.sin(r*h)/d):(v=1-r,m=r),e[0]=v*i+m*a,e[1]=v*s+m*f,e[2]=v*o+m*l,e[3]=v*u+m*c,e},h.invert=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=n*n+r*r+i*i+s*s,u=o?1/o:0;return e[0]=-n*u,e[1]=-r*u,e[2]=-i*u,e[3]=s*u,e},h.conjugate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e},h.length=u.length,h.len=h.length,h.squaredLength=u.squaredLength,h.sqrLen=h.squaredLength,h.normalize=u.normalize,h.fromMat3=function(){var e=typeof Int8Array!="undefined"?new Int8Array([1,2,0]):[1,2,0];return function(t,n){var r=n[0]+n[4]+n[8],i;if(r>0)i=Math.sqrt(r+1),t[3]=.5*i,i=.5/i,t[0]=(n[7]-n[5])*i,t[1]=(n[2]-n[6])*i,t[2]=(n[3]-n[1])*i;else{var s=0;n[4]>n[0]&&(s=1),n[8]>n[s*3+s]&&(s=2);var o=e[s],u=e[o];i=Math.sqrt(n[s*3+s]-n[o*3+o]-n[u*3+u]+1),t[s]=.5*i,i=.5/i,t[3]=(n[u*3+o]-n[o*3+u])*i,t[o]=(n[o*3+s]+n[s*3+o])*i,t[u]=(n[u*3+s]+n[s*3+u])*i}return t}}(),h.str=function(e){return"quat("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"},typeof e!="undefined"&&(e.quat=h)}(t.exports)})(this);
"use strict";

function GreetsCamera(options)
{
	this.radius = options.radius || 4.0
	this.speed = options.speed || 0.4
}

GreetsCamera.prototype.render = function(time, renderParameters)
{
	var speed = this.speed
	var ref = 96
	if (time > ref)
	{
		var f = time - ref
		//speed *= Math.exp(-f * 0.1)
		time = ref + f * Math.exp(-f * 0.1)
	}
	var radius = this.radius * (1.0 + Math.sin(time * speed) * 0.4)
	renderParameters.camera.origin = [this.radius * Math.cos(time * speed), time * speed, this.radius * Math.sin(time * speed)]
	renderParameters.camera.target = [0, time * speed + Math.cos(time * speed) * 2.0, 0]
}
"use strict";

function GreetsTower(options)
{
	this.shader = new ShaderProgram(buildingVertexShader, buildingFragmentShader)
	
	this.building = new Building({
		width: 3,
		depth: 3,
		floors: 35
	})
	
	this.neons = []
	this.neons.push(new Neon({points: neonVitalmotionPoints, 	origin: [-1, 5, -1.7], 	direction: [-1, 0, 0]}))
	this.neons.push(new Neon({points: neonXmenPoints, 			origin: [1.6, 8, 1], 	direction: [0.707, 0, 0]}))
	this.neons.push(new Neon({points: neonCtrlPoints, 			origin: [0, 11, -1.7], 	direction: [-1, 0, 0]}))
	this.neons.push(new Neon({points: neonPunkfloydPoints, 		origin: [-0.1, 14, 1.7], 	direction: [0.707, 0, 0]}))
	this.neons.push(new Neon({points: neonMPoints, 				origin: [1.5, 20, -1.5], 	direction: [1, 0, 0]}))
	this.neons.push(new Neon({points: neonRibbonPoints, 		origin: [0, 21, 1.7], 	direction: [1, 0, 0]}))
	this.neons.push(new Neon({points: neonAdinpzPoints, 		origin: [1.6, 25, 1], 	direction: [-1, 0, 0]}))
	this.neons.push(new Neon({points: neonLnxPoints, 		origin: [0, 28, 1.7], 	direction: [1, 0, 0]}))
	this.neons.push(new Neon({points: neonZuulPoints, 		origin: [1.6, 30, 1], 	direction: [-1, 0, 0]}))

	this.neons.push(new Neon({points: neonDatePoints, 		origin: [0, 37, -1.7], 	direction: [-1, 0, 0]}))
	this.neons.push(new Neon({points: neonDemojsPoints, 		origin: [0, 38, 1.7], 	direction: [0.707, 0, 0]}))

}

GreetsTower.prototype.render = function(time, renderParameters)
{
	gl.enable(gl.DEPTH_TEST)
	gl.depthFunc(gl.LEQUAL)
	gl.depthMask(true)
	
	this.shader.bind()
	this.shader.setFloatUniform("time", time)
	this.shader.setMat4Uniform("viewProjectionMatrix", renderParameters.camera.viewProjectionMatrix)
	this.shader.setMat4Uniform("viewMatrix", renderParameters.camera.viewMatrix)
	this.shader.setVec3Uniform("sunDirection", renderParameters.sunDirection)
	
	var positionAttribute = this.shader.getAttributeLocation("position")
	var normalAttribute = this.shader.getAttributeLocation("normal")
	
	var beat = Math.exp(-(time % 1.0))
	this.shader.setVec3Uniform("origin", [-0.5, 0, 1.5])
	this.shader.setFloatUniform("scale", 1.0)
	this.shader.setFloatUniform("rainbowFactor", beat * 0.1)
	this.building.render(positionAttribute, normalAttribute)
	
	for (var i = 0; i < this.neons.length; i++)
		this.neons[i].render(time, renderParameters)
}
"use strict";

function Ground(options)
{
	this.shader = new ShaderProgram(groundVertexShader, groundFragmentShader)
	
	// index strip; expanded in vertex shader
	this._size = 200
	this._updateMesh()
}

Ground.prototype.render = function(time, renderParameters)
{
	gl.enable(gl.DEPTH_TEST)
	gl.depthFunc(gl.LEQUAL)
	gl.depthMask(true)
	
	this.shader.bind()
	this.shader.setFloatUniform("time", time)
	this.shader.setFloatUniform("pulseIntensity", renderParameters.pulseIntensity)
	this.shader.setMat4Uniform("viewMatrix", renderParameters.camera.viewMatrix)
	this.shader.setMat4Uniform("viewProjectionMatrix", renderParameters.camera.viewProjectionMatrix)
	this.shader.setVec3Uniform("sunDirection", renderParameters.sunDirection)
	this.shader.setVec3Uniform("cameraPosition", renderParameters.camera.origin)
	
	this.shader.setFloatUniform("stride", this._size + 1)
	
	var gridIndexAttribute = this.shader.getAttributeLocation("gridIndex")
	this.mesh.bind(gridIndexAttribute)
	
	gl.drawArrays(gl.TRIANGLE_STRIP, 0, this.mesh.itemCount)
}

Ground.prototype._updateMesh = function()
{
	var stride = this._size + 1
	vertexCount = (stride*2+2)*this._size;
	var gridArray = new Uint16Array(vertexCount)
	
	var index=0;
	for(var row=0; row < this._size; row++)
	{
		gridArray[index++] = (row+0)*stride;
		for(var col=0; col < stride; col++)
		{
			gridArray[index++] = (row+0)*stride + col;
			gridArray[index++] = (row+1)*stride + col;
		}
		gridArray[index++] = (row+2)*stride-1;
	}
	
	this.mesh = new VertexBuffer(1, gl.UNSIGNED_SHORT, gridArray)
}
"use strict";

function IndexBuffer(data)
{
	this.ibo = gl.createBuffer();
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.ibo);
	gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW);
}

IndexBuffer.prototype.bind = function()
{
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.ibo)
}
/*!
 * jQuery JavaScript Library v1.9.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-2-4
 */
;(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<9
	// For `typeof node.method` instead of `node.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.9.1",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support, all, a,
		input, select, fragment,
		opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Support tests won't run in some limited or non-browser environments
	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !all || !a || !all.length ) {
		return {};
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";
	support = {
		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: div.firstChild.nodeType === 3,

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: a.getAttribute("href") === "/a",

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		checkOn: !!input.value,

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Tests for enctype support on a form (#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: document.compatMode === "CSS1Compat",

		// Will be defined later
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})();

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, ret,
		internalKey = jQuery.expando,
		getByName = typeof name === "string",

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			elem[ internalKey ] = id = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		cache[ id ] = {};

		// Avoids exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		if ( !isNode ) {
			cache[ id ].toJSON = jQuery.noop;
		}
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( getByName ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var i, l, thisCache,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			for ( i = 0, l = name.length; i < l; i++ ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				// Try to fetch any internally stored data first
				return elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
			}

			this.each(function() {
				jQuery.data( this, key, value );
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		hooks.cur = fn;
		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, notxml, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && notxml && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && notxml && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			// In IE9+, Flash objects don't have .getAttribute (#12945)
			// Support: IE9+
			if ( typeof elem.getAttribute !== core_strundefined ) {
				ret =  elem.getAttribute( name );
			}

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( rboolean.test( name ) ) {
					// Set corresponding property to false for boolean attributes
					// Also clear defaultChecked/defaultSelected (if appropriate) for IE<8
					if ( !getSetAttribute && ruseDefault.test( name ) ) {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					} else {
						elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		var
			// Use .prop to determine if this attribute is understood as boolean
			prop = jQuery.prop( elem, name ),

			// Fetch it accordingly
			attr = typeof prop === "boolean" && elem.getAttribute( name ),
			detail = typeof prop === "boolean" ?

				getSetInput && getSetAttribute ?
					attr != null :
					// oldIE fabricates an empty string for missing boolean attributes
					// and conflates checked/selected into attroperties
					ruseDefault.test( name ) ?
						elem[ jQuery.camelCase( "default-" + name ) ] :
						!!attr :

				// fetch an attribute node for properties not recognized as boolean
				elem.getAttributeNode( name );

		return detail && detail.value !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// fix oldIE value attroperty
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return jQuery.nodeName( elem, "input" ) ?

				// Ignore the value *property* by using defaultValue
				elem.defaultValue :

				ret && ret.specified ? ret.value : undefined;
		},
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ( name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret == null ? undefined : ret;
			}
		});
	});

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		event.isTrigger = true;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur != this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			}
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== document.activeElement && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === document.activeElement && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var i,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	hasDuplicate,
	outermostContext,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsXML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,
	sortOrder,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	support = {},
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Array methods
	arr = [],
	pop = arr.pop,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},


	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rsibling = /[\x20\t\r\n\f]*[+~]/,

	rnative = /^[^{]+\{\s*\[native code/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,
	rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
	funescape = function( _, escaped ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		return high !== high ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Use a stripped-down slice if we can't use a native one
try {
	slice.call( preferredDoc.documentElement.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		while ( (elem = this[i++]) ) {
			results.push( elem );
		}
		return results;
	};
}

/**
 * For feature detection
 * @param {Function} fn The function to test for native support
 */
function isNative( fn ) {
	return rnative.test( fn + "" );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var cache,
		keys = [];

	return (cache = function( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	});
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return fn( div );
	} catch (e) {
		return false;
	} finally {
		// release memory in IE
		div = null;
	}
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( !documentIsXML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getByClassName && context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && !rbuggyQSA.test(selector) ) {
			old = true;
			nid = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results, slice.call( newContext.querySelectorAll(
						newSelector
					), 0 ) );
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsXML = isXML( doc );

	// Check if getElementsByTagName("*") returns only elements
	support.tagNameNoComments = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if attributes should be retrieved by attribute nodes
	support.attributes = assert(function( div ) {
		div.innerHTML = "<select></select>";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" && type !== "string";
	});

	// Check if getElementsByClassName can be trusted
	support.getByClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	});

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	support.getByName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = doc.getElementsByName &&
			// buggy browsers will return fewer than the correct 2
			doc.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			doc.getElementsByName( expando + 0 ).length;
		support.getIdNotName = !doc.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

	// IE6/7 return modified attributes
	Expr.attrHandle = assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
			div.firstChild.getAttribute("href") === "#";
	}) ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		};

	// ID find and filter
	if ( support.getIdNotName ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );

				return m ?
					m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
						[m] :
						undefined :
					[];
			}
		};
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.tagNameNoComments ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Name
	Expr.find["NAME"] = support.getByName && function( tag, context ) {
		if ( typeof context.getElementsByName !== strundefined ) {
			return context.getElementsByName( name );
		}
	};

	// Class
	Expr.find["CLASS"] = support.getByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && !documentIsXML ) {
			return context.getElementsByClassName( className );
		}
	};

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21),
	// no need to also add to buggyMatches since matches checks buggyQSA
	// A support test would require too much code (would include document ready)
	rbuggyQSA = [ ":focus" ];

	if ( (support.qsa = isNative(doc.querySelectorAll)) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE8 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "<input type='hidden' i=''/>";
			if ( div.querySelectorAll("[i^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = isNative( (matches = docElem.matchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.webkitMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = new RegExp( rbuggyMatches.join("|") );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		var compare;

		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b )) ) {
			if ( compare & 1 || a.parentNode && a.parentNode.nodeType === 11 ) {
				if ( a === doc || contains( preferredDoc, a ) ) {
					return -1;
				}
				if ( b === doc || contains( preferredDoc, b ) ) {
					return 1;
				}
				return 0;
			}
			return compare & 4 ? -1 : 1;
		}

		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	// Always assume the presence of duplicates if sort doesn't
	// pass them to our comparison function (as in Google Chrome).
	hasDuplicate = false;
	[0, 0].sort( sortOrder );
	support.detectDuplicates = hasDuplicate;

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	// rbuggyQSA always contains :focus, so no need for an existence check
	if ( support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr) ) {
		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	var val;

	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( !documentIsXML ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( documentIsXML || support.attributes ) {
		return elem.getAttribute( name );
	}
	return ( (val = elem.getAttributeNode( name )) || elem.getAttribute( name ) ) && elem[ name ] === true ?
		name :
		val && val.specified ? val.value : null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		i = 1,
		j = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && ( ~b.sourceIndex || MAX_NEGATIVE ) - ( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[4] ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}

			nodeName = nodeName.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifider
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsXML ?
						elem.getAttribute("xml:lang") || elem.getAttribute("lang") :
						elem.lang) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && !documentIsXML &&
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( runescape, funescape ), context )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		documentIsXML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Easy API for creating new setFilters
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Initialize with the default document
setDocument();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, ret, self,
			len = this.length;

		if ( typeof selector !== "string" ) {
			self = this;
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		ret = [];
		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, this[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = ( this.selector ? this.selector + " " : "" ) + selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true) );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			cur = this[i];

			while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length > 1 && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length > 0 ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		var isFunc = jQuery.isFunction( value );

		// Make sure that the elements are removed from the DOM before they are inserted
		// this can help fix replacing a parent with child elements
		if ( !isFunc && typeof value !== "string" ) {
			value = jQuery( value ).not( this ).detach();
		}

		return this.domManip( [ value ], true, function( elem ) {
			var next = this.nextSibling,
				parent = this.parentNode;

			if ( parent ) {
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		});
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, table ? self.html() : undefined );
				}
				self.domManip( args, table, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call(
						table && jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						node,
						i
					);
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery.ajax({
									url: node.src,
									type: "GET",
									dataType: "script",
									async: false,
									global: false,
									"throws": true
								});
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	var attr = elem.getAttributeNode("type");
	elem.type = ( attr && attr.specified ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		var bool = typeof state === "boolean";

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.hover = function( fnOver, fnOut ) {
	return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
};
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 ) {
					isSuccess = true;
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					isSuccess = true;
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	}
});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {
	var conv2, current, conv, tmp,
		converters = {},
		i = 0,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ];

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var value, name, index, easing, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/*jshint validthis:true */
	var prop, index, length,
		value, dataShow, toggle,
		tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );
				doAnimation.finish = function() {
					anim.stop( true );
				};
				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.cur && hooks.cur.finish ) {
				hooks.cur.finish.call( this );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.documentElement;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.documentElement;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// })();
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );
"use strict";

function Mesh(meshBuffer)
{
	this.vertexCount = 0
	this.primitiveType = gl.TRIANGLES
	
	this.vertexCount = meshBuffer.indices.length
	this.positions = new VertexBuffer(3, gl.FLOAT, new Float32Array(meshBuffer.positions))
	this.normals = new VertexBuffer(3, gl.FLOAT, new Float32Array(meshBuffer.normals))
	this.indices = new IndexBuffer(new Uint32Array(meshBuffer.indices))
}

Mesh.prototype.render = function(positionAttribute, normalAttribute)
{
	if (this.vertexCount == 0)
		return;
	
	if (this.positions) this.positions.bind(positionAttribute)
	if (this.normals) this.normals.bind(normalAttribute)
	
	if (this.indices)
	{
		this.indices.bind()
		gl.drawElements(this.primitiveType, this.vertexCount, gl.UNSIGNED_INT, 0)
	}
	else
	{
		gl.drawArrays(this.primitiveType, 0, this.vertexCount)
	}
}
"use strict";

function MeshBuilder()
{
	this.positions = []
	this.normals = []
	this.indices = []
}

MeshBuilder.prototype.appendMeshBuffer = function(meshBuffer, origin, angle)
{
	var startIndex = this.positions.length
	var startIndex2 = this.indices.length
	var rotation = quat.create()
	quat.rotateY(rotation, rotation, angle)
	
	this.positions.length += meshBuffer.positions.length
	this.normals.length += meshBuffer.positions.length
	this.indices.length += meshBuffer.indices.length
	
	var position = vec3.create()
	var normal = vec3.create()
	
	for (var i = 0; i < meshBuffer.positions.length; i += 3)
	{
		position[0] = meshBuffer.positions[i + 0]
		position[1] = meshBuffer.positions[i + 1]
		position[2] = meshBuffer.positions[i + 2]
		normal[0] = meshBuffer.normals[i + 0]
		normal[1] = meshBuffer.normals[i + 1]
		normal[2] = meshBuffer.normals[i + 2]
		
		// rotate position and normal
		vec3.transformQuat(position, position, rotation)
		vec3.transformQuat(normal, normal, rotation)
		
		// offset the position with local origin
		vec3.add(position, position, origin)
		
		this.positions[startIndex + i + 0] = position[0]
		this.positions[startIndex + i + 1] = position[1]
		this.positions[startIndex + i + 2] = position[2]
		this.normals[startIndex + i + 0] = normal[0]
		this.normals[startIndex + i + 1] = normal[1]
		this.normals[startIndex + i + 2] = normal[2]
	}
	
	for (var i = 0; i < meshBuffer.indices.length; i++)
	{
		this.indices[startIndex2 + i] = meshBuffer.indices[i] + startIndex / 3
	}
}

MeshBuilder.prototype.buildMesh = function()
{
	return new Mesh({
		positions: this.positions,
		normals: this.normals,
		indices: this.indices
	})
}
"use strict";

function Model(meshBuffer)
{
	this.shader = new ShaderProgram(modelVertexShader, modelFragmentShader)
	this.mesh = new Mesh(meshBuffer)
}

Model.prototype.render = function(time)
{
	this.shader.bind()
	this.shader.setFloatUniform("time", time)
	this.shader.setFloatUniform("ratio", canvas.width / canvas.height)
	
	var positionAttribute = this.shader.getAttributeLocation("position")
	var normalAttribute = this.shader.getAttributeLocation("normal")
	this.mesh.render(positionAttribute, normalAttribute)
}
"use strict";

function Neon(options)
{
	this.shader = new ShaderProgram(neonVertexShader, neonFragmentShader)
	this.origin = options.origin || [0, 0, 0]
	this.direction = options.direction || [1, 0, 0]
	var points = options.points
	
	this.planeNormal = vec3.create()
	vec3.cross(this.planeNormal, this.direction, [0, 1, 0])
	
	var positions = new Float32Array(points.length * 2)
	//var normals = new Float32Array(points.length * 2)
	var tangents = new Float32Array(points.length * 2)
	var progress = new Float32Array(points.length * 2 / 3)
	
	for (var i = 0; i < points.length; i++)
	{
		positions[(i * 2 + 0) * 3 + 0] = points[(i + 0) * 3 + 0]
		positions[(i * 2 + 0) * 3 + 1] = points[(i + 0) * 3 + 1]
		positions[(i * 2 + 0) * 3 + 2] = points[(i + 0) * 3 + 2]
		positions[(i * 2 + 1) * 3 + 0] = points[(i + 0) * 3 + 0]
		positions[(i * 2 + 1) * 3 + 1] = points[(i + 0) * 3 + 1]
		positions[(i * 2 + 1) * 3 + 2] = points[(i + 0) * 3 + 2]
		
		/*normals[(i * 2 + 0) * 3 + 0] = 0
		normals[(i * 2 + 0) * 3 + 1] = -1
		normals[(i * 2 + 0) * 3 + 2] = 0
		normals[(i * 2 + 1) * 3 + 0] = 0
		normals[(i * 2 + 1) * 3 + 1] = 1
		normals[(i * 2 + 1) * 3 + 2] = 0*/
		
		//var prevIndex = (i > 0) ? i - 1 : i
		//var nextIndex = (i < points.length - 1) ? i + 1 : i
		var prevIndex = i - 2
		var nextIndex = i + 2
		if (prevIndex < 0) prevIndex = 0
		if (nextIndex >= points.length) nextIndex = points.length - 1
		
		var prevPoint = vec3.clone(points.slice(prevIndex * 3, prevIndex * 3 + 3))
		var nextPoint = vec3.clone(points.slice(nextIndex * 3, nextIndex * 3 + 3))
		var tangent = vec3.create()
		vec3.subtract(tangent, nextPoint, prevPoint)
		vec3.normalize(tangent, tangent)
		
		tangents[(i * 2 + 0) * 3 + 0] = tangent[0]
		tangents[(i * 2 + 0) * 3 + 1] = tangent[1]
		tangents[(i * 2 + 0) * 3 + 2] = tangent[2]
		tangents[(i * 2 + 1) * 3 + 0] = -tangent[0]
		tangents[(i * 2 + 1) * 3 + 1] = -tangent[1]
		tangents[(i * 2 + 1) * 3 + 2] = -tangent[2]
		
		progress[i * 2 + 0] = i / points.length
		progress[i * 2 + 1] = i / points.length
	}
	
	this.positions = new VertexBuffer(3, gl.FLOAT, new Float32Array(positions))
	//this.normals = new VertexBuffer(3, gl.FLOAT, new Float32Array(normals))
	this.tangents = new VertexBuffer(3, gl.FLOAT, new Float32Array(tangents))
	this.progress = new VertexBuffer(1, gl.FLOAT, new Float32Array(progress))
}

Neon.prototype.render = function(time, renderParameters)
{
	gl.enable(gl.DEPTH_TEST)
	gl.depthFunc(gl.LEQUAL)
	gl.depthMask(false)
	
	gl.enable(gl.BLEND)
	gl.blendFunc(gl.ONE, gl.ONE)
	
	gl.disable(gl.CULL_FACE)
	
	this.shader.bind()
	this.shader.setFloatUniform("time", time)
	this.shader.setFloatUniform("ratio", renderParameters.camera.aspect)
	this.shader.setMat4Uniform("viewProjectionMatrix", renderParameters.camera.viewProjectionMatrix)
	this.shader.setMat4Uniform("viewMatrix", renderParameters.camera.viewMatrix)
	this.shader.setVec3Uniform("sunDirection", renderParameters.sunDirection)
	this.shader.setVec3Uniform("origin", this.origin)
	this.shader.setVec3Uniform("cameraZ", this.planeNormal)
	this.shader.setVec3Uniform("direction", this.direction)
	
	var positionAttribute = this.shader.getAttributeLocation("position")
	//var normalAttribute = this.shader.getAttributeLocation("normal")
	var tangentAttribute = this.shader.getAttributeLocation("tangent")
	var progressAttribute = this.shader.getAttributeLocation("progress")
	
	this.positions.bind(positionAttribute)
	//this.normals.bind(normalAttribute)
	this.tangents.bind(tangentAttribute)
	this.progress.bind(progressAttribute)
	gl.drawArrays(gl.TRIANGLE_STRIP, 0, this.positions.itemCount)
	
	gl.disable(gl.BLEND)
	gl.enable(gl.CULL_FACE)
}
"use strict";

function Rainbow()
{
	this.shader = new ShaderProgram(rainbowVertexShader, rainbowFragmentShader)
	
	// generate some tesselation to allow deforming the mesh
	steps = 100
	var points = []
	for (var i = 0; i < steps; i++)
	{
		var x = (i / (steps - 1)) * 2.0 - 1.0;
		points.push(x)
		points.push(-1.0)
		points.push(x)
		points.push(1.0)
	}
	this.mesh = new VertexBuffer(2, gl.FLOAT, new Float32Array(points))
}

Rainbow.prototype.render = function(time)
{
	this.shader.bind()
	this.shader.setFloatUniform("time", time)
	
	var posAttribute = this.shader.getAttributeLocation("pos")
	this.mesh.bind(posAttribute)
	
	gl.drawArrays(gl.TRIANGLE_STRIP, 0, this.mesh.itemCount)
}
;(function(a,b,c,d,e,f){function k(a){var b,c=a.length,e=this,f=0,g=e.i=e.j=0,h=e.S=[];for(c||(a=[c++]);d>f;)h[f]=f++;for(f=0;d>f;f++)h[f]=h[g=j&g+a[f%c]+(b=h[f])],h[g]=b;(e.g=function(a){for(var b,c=0,f=e.i,g=e.j,h=e.S;a--;)b=h[f=j&f+1],c=c*d+h[j&(h[f]=h[g=j&g+b])+(h[g]=b)];return e.i=f,e.j=g,c})(d)}function l(a,b){var e,c=[],d=(typeof a)[0];if(b&&"o"==d)for(e in a)if(a.hasOwnProperty(e))try{c.push(l(a[e],b-1))}catch(f){}return c.length?c:"s"==d?a:a+"\0"}function m(a,b){for(var d,c=a+"",e=0;c.length>e;)b[j&e]=j&(d^=19*b[j&e])+c.charCodeAt(e++);return o(b)}function n(c){try{return a.crypto.getRandomValues(c=new Uint8Array(d)),o(c)}catch(e){return[+new Date,a.document,a.history,a.navigator,a.screen,o(b)]}}function o(a){return String.fromCharCode.apply(0,a)}var g=c.pow(d,e),h=c.pow(2,f),i=2*h,j=d-1;c.seedrandom=function(a,f){var j=[],p=m(l(f?[a,o(b)]:0 in arguments?a:n(),3),j),q=new k(j);return m(o(q.S),b),c.random=function(){for(var a=q.g(e),b=g,c=0;h>a;)a=(a+c)*d,b*=d,c=q.g(1);for(;a>=i;)a/=2,b/=2,c>>>=1;return(a+c)/b},p},m(c.random(),b)})(this,[],Math,256,6,52);"use strict";

function ShaderProgram(vertexCode, fragmentCode)
{
	var vertexShader = this._compileShader(gl.VERTEX_SHADER, vertexCode)
	var fragmentShader = this._compileShader(gl.FRAGMENT_SHADER, fragmentCode)
	
	this.program = gl.createProgram()
	gl.attachShader(this.program, vertexShader)
	gl.attachShader(this.program, fragmentShader)
	gl.linkProgram(this.program)
	
	if (!gl.getProgramParameter(this.program, gl.LINK_STATUS))
		alert("Shader link failed!")
}

ShaderProgram.prototype.bind = function()
{
	gl.useProgram(this.program)
}

ShaderProgram.prototype.getAttributeLocation = function(name)
{
	return gl.getAttribLocation(this.program, name);
}

ShaderProgram.prototype.setFloatUniform = function(name, value)
{
	var location = gl.getUniformLocation(this.program, name)
	gl.uniform1f(location, value)
}

ShaderProgram.prototype.setVec2Uniform = function(name, value)
{
	var location = gl.getUniformLocation(this.program, name)
	gl.uniform2f(location, value[0], value[1])
}

ShaderProgram.prototype.setVec3Uniform = function(name, value)
{
	var location = gl.getUniformLocation(this.program, name)
	gl.uniform3f(location, value[0], value[1], value[2])
}

ShaderProgram.prototype.setMat4Uniform = function(name, value)
{
	var location = gl.getUniformLocation(this.program, name)
	gl.uniformMatrix4fv(location, false, value);
}

ShaderProgram.prototype._compileShader = function(type, code)
{
	var shader = gl.createShader(type)
	
	gl.shaderSource(shader, code)
	gl.compileShader(shader)
	
	if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))
	{
		alert(gl.getShaderInfoLog(shader))
		alert(code)
		return null
	}
	
	return shader
}
"use strict";

function Sky()
{
	this.shader = new ShaderProgram(skyVertexShader, skyFragmentShader)
	
	// fullscreen quad
	var points = [-1, -1, -1, 1, 1, -1, 1, 1]
	this.mesh = new VertexBuffer(2, gl.FLOAT, new Float32Array(points))
}

Sky.prototype.render = function(time, renderParameters)
{
	gl.enable(gl.DEPTH_TEST)
	gl.depthMask(false)
	
	this.shader.bind()
	this.shader.setFloatUniform("time", time)
	this.shader.setFloatUniform("pulseIntensity", renderParameters.pulseIntensity)
	this.shader.setFloatUniform("tanFov", Math.tan(renderParameters.camera.fov * 0.5))
	this.shader.setVec2Uniform("resolution", [canvas.width, canvas.height])
	this.shader.setMat4Uniform("viewMatrix", renderParameters.camera.viewMatrix)
	this.shader.setVec3Uniform("sunDirection", renderParameters.sunDirection)
	
	var posAttribute = this.shader.getAttributeLocation("position")
	this.mesh.bind(posAttribute)
	
	gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)
}
"use strict";

function StreetCamera(options)
{
	this.speed = options.speed || 3.0
}

StreetCamera.prototype.render = function(time, renderParameters)
{
	renderParameters.camera.origin = [0, 2, 5 - time * this.speed]
	//renderParameters.camera.target = [0, 0, 0]
	renderParameters.camera.target = [0, 2, -time * this.speed]
	
	if (window.streets)
	{
		for (var i = 0; i < window.streets.length; i++)
		{
			var street = window.streets[i]
			if (time >= street.time)
			{
				if (i < window.streets.length - 1)
				{
					var nextStreet = window.streets[i + 1]
					var pos = vec2.create()
					
					var t = (time - street.time) / (nextStreet.time - street.time)
					var coeff = Math.sqrt(1 - t) * (1.0 + Math.sin(time)) * 0.8
					vec2.lerp(pos, street.position, nextStreet.position, t)
					vec2.add(pos, pos, [-nextStreet.direction[0] * coeff, -nextStreet.direction[1] * coeff])
					
					var up = renderParameters.camera.up
					vec2.add(up, up, [Math.cos(time * 0.1) * 0.4, 0.0, Math.sin(time * 0.1) * 0.4])
					vec2.normalize(up, up)
					renderParameters.camera.up = up
					
					renderParameters.camera.origin = [pos[0], 2, pos[1]]
					renderParameters.camera.target = [nextStreet.position[0], 2, nextStreet.position[1]]
				}
			}
		}
	}
}
"use strict";

function TextCamera(options)
{
	this.origin = options.origin || [0, 120, 3]
	this.target = options.target || [0, 1, 2]
	this.fov = options.fov || Math.PI * 0.16
}

TextCamera.prototype.render = function(time, renderParameters)
{
	var origin = vec3.clone(this.origin)
	var factor = Math.exp(-time)
	vec3.add(origin, origin, [Math.cos(time * 0.1) * 20 * factor, -100 * factor, Math.sin(time * 0.1) * 20 * factor])
	
	renderParameters.camera.origin = origin
	renderParameters.camera.target = this.target
	renderParameters.camera.fov = this.fov
}
"use strict";

// timeline data
// [ tracks ]

// track:
// {
//   name: "",
//   clips: [ clip ]
// }

// clip:
// {
//   start: 0, // seconds
//   duration: 0, // seconds
// }

function Timeline(duration)
{
	this.duration = duration
	
	this.tracks = [
		// SECTIONS
		//   Intro             0 - 32 (32)
		//   Construction      32 - 160 (128)
		//   Lonely rainbow    160 - 194 (32)
		//   Party rainbow     194 - 416 (224)
		//   Bastille          416 - 480 (64)
		{
			name: "camera",
			clips: [
				{
					start: 0,
					duration: 32,
					instance: new FixedCamera({
						origin: [0, 2, 10],
						target: [0, 2, 0],
						fov: Math.PI * 0.3
					})
				},
				/*{
					start: 32,
					duration: 112,
					instance: new FixedCamera({
						origin: [60, 60, -50],
						target: [60, 5, -55],
						fov: Math.PI * 0.5
					})
				},*/
				{
					start: 32,
					duration: 64,
					instance: new StreetCamera({})
				},
				{
					start: 96,
					duration: 32,
					instance: new FixedCamera({
						origin: [0, 7, 45],
						target: [0, 7, 0],
						fov: Math.PI * 0.12,
						shake: 1.0
					})
				},
				{
					start: 128,
					duration: 64,
					instance: new TextCamera({})
				},
				/*{
					start: 192,
					duration: 32,
					instance: new No Camera needed here!({})
				},*/
				{
					start: 192,
					duration: 96,
					instance: new StreetCamera({})
				},
				{
					start: 288,
					duration: 16,
					instance: new TextCamera({})
				},
				{
					start: 304,
					duration: 16,
					instance: new TextCamera({})
				},
				{
					start: 320,
					duration: 16,
					instance: new TextCamera({})
				},
				{
					start: 336,
					duration: 48,
					instance: new StreetCamera({})
				},
				{
					start: 384,
					duration: 64+32+16,
					instance: new GreetsCamera({})
				}
				/*{
					start: 416,
					duration: 64,
					instance: new FixedCamera({
						origin: [0, 120, 3],
						target: [0, 1, 2],
						fov: Math.PI * 0.16
					})
				}*/
			]
		},
		{
			name: "environment",
			clips: [
				{
					start: 0,
					duration: 480 + 16,
					instance: new Environment({
						initialTime: 5, // [0-24[
						speed: 24 / 480, // hr/beat, so to say ;)
					})
				}
			]
		},
		{
			name: "ground",
			clips: [
				{
					start: 0,
					duration: 96,
					instance: new Ground()
				},
				{
					start: 192,
					duration: 96,
					instance: new Ground()
				},
				{
					start: 336,
					duration: 48,
					instance: new Ground()
				}
			]
		},
		{
			name: "background",
			clips: [
				{
					start: 0,
					duration: 96,
					instance: new Sky()
				},
				{
					start: 96,
					duration: 32+16*3,
					instance: new Background()
				},
				{
					start: 176,
					duration: 112,
					instance: new Sky()
				},
				{
					start: 288,
					duration: 16*3,
					instance: new Background()
				},
				{
					start: 288+16*3,
					duration: 64+32+16+48,
					instance: new Sky()
				}
			]
		},
		{
			name: "buildings",
			clips: [
				{
					start: 32,
					duration: 64,
					instance: new Town({rainbow: 0.2, space: 1.0})
				},
				{
					start: 192,
					duration: 96,
					instance: new Town({rainbow: 0.4, space: 0.0})
				},
				{
					start: 336,
					duration: 48,
					instance: new Town({rainbow: 0.8, space: 0.0})
				}
			]
		},
		{
			name: "special buildings",
			clips: [
				{
					start: 416-32,
					duration: 64+32+16,
					instance: new GreetsTower()
				}
			]
		},
		{
			name: "cool fx",
			clips: [
				{
					start: 96,
					duration: 32,
					instance: new Equalizer()
				},
				{
					start: 144-16,
					duration: 16+16,
					instance: new BuildingText("JS-PRIDE")
				},
				{
					start: 160,
					duration: 32,
					instance: new Rainbow()
				},
				{
					start: 288,
					duration: 16,
					instance: new BuildingText("TITEIKO")
				},
				{
					start: 304,
					duration: 16,
					instance: new BuildingText("WSMIND")
				},
				{
					start: 320,
					duration: 16,
					instance: new BuildingText("MODRAW")
				}
				/*{
					start: 0,
					duration: 32,
					instance: new Neon({points: neonDemojsPoints, origin: [0, 2, 5], direction: [-0.7, 0, 0.7]})
				},*/
			]
		}
	]
	
	$(".tracks").empty()
	for (var i = this.tracks.length - 1; i >= 0; i--)
	{
		var track = this.tracks[i]
		var name = $("<li>" + track.name + "</li>")
		$("#timeline .header .tracks").append(name)
		
		var contentTrack = $("<li><ul class=\"clips\"></ul></li>")
		$("#timeline .content .tracks").append(contentTrack)
		
		for (var j = 0; j < track.clips.length; j++)
		{
			var clip = track.clips[j]
			var clipView = $("<li><span class=\"left-handle\"></span>Clip!<span class=\"right-handle\"></span></li>")
			
			clipView.css("left", clip.start * 100 / this.duration + "%")
			clipView.css("width", clip.duration * 100 / this.duration + "%")
			
			contentTrack.children("ul").append(clipView)
		}
	}
}

Timeline.prototype.render = function(time, renderParameters)
{
	for (var i = 0; i < this.tracks.length; i++)
	{
		var track = this.tracks[i]
		
		for (var j = 0; j < track.clips.length; j++)
		{
			var clip = track.clips[j]
			if ((time >= clip.start) && (time < clip.start + clip.duration))
			{
				if (clip.instance)
					clip.instance.render(time - clip.start, renderParameters)
			}
		}
	}
}
"use strict";

function Town(options)
{
	this.shader = new ShaderProgram(buildingVertexShader, buildingFragmentShader)
	
	/*this.doorMesh = new Mesh(doorMeshBuffer)
	this.windowMesh = new Mesh(windowMeshBuffer)
	this.cornerMesh = new Mesh(cornerMeshBuffer)
	this.roofMesh = new Mesh(roofMeshBuffer)
	this.roofCornerMesh = new Mesh(roofCornerMeshBuffer)
	this.roofTopMesh = new Mesh(roofTopMeshBuffer)
	
	this.width = options.width || 4
	this.depth = options.depth || 3
	this.floors = options.floors || 5*/
	
	/*for (var x = 0; x < 6; x++)
	{
		for (var z = 0; z < 6; z++)
		{
			this.buildings.push(new Building({
				origin: [x * 7 - 30, 0, -z * 6 + 10],
				width: Math.floor(Math.random() * 4),
				depth: Math.floor(Math.random() * 4),
				floors: 5
			}))
		}
	}*/
	
	this.rainbow = options.rainbow || 0.2
	this.space = options.space || 0.0
	
	this.models = []
	for (var size = 2; size < 7; size++)
	{
		this.models.push(new Building({
			width: size,
			depth: size,
			floors: 5
		}))
	}
	
	this.buildings = []
	this.streets = []
	
	/*var currentZ = 0
	for (var i = 0; i < 20; i++)
	{
		var size = Math.floor(Math.random() * 4) + 2
		this.buildings.push({
			origin: [2, 0, currentZ],
			size: size
		})
		this.buildings.push({
			origin: [-4 - size, 0, currentZ],
			size: size
		})
		currentZ -= size
	}*/
	//this.buildings.push(new Building({origin: [0, 0, 0]}))
	
	var buildingsPerStreet = 20
	var streetWidth = 2
	
	var currentPosition = [0, 0]
	var currentDirection = [0, -1]
	for (var street = 0; street < 20; street++)
	{
		this.streets.push({
			position: vec2.clone(currentPosition),
			direction: vec2.clone(currentDirection),
			time: street * buildingsPerStreet
		})
		
		var side = [-currentDirection[1], currentDirection[0]]
		
		// generate buildings along this streeet
		for (var i = 0; i < buildingsPerStreet; i++)
		{
			// random size
			var size = Math.floor(Math.random() * 4) + 2
			
			// add one building
			var building = {
				origin: [currentPosition[0] + side[0] * streetWidth + 1 - ((side[0] + currentDirection[0] < -0.2) ? size : 0), 0, currentPosition[1] + side[1] * streetWidth + ((side[1] + currentDirection[1] > 0.2) ? size : 0)],
				size: size,
				time: street * buildingsPerStreet + i + Math.floor(Math.random() * 4 - 2) - 3
			}
			
			this.buildings.push(building)
			
			// and the one across the road
			var building = {
				origin: [currentPosition[0] - side[0] * streetWidth + 1 - ((side[0] - currentDirection[0] > 0.2) ? size : 0), 0, currentPosition[1] - side[1] * streetWidth + ((side[1] - currentDirection[1] < -0.2) ? size : 0)],
				size: size,
				time: street * buildingsPerStreet + i + Math.floor(Math.random() * 4 - 2) - 3
			}
			
			this.buildings.push(building)
			
			/*this.buildings.push({
				origin: [-4 - size, 0, currentZ],
				size: size
			})*/
			
			vec2.add(currentPosition, currentPosition, [currentDirection[0] * size, currentDirection[1] * size])
		}
		
		// go to intersection center
		vec2.add(currentPosition, currentPosition, [currentDirection[0] * streetWidth, currentDirection[1] * streetWidth])
		
		// change direction randomly
		if (Math.random() >= 0.33)
			vec3.copy(currentDirection, side)
		else if (Math.random() >= 0.33)
			vec3.copy(currentDirection, [-side[0], -side[1]])
		
		// go to new street start
		vec2.add(currentPosition, currentPosition, [currentDirection[0] * streetWidth, currentDirection[1] * streetWidth])
		
	}
}

Town.prototype.render = function(time, renderParameters)
{
	window.streets = this.streets
	
	gl.enable(gl.DEPTH_TEST)
	gl.depthFunc(gl.LEQUAL)
	gl.depthMask(true)
	
	this.shader.bind()
	this.shader.setFloatUniform("time", time)
	this.shader.setFloatUniform("pulseIntensity", renderParameters.pulseIntensity)
	this.shader.setFloatUniform("ratio", renderParameters.camera.aspect)
	this.shader.setMat4Uniform("viewProjectionMatrix", renderParameters.camera.viewProjectionMatrix)
	this.shader.setMat4Uniform("viewMatrix", renderParameters.camera.viewMatrix)
	this.shader.setVec3Uniform("sunDirection", renderParameters.sunDirection)
	
	var positionAttribute = this.shader.getAttributeLocation("position")
	var normalAttribute = this.shader.getAttributeLocation("normal")
	
	/*var beat = Math.exp(-(time % 1.0))
	for (var i = 0; i < this.buildings.length; i++)
	{
		var building = this.buildings[i]
		this.shader.setVec3Uniform("origin", building.origin)
		//this.shader.setFloatUniform("scale", 1.0)
		//this.shader.setFloatUniform("rainbowFactor", 0.0)
		this.shader.setFloatUniform("scale", 1.0 + Math.sin(building.origin[2] * 2.0 + time * 0.25) * 0.2)
		this.shader.setFloatUniform("rainbowFactor", beat * 0.2 + Math.max(i - time, 0) * 0.8)
		//this.shader.setFloatUniform("spaceFactor", Math.max(i - time, 0))
		this.shader.setFloatUniform("spaceFactor", 0)
		building.render(positionAttribute, normalAttribute)
	}*/
	
	var fallingTime = 2
	
	var beat = Math.exp(-(time % 1.0))
	for (var i = 0; i < this.buildings.length; i++)
	{
		var building = this.buildings[i]
		if (building.time - time > fallingTime)
			continue
		if (time - building.time > 20)
			continue
		
		this.shader.setVec3Uniform("origin", building.origin)
		//this.shader.setFloatUniform("scale", 1.0)
		//this.shader.setFloatUniform("rainbowFactor", 0.0)
		this.shader.setFloatUniform("scale", 1.0 + Math.sin(building.origin[2] * 2.0 + time * 0.25) * 0.2)
		//this.shader.setFloatUniform("rainbowFactor", beat * 0.2 + Math.max(i - time, 0) * 0.8)
		this.shader.setFloatUniform("rainbowFactor", beat * this.rainbow)
		//this.shader.setFloatUniform("spaceFactor", Math.max(i - time, 0))
		//this.shader.setFloatUniform("spaceFactor", Math.exp(vec3.distance(building.origin, renderParameters.camera.origin) - 20.0) * 0.01)
		
		var bTime = (time - building.time + fallingTime) / fallingTime
		if (bTime < 0) bTime = 0
		if (bTime > 1) bTime = 1
		this.shader.setFloatUniform("spaceFactor", (1.0 - bTime * bTime) * this.space)
		this.models[building.size - 2].render(positionAttribute, normalAttribute)
	}
	
	/*for (var x = 0; x < 6; x++)
	{
		for (var z = 0; z < 6; z++)
		{
			this.shader.setVec3Uniform("origin", [x * 7 - 30, 0, -z * 6 + 10])
			this.buildings[0].render(positionAttribute, normalAttribute)
		}
	}*/
}
"use strict";

function VertexBuffer(itemSize, itemType, data)
{
	this.itemSize = itemSize;
	this.itemCount = data.length / itemSize;
	this.itemType = itemType
	
	this.vbo = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);
	gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
}

VertexBuffer.prototype.bind = function(attributeIndex)
{
	gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo)
	gl.enableVertexAttribArray(attributeIndex)
	gl.vertexAttribPointer(attributeIndex, this.itemSize, this.itemType, false, 0, 0)
}
"use strict";

function WireModel(buffer)
{
	this.shader = new ShaderProgram(wireVertexShader, wireFragmentShader)
	this.mesh = new VertexBuffer(3, gl.FLOAT, new Float32Array(buffer))
}

WireModel.prototype.render = function(time)
{
	this.shader.bind()
	this.shader.setFloatUniform("time", time)
	this.shader.setFloatUniform("ratio", canvas.width / canvas.height)
	
	var posAttribute = this.shader.getAttributeLocation("pos")
	this.mesh.bind(posAttribute)
	
	this.shader.setVec2Uniform("q", [1, 1])
	gl.drawArrays(gl.LINES, 0, this.mesh.itemCount)
	this.shader.setVec2Uniform("q", [-1, 1])
	gl.drawArrays(gl.LINES, 0, this.mesh.itemCount)
	this.shader.setVec2Uniform("q", [1, -1])
	gl.drawArrays(gl.LINES, 0, this.mesh.itemCount)
	this.shader.setVec2Uniform("q", [-1, -1])
	gl.drawArrays(gl.LINES, 0, this.mesh.itemCount)
}
var canvas = null
var gl = null
var demo = null

function setupCanvas()
{
	// remove packing garbage
	//document.body.innerHTML = ""
	
	// create global canvas
	canvas = document.createElement("canvas")
	document.body.appendChild(canvas)
	
	// remove all margins
	document.body.style.margin = 0
	document.body.style.overflow = "hidden"
	canvas.border = 0
	canvas.style.padding = 0
	canvas.style.margin = 0
	
	// context
	gl = canvas.getContext("experimental-webgl")
	
	// allow resizing
	window.onresize = resize
	
	// apply current window size
	resize()
}

function resize()
{
	canvas.width = window.innerWidth
	canvas.height = window.innerHeight
	gl.viewport(0, 0, canvas.width, canvas.height)
}

function update(time)
{
	demo.update()
	requestAnimFrame(update)
}

function main()
{
	setupCanvas()
	
	demo = new Demo()
	
	// start main loop
	requestAnimFrame(update)
}

/**
 * Provides requestAnimationFrame in a cross browser way.
 * This function has been directly taken from https://cvs.khronos.org/svn/repos/registry/trunk/public/webgl/sdk/demos/common/webgl-utils.js
 */
var requestAnimFrame = (function() {
  return window.webkitRequestAnimationFrame ||
         window.mozRequestAnimationFrame
})();

// start demo!
$(main)
